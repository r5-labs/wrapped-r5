{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"R5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6 <0.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/// @title Wrapped R5\\r\\n/// @notice ERC20 wrapper for R5 coin with a fixed cap, burn, and EIP‑2612 permit\\r\\ncontract WrappedR5 is\\r\\n    ERC20,\\r\\n    ERC20Burnable,\\r\\n    ERC20Permit,\\r\\n    Ownable,\\r\\n    ReentrancyGuard\\r\\n{\\r\\n    /// @notice Maximum total supply: 66,337,700 WR5 (18 decimals)\\r\\n    uint256 public constant CAP = 66_337_700 * 10 ** 18;\\r\\n\\r\\n    /// @dev Emitted when new tokens are minted\\r\\n    event TokensMinted(address indexed to, uint256 amount);\\r\\n\\r\\n    /// @dev Emitted when tokens are burned\\r\\n    event TokensBurned(address indexed from, uint256 amount);\\r\\n\\r\\n    /// @dev Emitted when tokens are rescued from the contract\\r\\n    event TokensRecovered(\\r\\n        address indexed token,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when ownership transfer is initiated\\r\\n    event OwnershipTransferStarted(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /// @dev The address pending ownership transfer\\r\\n    address private _pendingOwner;\\r\\n\\r\\n    constructor()\\r\\n        ERC20(\\\"Wrapped R5\\\", \\\"WR5\\\")\\r\\n        ERC20Permit(\\\"Wrapped R5\\\")\\r\\n        Ownable(msg.sender)\\r\\n    {\\r\\n        // owner initialized to deployer\\r\\n    }\\r\\n\\r\\n    /// @notice View the address pending to become owner\\r\\n    function pendingOwner() public view returns (address) {\\r\\n        return _pendingOwner;\\r\\n    }\\r\\n\\r\\n    /// @notice Initiate ownership transfer to a new account (`newOwner` cannot accept until this is called)\\r\\n    /// @param newOwner The address to transfer ownership to\\r\\n    function initiateOwnershipTransfer(address newOwner) external onlyOwner {\\r\\n        require(newOwner != address(0), \\\"WrappedR5: new owner is zero address\\\");\\r\\n        _pendingOwner = newOwner;\\r\\n        emit OwnershipTransferStarted(owner(), newOwner);\\r\\n    }\\r\\n\\r\\n    /// @notice Accept ownership transfer (must be called by pending owner)\\r\\n    function acceptOwnership() external {\\r\\n        address sender = _msgSender();\\r\\n        require(sender == _pendingOwner, \\\"WrappedR5: caller is not the pending owner\\\");\\r\\n        _pendingOwner = address(0);\\r\\n        _transferOwnership(sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Mint up to the cap; only the owner can call\\r\\n    /// @param to   Recipient of the minted tokens\\r\\n    /// @param amount  Amount to mint (in wei)\\r\\n    function mint(address to, uint256 amount) external onlyOwner nonReentrant {\\r\\n        require(totalSupply() + amount <= CAP, \\\"WrappedR5: cap exceeded\\\");\\r\\n        _mint(to, amount);\\r\\n        emit TokensMinted(to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Burn your own tokens; emits a custom event\\r\\n    function burn(uint256 amount) public override {\\r\\n        super.burn(amount);\\r\\n        emit TokensBurned(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Burn from someone else’s allowance; emits a custom event\\r\\n    function burnFrom(address account, uint256 amount) public override {\\r\\n        super.burnFrom(account, amount);\\r\\n        emit TokensBurned(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Rescue any ERC20 tokens sent here by mistake\\r\\n    /// @param token  The ERC20 contract to pull tokens from\\r\\n    /// @param to     Recipient of the rescued tokens\\r\\n    /// @param amount Amount to recover\\r\\n    function emergencyRecoverERC20(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        token.transfer(to, amount);\\r\\n        emit TokensRecovered(address(token), to, amount);\\r\\n    }\\r\\n}\\r\\n\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    // slither-disable-next-line constable-states\\n    string private _nameFallback;\\n    // slither-disable-next-line constable-states\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5267\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {toShortStringWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {toShortStringWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\\n     */\\n    function toDataWithIntendedValidatorHash(\\n        address validator,\\n        bytes32 messageHash\\n    ) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, hex\\\"19_00\\\")\\n            mstore(0x02, shl(96, validator))\\n            mstore(0x16, messageHash)\\n            digest := keccak256(0x00, 0x36)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[]}}",
	"name": "WrappedR5",
	"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRecoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"OwnershipTransferStarted(address,address)\":{\"details\":\"Emitted when ownership transfer is initiated\"},\"TokensBurned(address,uint256)\":{\"details\":\"Emitted when tokens are burned\"},\"TokensMinted(address,uint256)\":{\"details\":\"Emitted when new tokens are minted\"},\"TokensRecovered(address,address,uint256)\":{\"details\":\"Emitted when tokens are rescued from the contract\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"},\"emergencyRecoverERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount to recover\",\"to\":\"Recipient of the rescued tokens\",\"token\":\"The ERC20 contract to pull tokens from\"}},\"initiateOwnershipTransfer(address)\":{\"params\":{\"newOwner\":\"The address to transfer ownership to\"}},\"mint(address,uint256)\":{\"params\":{\"amount\":\"Amount to mint (in wei)\",\"to\":\"Recipient of the minted tokens\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_pendingOwner\":{\"details\":\"The address pending ownership transfer\"}},\"title\":\"Wrapped R5\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CAP()\":{\"notice\":\"Maximum total supply: 66,337,700 WR5 (18 decimals)\"},\"acceptOwnership()\":{\"notice\":\"Accept ownership transfer (must be called by pending owner)\"},\"burn(uint256)\":{\"notice\":\"Burn your own tokens; emits a custom event\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn from someone else\\u2019s allowance; emits a custom event\"},\"emergencyRecoverERC20(address,address,uint256)\":{\"notice\":\"Rescue any ERC20 tokens sent here by mistake\"},\"initiateOwnershipTransfer(address)\":{\"notice\":\"Initiate ownership transfer to a new account (`newOwner` cannot accept until this is called)\"},\"mint(address,uint256)\":{\"notice\":\"Mint up to the cap; only the owner can call\"},\"pendingOwner()\":{\"notice\":\"View the address pending to become owner\"}},\"notice\":\"ERC20 wrapper for R5 coin with a fixed cap, burn, and EIP\\u20112612 permit\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"R5.sol\":\"WrappedR5\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xaa7f0646f49ebe2606eeca169f85c56451bbaeeeb06265fa076a03369a25d1d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ee931d4e832385765967efe6366dcc6d00d6a2d794f9c66ee38283c03882de9c\",\"dweb:/ipfs/QmR6SkuJGYxpQeLz38rBdghqaWqEPfzUsL9kBoXgEXKtbD\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea8b92e4245d75a5579c10f22f118f7b4ba07c57341f181f0b2a85ff8663de3\",\"dweb:/ipfs/Qme3Ss5ByjmkxxkMdLpyu7fQ1PCtjNFH1wEFszt2BZePiG\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x1fcf8cceb1a67e6c8512267e780933c4a3f63ef44756e6c818fda79be51c8402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://617d7d57f6f9cd449068b4d23daf485676d083aae648e038d05eb3a13291de35\",\"dweb:/ipfs/QmPADWPiGaSzZDFNpFEUx4ZPqhzPkYncBpHyTfAGcfsqzy\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x0c60057e7351874f086db8dc9291b7ada9ad62cb7725befd2991430d04a74572\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33cdfd1fc36410d45046f88ff9864350146b194736c32834baa38d99b843ffbe\",\"dweb:/ipfs/QmdVmqgFKjgEBURy4KUwWDA6J1LEg1BKcHcXsx4nkeHAD2\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59\",\"dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"R5.sol\":{\"keccak256\":\"0xd80f115078d99fefd654ae30b1e6d32de0fb520d7129452e760a844b297ef68a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7768a3fec729fb2bc86c348c3681cd287ca273d74a5218b56df83eb21af7b06a\",\"dweb:/ipfs/QmZ8xcHbWXKAVGjFU1Z9NwXHqo3hPrBGLXja8McWQQCvwK\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_1062": {
				"entryPoint": null,
				"id": 1062,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_2368": {
				"entryPoint": null,
				"id": 2368,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_328": {
				"entryPoint": null,
				"id": 328,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_3818": {
				"entryPoint": null,
				"id": 3818,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_426": {
				"entryPoint": null,
				"id": 426,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_50": {
				"entryPoint": null,
				"id": 50,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_buildDomainSeparator_2415": {
				"entryPoint": 658,
				"id": 2415,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_transferOwnership_146": {
				"entryPoint": 748,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@getStringSlot_1645": {
				"entryPoint": 1044,
				"id": 1645,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toShortStringWithFallback_1485": {
				"entryPoint": 581,
				"id": 1485,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toShortString_1387": {
				"entryPoint": 943,
				"id": 1387,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 1878,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
				"entryPoint": 1927,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 2084,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 1942,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 1893,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": 1957,
				"id": null,
				"parameterSlots": 6,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 2140,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_dataslot_t_bytes_memory_ptr": {
				"entryPoint": 2182,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_dataslot_t_string_storage": {
				"entryPoint": 1201,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_bytes_memory_ptr": {
				"entryPoint": 2172,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 1053,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 2038,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_t_string_storage": {
				"entryPoint": 1486,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"cleanup_t_address": {
				"entryPoint": 1861,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_bytes32": {
				"entryPoint": 1918,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 1830,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 1327,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clear_storage_range_t_bytes1": {
				"entryPoint": 1452,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
				"entryPoint": 2217,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"convert_t_uint256_to_t_uint256": {
				"entryPoint": 1345,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 1623,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"copy_memory_to_memory_with_cleanup": {
				"entryPoint": 2054,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"divide_by_32_ceil": {
				"entryPoint": 1219,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_byte_array_length": {
				"entryPoint": 1153,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": 1596,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"identity": {
				"entryPoint": 1336,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"mask_bytes_dynamic": {
				"entryPoint": 1568,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x22": {
				"entryPoint": 1108,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 1063,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"prepare_store_t_uint256": {
				"entryPoint": 1378,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"read_from_memoryt_bytes32": {
				"entryPoint": 2197,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"round_up_to_mul_of_32": {
				"entryPoint": 2068,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"shift_left_dynamic": {
				"entryPoint": 1234,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"shift_right_unsigned_dynamic": {
				"entryPoint": 1556,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"storage_set_to_zero_t_uint256": {
				"entryPoint": 1428,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"update_byte_slice_dynamic32": {
				"entryPoint": 1246,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"update_storage_value_t_uint256_to_t_uint256": {
				"entryPoint": 1387,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"zero_value_for_split_t_uint256": {
				"entryPoint": 1424,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:8934:21",
					"nodeType": "YulBlock",
					"src": "0:8934:21",
					"statements": [
						{
							"body": {
								"nativeSrc": "66:40:21",
								"nodeType": "YulBlock",
								"src": "66:40:21",
								"statements": [
									{
										"nativeSrc": "77:22:21",
										"nodeType": "YulAssignment",
										"src": "77:22:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "93:5:21",
													"nodeType": "YulIdentifier",
													"src": "93:5:21"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "87:5:21",
												"nodeType": "YulIdentifier",
												"src": "87:5:21"
											},
											"nativeSrc": "87:12:21",
											"nodeType": "YulFunctionCall",
											"src": "87:12:21"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "77:6:21",
												"nodeType": "YulIdentifier",
												"src": "77:6:21"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nativeSrc": "7:99:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "49:5:21",
									"nodeType": "YulTypedName",
									"src": "49:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "59:6:21",
									"nodeType": "YulTypedName",
									"src": "59:6:21",
									"type": ""
								}
							],
							"src": "7:99:21"
						},
						{
							"body": {
								"nativeSrc": "140:152:21",
								"nodeType": "YulBlock",
								"src": "140:152:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "157:1:21",
													"nodeType": "YulLiteral",
													"src": "157:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "160:77:21",
													"nodeType": "YulLiteral",
													"src": "160:77:21",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "150:6:21",
												"nodeType": "YulIdentifier",
												"src": "150:6:21"
											},
											"nativeSrc": "150:88:21",
											"nodeType": "YulFunctionCall",
											"src": "150:88:21"
										},
										"nativeSrc": "150:88:21",
										"nodeType": "YulExpressionStatement",
										"src": "150:88:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "254:1:21",
													"nodeType": "YulLiteral",
													"src": "254:1:21",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "257:4:21",
													"nodeType": "YulLiteral",
													"src": "257:4:21",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "247:6:21",
												"nodeType": "YulIdentifier",
												"src": "247:6:21"
											},
											"nativeSrc": "247:15:21",
											"nodeType": "YulFunctionCall",
											"src": "247:15:21"
										},
										"nativeSrc": "247:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "247:15:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "278:1:21",
													"nodeType": "YulLiteral",
													"src": "278:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "281:4:21",
													"nodeType": "YulLiteral",
													"src": "281:4:21",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "271:6:21",
												"nodeType": "YulIdentifier",
												"src": "271:6:21"
											},
											"nativeSrc": "271:15:21",
											"nodeType": "YulFunctionCall",
											"src": "271:15:21"
										},
										"nativeSrc": "271:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "271:15:21"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "112:180:21",
							"nodeType": "YulFunctionDefinition",
							"src": "112:180:21"
						},
						{
							"body": {
								"nativeSrc": "326:152:21",
								"nodeType": "YulBlock",
								"src": "326:152:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "343:1:21",
													"nodeType": "YulLiteral",
													"src": "343:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "346:77:21",
													"nodeType": "YulLiteral",
													"src": "346:77:21",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "336:6:21",
												"nodeType": "YulIdentifier",
												"src": "336:6:21"
											},
											"nativeSrc": "336:88:21",
											"nodeType": "YulFunctionCall",
											"src": "336:88:21"
										},
										"nativeSrc": "336:88:21",
										"nodeType": "YulExpressionStatement",
										"src": "336:88:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "440:1:21",
													"nodeType": "YulLiteral",
													"src": "440:1:21",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "443:4:21",
													"nodeType": "YulLiteral",
													"src": "443:4:21",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "433:6:21",
												"nodeType": "YulIdentifier",
												"src": "433:6:21"
											},
											"nativeSrc": "433:15:21",
											"nodeType": "YulFunctionCall",
											"src": "433:15:21"
										},
										"nativeSrc": "433:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "433:15:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "464:1:21",
													"nodeType": "YulLiteral",
													"src": "464:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "467:4:21",
													"nodeType": "YulLiteral",
													"src": "467:4:21",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "457:6:21",
												"nodeType": "YulIdentifier",
												"src": "457:6:21"
											},
											"nativeSrc": "457:15:21",
											"nodeType": "YulFunctionCall",
											"src": "457:15:21"
										},
										"nativeSrc": "457:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "457:15:21"
									}
								]
							},
							"name": "panic_error_0x22",
							"nativeSrc": "298:180:21",
							"nodeType": "YulFunctionDefinition",
							"src": "298:180:21"
						},
						{
							"body": {
								"nativeSrc": "535:269:21",
								"nodeType": "YulBlock",
								"src": "535:269:21",
								"statements": [
									{
										"nativeSrc": "545:22:21",
										"nodeType": "YulAssignment",
										"src": "545:22:21",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "559:4:21",
													"nodeType": "YulIdentifier",
													"src": "559:4:21"
												},
												{
													"kind": "number",
													"nativeSrc": "565:1:21",
													"nodeType": "YulLiteral",
													"src": "565:1:21",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "555:3:21",
												"nodeType": "YulIdentifier",
												"src": "555:3:21"
											},
											"nativeSrc": "555:12:21",
											"nodeType": "YulFunctionCall",
											"src": "555:12:21"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "545:6:21",
												"nodeType": "YulIdentifier",
												"src": "545:6:21"
											}
										]
									},
									{
										"nativeSrc": "576:38:21",
										"nodeType": "YulVariableDeclaration",
										"src": "576:38:21",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "606:4:21",
													"nodeType": "YulIdentifier",
													"src": "606:4:21"
												},
												{
													"kind": "number",
													"nativeSrc": "612:1:21",
													"nodeType": "YulLiteral",
													"src": "612:1:21",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "602:3:21",
												"nodeType": "YulIdentifier",
												"src": "602:3:21"
											},
											"nativeSrc": "602:12:21",
											"nodeType": "YulFunctionCall",
											"src": "602:12:21"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "580:18:21",
												"nodeType": "YulTypedName",
												"src": "580:18:21",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "653:51:21",
											"nodeType": "YulBlock",
											"src": "653:51:21",
											"statements": [
												{
													"nativeSrc": "667:27:21",
													"nodeType": "YulAssignment",
													"src": "667:27:21",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "681:6:21",
																"nodeType": "YulIdentifier",
																"src": "681:6:21"
															},
															{
																"kind": "number",
																"nativeSrc": "689:4:21",
																"nodeType": "YulLiteral",
																"src": "689:4:21",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "677:3:21",
															"nodeType": "YulIdentifier",
															"src": "677:3:21"
														},
														"nativeSrc": "677:17:21",
														"nodeType": "YulFunctionCall",
														"src": "677:17:21"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "667:6:21",
															"nodeType": "YulIdentifier",
															"src": "667:6:21"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "633:18:21",
													"nodeType": "YulIdentifier",
													"src": "633:18:21"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "626:6:21",
												"nodeType": "YulIdentifier",
												"src": "626:6:21"
											},
											"nativeSrc": "626:26:21",
											"nodeType": "YulFunctionCall",
											"src": "626:26:21"
										},
										"nativeSrc": "623:81:21",
										"nodeType": "YulIf",
										"src": "623:81:21"
									},
									{
										"body": {
											"nativeSrc": "756:42:21",
											"nodeType": "YulBlock",
											"src": "756:42:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nativeSrc": "770:16:21",
															"nodeType": "YulIdentifier",
															"src": "770:16:21"
														},
														"nativeSrc": "770:18:21",
														"nodeType": "YulFunctionCall",
														"src": "770:18:21"
													},
													"nativeSrc": "770:18:21",
													"nodeType": "YulExpressionStatement",
													"src": "770:18:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "720:18:21",
													"nodeType": "YulIdentifier",
													"src": "720:18:21"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "743:6:21",
															"nodeType": "YulIdentifier",
															"src": "743:6:21"
														},
														{
															"kind": "number",
															"nativeSrc": "751:2:21",
															"nodeType": "YulLiteral",
															"src": "751:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "740:2:21",
														"nodeType": "YulIdentifier",
														"src": "740:2:21"
													},
													"nativeSrc": "740:14:21",
													"nodeType": "YulFunctionCall",
													"src": "740:14:21"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "717:2:21",
												"nodeType": "YulIdentifier",
												"src": "717:2:21"
											},
											"nativeSrc": "717:38:21",
											"nodeType": "YulFunctionCall",
											"src": "717:38:21"
										},
										"nativeSrc": "714:84:21",
										"nodeType": "YulIf",
										"src": "714:84:21"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "484:320:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "519:4:21",
									"nodeType": "YulTypedName",
									"src": "519:4:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "528:6:21",
									"nodeType": "YulTypedName",
									"src": "528:6:21",
									"type": ""
								}
							],
							"src": "484:320:21"
						},
						{
							"body": {
								"nativeSrc": "864:87:21",
								"nodeType": "YulBlock",
								"src": "864:87:21",
								"statements": [
									{
										"nativeSrc": "874:11:21",
										"nodeType": "YulAssignment",
										"src": "874:11:21",
										"value": {
											"name": "ptr",
											"nativeSrc": "882:3:21",
											"nodeType": "YulIdentifier",
											"src": "882:3:21"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "874:4:21",
												"nodeType": "YulIdentifier",
												"src": "874:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "902:1:21",
													"nodeType": "YulLiteral",
													"src": "902:1:21",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nativeSrc": "905:3:21",
													"nodeType": "YulIdentifier",
													"src": "905:3:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "895:6:21",
												"nodeType": "YulIdentifier",
												"src": "895:6:21"
											},
											"nativeSrc": "895:14:21",
											"nodeType": "YulFunctionCall",
											"src": "895:14:21"
										},
										"nativeSrc": "895:14:21",
										"nodeType": "YulExpressionStatement",
										"src": "895:14:21"
									},
									{
										"nativeSrc": "918:26:21",
										"nodeType": "YulAssignment",
										"src": "918:26:21",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "936:1:21",
													"nodeType": "YulLiteral",
													"src": "936:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "939:4:21",
													"nodeType": "YulLiteral",
													"src": "939:4:21",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nativeSrc": "926:9:21",
												"nodeType": "YulIdentifier",
												"src": "926:9:21"
											},
											"nativeSrc": "926:18:21",
											"nodeType": "YulFunctionCall",
											"src": "926:18:21"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "918:4:21",
												"nodeType": "YulIdentifier",
												"src": "918:4:21"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_string_storage",
							"nativeSrc": "810:141:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "851:3:21",
									"nodeType": "YulTypedName",
									"src": "851:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "859:4:21",
									"nodeType": "YulTypedName",
									"src": "859:4:21",
									"type": ""
								}
							],
							"src": "810:141:21"
						},
						{
							"body": {
								"nativeSrc": "1001:49:21",
								"nodeType": "YulBlock",
								"src": "1001:49:21",
								"statements": [
									{
										"nativeSrc": "1011:33:21",
										"nodeType": "YulAssignment",
										"src": "1011:33:21",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1029:5:21",
															"nodeType": "YulIdentifier",
															"src": "1029:5:21"
														},
														{
															"kind": "number",
															"nativeSrc": "1036:2:21",
															"nodeType": "YulLiteral",
															"src": "1036:2:21",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1025:3:21",
														"nodeType": "YulIdentifier",
														"src": "1025:3:21"
													},
													"nativeSrc": "1025:14:21",
													"nodeType": "YulFunctionCall",
													"src": "1025:14:21"
												},
												{
													"kind": "number",
													"nativeSrc": "1041:2:21",
													"nodeType": "YulLiteral",
													"src": "1041:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "1021:3:21",
												"nodeType": "YulIdentifier",
												"src": "1021:3:21"
											},
											"nativeSrc": "1021:23:21",
											"nodeType": "YulFunctionCall",
											"src": "1021:23:21"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "1011:6:21",
												"nodeType": "YulIdentifier",
												"src": "1011:6:21"
											}
										]
									}
								]
							},
							"name": "divide_by_32_ceil",
							"nativeSrc": "957:93:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "984:5:21",
									"nodeType": "YulTypedName",
									"src": "984:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "994:6:21",
									"nodeType": "YulTypedName",
									"src": "994:6:21",
									"type": ""
								}
							],
							"src": "957:93:21"
						},
						{
							"body": {
								"nativeSrc": "1109:54:21",
								"nodeType": "YulBlock",
								"src": "1109:54:21",
								"statements": [
									{
										"nativeSrc": "1119:37:21",
										"nodeType": "YulAssignment",
										"src": "1119:37:21",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nativeSrc": "1144:4:21",
													"nodeType": "YulIdentifier",
													"src": "1144:4:21"
												},
												{
													"name": "value",
													"nativeSrc": "1150:5:21",
													"nodeType": "YulIdentifier",
													"src": "1150:5:21"
												}
											],
											"functionName": {
												"name": "shl",
												"nativeSrc": "1140:3:21",
												"nodeType": "YulIdentifier",
												"src": "1140:3:21"
											},
											"nativeSrc": "1140:16:21",
											"nodeType": "YulFunctionCall",
											"src": "1140:16:21"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "1119:8:21",
												"nodeType": "YulIdentifier",
												"src": "1119:8:21"
											}
										]
									}
								]
							},
							"name": "shift_left_dynamic",
							"nativeSrc": "1056:107:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nativeSrc": "1084:4:21",
									"nodeType": "YulTypedName",
									"src": "1084:4:21",
									"type": ""
								},
								{
									"name": "value",
									"nativeSrc": "1090:5:21",
									"nodeType": "YulTypedName",
									"src": "1090:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "1100:8:21",
									"nodeType": "YulTypedName",
									"src": "1100:8:21",
									"type": ""
								}
							],
							"src": "1056:107:21"
						},
						{
							"body": {
								"nativeSrc": "1245:317:21",
								"nodeType": "YulBlock",
								"src": "1245:317:21",
								"statements": [
									{
										"nativeSrc": "1255:35:21",
										"nodeType": "YulVariableDeclaration",
										"src": "1255:35:21",
										"value": {
											"arguments": [
												{
													"name": "shiftBytes",
													"nativeSrc": "1276:10:21",
													"nodeType": "YulIdentifier",
													"src": "1276:10:21"
												},
												{
													"kind": "number",
													"nativeSrc": "1288:1:21",
													"nodeType": "YulLiteral",
													"src": "1288:1:21",
													"type": "",
													"value": "8"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "1272:3:21",
												"nodeType": "YulIdentifier",
												"src": "1272:3:21"
											},
											"nativeSrc": "1272:18:21",
											"nodeType": "YulFunctionCall",
											"src": "1272:18:21"
										},
										"variables": [
											{
												"name": "shiftBits",
												"nativeSrc": "1259:9:21",
												"nodeType": "YulTypedName",
												"src": "1259:9:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "1299:109:21",
										"nodeType": "YulVariableDeclaration",
										"src": "1299:109:21",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nativeSrc": "1330:9:21",
													"nodeType": "YulIdentifier",
													"src": "1330:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "1341:66:21",
													"nodeType": "YulLiteral",
													"src": "1341:66:21",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nativeSrc": "1311:18:21",
												"nodeType": "YulIdentifier",
												"src": "1311:18:21"
											},
											"nativeSrc": "1311:97:21",
											"nodeType": "YulFunctionCall",
											"src": "1311:97:21"
										},
										"variables": [
											{
												"name": "mask",
												"nativeSrc": "1303:4:21",
												"nodeType": "YulTypedName",
												"src": "1303:4:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "1417:51:21",
										"nodeType": "YulAssignment",
										"src": "1417:51:21",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nativeSrc": "1448:9:21",
													"nodeType": "YulIdentifier",
													"src": "1448:9:21"
												},
												{
													"name": "toInsert",
													"nativeSrc": "1459:8:21",
													"nodeType": "YulIdentifier",
													"src": "1459:8:21"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nativeSrc": "1429:18:21",
												"nodeType": "YulIdentifier",
												"src": "1429:18:21"
											},
											"nativeSrc": "1429:39:21",
											"nodeType": "YulFunctionCall",
											"src": "1429:39:21"
										},
										"variableNames": [
											{
												"name": "toInsert",
												"nativeSrc": "1417:8:21",
												"nodeType": "YulIdentifier",
												"src": "1417:8:21"
											}
										]
									},
									{
										"nativeSrc": "1477:30:21",
										"nodeType": "YulAssignment",
										"src": "1477:30:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1490:5:21",
													"nodeType": "YulIdentifier",
													"src": "1490:5:21"
												},
												{
													"arguments": [
														{
															"name": "mask",
															"nativeSrc": "1501:4:21",
															"nodeType": "YulIdentifier",
															"src": "1501:4:21"
														}
													],
													"functionName": {
														"name": "not",
														"nativeSrc": "1497:3:21",
														"nodeType": "YulIdentifier",
														"src": "1497:3:21"
													},
													"nativeSrc": "1497:9:21",
													"nodeType": "YulFunctionCall",
													"src": "1497:9:21"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "1486:3:21",
												"nodeType": "YulIdentifier",
												"src": "1486:3:21"
											},
											"nativeSrc": "1486:21:21",
											"nodeType": "YulFunctionCall",
											"src": "1486:21:21"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "1477:5:21",
												"nodeType": "YulIdentifier",
												"src": "1477:5:21"
											}
										]
									},
									{
										"nativeSrc": "1516:40:21",
										"nodeType": "YulAssignment",
										"src": "1516:40:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1529:5:21",
													"nodeType": "YulIdentifier",
													"src": "1529:5:21"
												},
												{
													"arguments": [
														{
															"name": "toInsert",
															"nativeSrc": "1540:8:21",
															"nodeType": "YulIdentifier",
															"src": "1540:8:21"
														},
														{
															"name": "mask",
															"nativeSrc": "1550:4:21",
															"nodeType": "YulIdentifier",
															"src": "1550:4:21"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "1536:3:21",
														"nodeType": "YulIdentifier",
														"src": "1536:3:21"
													},
													"nativeSrc": "1536:19:21",
													"nodeType": "YulFunctionCall",
													"src": "1536:19:21"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "1526:2:21",
												"nodeType": "YulIdentifier",
												"src": "1526:2:21"
											},
											"nativeSrc": "1526:30:21",
											"nodeType": "YulFunctionCall",
											"src": "1526:30:21"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "1516:6:21",
												"nodeType": "YulIdentifier",
												"src": "1516:6:21"
											}
										]
									}
								]
							},
							"name": "update_byte_slice_dynamic32",
							"nativeSrc": "1169:393:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1206:5:21",
									"nodeType": "YulTypedName",
									"src": "1206:5:21",
									"type": ""
								},
								{
									"name": "shiftBytes",
									"nativeSrc": "1213:10:21",
									"nodeType": "YulTypedName",
									"src": "1213:10:21",
									"type": ""
								},
								{
									"name": "toInsert",
									"nativeSrc": "1225:8:21",
									"nodeType": "YulTypedName",
									"src": "1225:8:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "1238:6:21",
									"nodeType": "YulTypedName",
									"src": "1238:6:21",
									"type": ""
								}
							],
							"src": "1169:393:21"
						},
						{
							"body": {
								"nativeSrc": "1613:32:21",
								"nodeType": "YulBlock",
								"src": "1613:32:21",
								"statements": [
									{
										"nativeSrc": "1623:16:21",
										"nodeType": "YulAssignment",
										"src": "1623:16:21",
										"value": {
											"name": "value",
											"nativeSrc": "1634:5:21",
											"nodeType": "YulIdentifier",
											"src": "1634:5:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1623:7:21",
												"nodeType": "YulIdentifier",
												"src": "1623:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nativeSrc": "1568:77:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1595:5:21",
									"nodeType": "YulTypedName",
									"src": "1595:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1605:7:21",
									"nodeType": "YulTypedName",
									"src": "1605:7:21",
									"type": ""
								}
							],
							"src": "1568:77:21"
						},
						{
							"body": {
								"nativeSrc": "1683:28:21",
								"nodeType": "YulBlock",
								"src": "1683:28:21",
								"statements": [
									{
										"nativeSrc": "1693:12:21",
										"nodeType": "YulAssignment",
										"src": "1693:12:21",
										"value": {
											"name": "value",
											"nativeSrc": "1700:5:21",
											"nodeType": "YulIdentifier",
											"src": "1700:5:21"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "1693:3:21",
												"nodeType": "YulIdentifier",
												"src": "1693:3:21"
											}
										]
									}
								]
							},
							"name": "identity",
							"nativeSrc": "1651:60:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1669:5:21",
									"nodeType": "YulTypedName",
									"src": "1669:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "1679:3:21",
									"nodeType": "YulTypedName",
									"src": "1679:3:21",
									"type": ""
								}
							],
							"src": "1651:60:21"
						},
						{
							"body": {
								"nativeSrc": "1777:82:21",
								"nodeType": "YulBlock",
								"src": "1777:82:21",
								"statements": [
									{
										"nativeSrc": "1787:66:21",
										"nodeType": "YulAssignment",
										"src": "1787:66:21",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "1845:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "1845:5:21"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nativeSrc": "1827:17:21",
																"nodeType": "YulIdentifier",
																"src": "1827:17:21"
															},
															"nativeSrc": "1827:24:21",
															"nodeType": "YulFunctionCall",
															"src": "1827:24:21"
														}
													],
													"functionName": {
														"name": "identity",
														"nativeSrc": "1818:8:21",
														"nodeType": "YulIdentifier",
														"src": "1818:8:21"
													},
													"nativeSrc": "1818:34:21",
													"nodeType": "YulFunctionCall",
													"src": "1818:34:21"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "1800:17:21",
												"nodeType": "YulIdentifier",
												"src": "1800:17:21"
											},
											"nativeSrc": "1800:53:21",
											"nodeType": "YulFunctionCall",
											"src": "1800:53:21"
										},
										"variableNames": [
											{
												"name": "converted",
												"nativeSrc": "1787:9:21",
												"nodeType": "YulIdentifier",
												"src": "1787:9:21"
											}
										]
									}
								]
							},
							"name": "convert_t_uint256_to_t_uint256",
							"nativeSrc": "1717:142:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1757:5:21",
									"nodeType": "YulTypedName",
									"src": "1757:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "converted",
									"nativeSrc": "1767:9:21",
									"nodeType": "YulTypedName",
									"src": "1767:9:21",
									"type": ""
								}
							],
							"src": "1717:142:21"
						},
						{
							"body": {
								"nativeSrc": "1912:28:21",
								"nodeType": "YulBlock",
								"src": "1912:28:21",
								"statements": [
									{
										"nativeSrc": "1922:12:21",
										"nodeType": "YulAssignment",
										"src": "1922:12:21",
										"value": {
											"name": "value",
											"nativeSrc": "1929:5:21",
											"nodeType": "YulIdentifier",
											"src": "1929:5:21"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "1922:3:21",
												"nodeType": "YulIdentifier",
												"src": "1922:3:21"
											}
										]
									}
								]
							},
							"name": "prepare_store_t_uint256",
							"nativeSrc": "1865:75:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1898:5:21",
									"nodeType": "YulTypedName",
									"src": "1898:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "1908:3:21",
									"nodeType": "YulTypedName",
									"src": "1908:3:21",
									"type": ""
								}
							],
							"src": "1865:75:21"
						},
						{
							"body": {
								"nativeSrc": "2022:193:21",
								"nodeType": "YulBlock",
								"src": "2022:193:21",
								"statements": [
									{
										"nativeSrc": "2032:63:21",
										"nodeType": "YulVariableDeclaration",
										"src": "2032:63:21",
										"value": {
											"arguments": [
												{
													"name": "value_0",
													"nativeSrc": "2087:7:21",
													"nodeType": "YulIdentifier",
													"src": "2087:7:21"
												}
											],
											"functionName": {
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "2056:30:21",
												"nodeType": "YulIdentifier",
												"src": "2056:30:21"
											},
											"nativeSrc": "2056:39:21",
											"nodeType": "YulFunctionCall",
											"src": "2056:39:21"
										},
										"variables": [
											{
												"name": "convertedValue_0",
												"nativeSrc": "2036:16:21",
												"nodeType": "YulTypedName",
												"src": "2036:16:21",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "2111:4:21",
													"nodeType": "YulIdentifier",
													"src": "2111:4:21"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nativeSrc": "2151:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "2151:4:21"
																}
															],
															"functionName": {
																"name": "sload",
																"nativeSrc": "2145:5:21",
																"nodeType": "YulIdentifier",
																"src": "2145:5:21"
															},
															"nativeSrc": "2145:11:21",
															"nodeType": "YulFunctionCall",
															"src": "2145:11:21"
														},
														{
															"name": "offset",
															"nativeSrc": "2158:6:21",
															"nodeType": "YulIdentifier",
															"src": "2158:6:21"
														},
														{
															"arguments": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "2190:16:21",
																	"nodeType": "YulIdentifier",
																	"src": "2190:16:21"
																}
															],
															"functionName": {
																"name": "prepare_store_t_uint256",
																"nativeSrc": "2166:23:21",
																"nodeType": "YulIdentifier",
																"src": "2166:23:21"
															},
															"nativeSrc": "2166:41:21",
															"nodeType": "YulFunctionCall",
															"src": "2166:41:21"
														}
													],
													"functionName": {
														"name": "update_byte_slice_dynamic32",
														"nativeSrc": "2117:27:21",
														"nodeType": "YulIdentifier",
														"src": "2117:27:21"
													},
													"nativeSrc": "2117:91:21",
													"nodeType": "YulFunctionCall",
													"src": "2117:91:21"
												}
											],
											"functionName": {
												"name": "sstore",
												"nativeSrc": "2104:6:21",
												"nodeType": "YulIdentifier",
												"src": "2104:6:21"
											},
											"nativeSrc": "2104:105:21",
											"nodeType": "YulFunctionCall",
											"src": "2104:105:21"
										},
										"nativeSrc": "2104:105:21",
										"nodeType": "YulExpressionStatement",
										"src": "2104:105:21"
									}
								]
							},
							"name": "update_storage_value_t_uint256_to_t_uint256",
							"nativeSrc": "1946:269:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "1999:4:21",
									"nodeType": "YulTypedName",
									"src": "1999:4:21",
									"type": ""
								},
								{
									"name": "offset",
									"nativeSrc": "2005:6:21",
									"nodeType": "YulTypedName",
									"src": "2005:6:21",
									"type": ""
								},
								{
									"name": "value_0",
									"nativeSrc": "2013:7:21",
									"nodeType": "YulTypedName",
									"src": "2013:7:21",
									"type": ""
								}
							],
							"src": "1946:269:21"
						},
						{
							"body": {
								"nativeSrc": "2270:24:21",
								"nodeType": "YulBlock",
								"src": "2270:24:21",
								"statements": [
									{
										"nativeSrc": "2280:8:21",
										"nodeType": "YulAssignment",
										"src": "2280:8:21",
										"value": {
											"kind": "number",
											"nativeSrc": "2287:1:21",
											"nodeType": "YulLiteral",
											"src": "2287:1:21",
											"type": "",
											"value": "0"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "2280:3:21",
												"nodeType": "YulIdentifier",
												"src": "2280:3:21"
											}
										]
									}
								]
							},
							"name": "zero_value_for_split_t_uint256",
							"nativeSrc": "2221:73:21",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "2266:3:21",
									"nodeType": "YulTypedName",
									"src": "2266:3:21",
									"type": ""
								}
							],
							"src": "2221:73:21"
						},
						{
							"body": {
								"nativeSrc": "2353:136:21",
								"nodeType": "YulBlock",
								"src": "2353:136:21",
								"statements": [
									{
										"nativeSrc": "2363:46:21",
										"nodeType": "YulVariableDeclaration",
										"src": "2363:46:21",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "2377:30:21",
												"nodeType": "YulIdentifier",
												"src": "2377:30:21"
											},
											"nativeSrc": "2377:32:21",
											"nodeType": "YulFunctionCall",
											"src": "2377:32:21"
										},
										"variables": [
											{
												"name": "zero_0",
												"nativeSrc": "2367:6:21",
												"nodeType": "YulTypedName",
												"src": "2367:6:21",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "2462:4:21",
													"nodeType": "YulIdentifier",
													"src": "2462:4:21"
												},
												{
													"name": "offset",
													"nativeSrc": "2468:6:21",
													"nodeType": "YulIdentifier",
													"src": "2468:6:21"
												},
												{
													"name": "zero_0",
													"nativeSrc": "2476:6:21",
													"nodeType": "YulIdentifier",
													"src": "2476:6:21"
												}
											],
											"functionName": {
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "2418:43:21",
												"nodeType": "YulIdentifier",
												"src": "2418:43:21"
											},
											"nativeSrc": "2418:65:21",
											"nodeType": "YulFunctionCall",
											"src": "2418:65:21"
										},
										"nativeSrc": "2418:65:21",
										"nodeType": "YulExpressionStatement",
										"src": "2418:65:21"
									}
								]
							},
							"name": "storage_set_to_zero_t_uint256",
							"nativeSrc": "2300:189:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "2339:4:21",
									"nodeType": "YulTypedName",
									"src": "2339:4:21",
									"type": ""
								},
								{
									"name": "offset",
									"nativeSrc": "2345:6:21",
									"nodeType": "YulTypedName",
									"src": "2345:6:21",
									"type": ""
								}
							],
							"src": "2300:189:21"
						},
						{
							"body": {
								"nativeSrc": "2545:136:21",
								"nodeType": "YulBlock",
								"src": "2545:136:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "2612:63:21",
											"nodeType": "YulBlock",
											"src": "2612:63:21",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "2656:5:21",
																"nodeType": "YulIdentifier",
																"src": "2656:5:21"
															},
															{
																"kind": "number",
																"nativeSrc": "2663:1:21",
																"nodeType": "YulLiteral",
																"src": "2663:1:21",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "storage_set_to_zero_t_uint256",
															"nativeSrc": "2626:29:21",
															"nodeType": "YulIdentifier",
															"src": "2626:29:21"
														},
														"nativeSrc": "2626:39:21",
														"nodeType": "YulFunctionCall",
														"src": "2626:39:21"
													},
													"nativeSrc": "2626:39:21",
													"nodeType": "YulExpressionStatement",
													"src": "2626:39:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "start",
													"nativeSrc": "2565:5:21",
													"nodeType": "YulIdentifier",
													"src": "2565:5:21"
												},
												{
													"name": "end",
													"nativeSrc": "2572:3:21",
													"nodeType": "YulIdentifier",
													"src": "2572:3:21"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "2562:2:21",
												"nodeType": "YulIdentifier",
												"src": "2562:2:21"
											},
											"nativeSrc": "2562:14:21",
											"nodeType": "YulFunctionCall",
											"src": "2562:14:21"
										},
										"nativeSrc": "2555:120:21",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "2577:26:21",
											"nodeType": "YulBlock",
											"src": "2577:26:21",
											"statements": [
												{
													"nativeSrc": "2579:22:21",
													"nodeType": "YulAssignment",
													"src": "2579:22:21",
													"value": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "2592:5:21",
																"nodeType": "YulIdentifier",
																"src": "2592:5:21"
															},
															{
																"kind": "number",
																"nativeSrc": "2599:1:21",
																"nodeType": "YulLiteral",
																"src": "2599:1:21",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "2588:3:21",
															"nodeType": "YulIdentifier",
															"src": "2588:3:21"
														},
														"nativeSrc": "2588:13:21",
														"nodeType": "YulFunctionCall",
														"src": "2588:13:21"
													},
													"variableNames": [
														{
															"name": "start",
															"nativeSrc": "2579:5:21",
															"nodeType": "YulIdentifier",
															"src": "2579:5:21"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "2559:2:21",
											"nodeType": "YulBlock",
											"src": "2559:2:21",
											"statements": []
										},
										"src": "2555:120:21"
									}
								]
							},
							"name": "clear_storage_range_t_bytes1",
							"nativeSrc": "2495:186:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "start",
									"nativeSrc": "2533:5:21",
									"nodeType": "YulTypedName",
									"src": "2533:5:21",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "2540:3:21",
									"nodeType": "YulTypedName",
									"src": "2540:3:21",
									"type": ""
								}
							],
							"src": "2495:186:21"
						},
						{
							"body": {
								"nativeSrc": "2766:464:21",
								"nodeType": "YulBlock",
								"src": "2766:464:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "2792:431:21",
											"nodeType": "YulBlock",
											"src": "2792:431:21",
											"statements": [
												{
													"nativeSrc": "2806:54:21",
													"nodeType": "YulVariableDeclaration",
													"src": "2806:54:21",
													"value": {
														"arguments": [
															{
																"name": "array",
																"nativeSrc": "2854:5:21",
																"nodeType": "YulIdentifier",
																"src": "2854:5:21"
															}
														],
														"functionName": {
															"name": "array_dataslot_t_string_storage",
															"nativeSrc": "2822:31:21",
															"nodeType": "YulIdentifier",
															"src": "2822:31:21"
														},
														"nativeSrc": "2822:38:21",
														"nodeType": "YulFunctionCall",
														"src": "2822:38:21"
													},
													"variables": [
														{
															"name": "dataArea",
															"nativeSrc": "2810:8:21",
															"nodeType": "YulTypedName",
															"src": "2810:8:21",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "2873:63:21",
													"nodeType": "YulVariableDeclaration",
													"src": "2873:63:21",
													"value": {
														"arguments": [
															{
																"name": "dataArea",
																"nativeSrc": "2896:8:21",
																"nodeType": "YulIdentifier",
																"src": "2896:8:21"
															},
															{
																"arguments": [
																	{
																		"name": "startIndex",
																		"nativeSrc": "2924:10:21",
																		"nodeType": "YulIdentifier",
																		"src": "2924:10:21"
																	}
																],
																"functionName": {
																	"name": "divide_by_32_ceil",
																	"nativeSrc": "2906:17:21",
																	"nodeType": "YulIdentifier",
																	"src": "2906:17:21"
																},
																"nativeSrc": "2906:29:21",
																"nodeType": "YulFunctionCall",
																"src": "2906:29:21"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "2892:3:21",
															"nodeType": "YulIdentifier",
															"src": "2892:3:21"
														},
														"nativeSrc": "2892:44:21",
														"nodeType": "YulFunctionCall",
														"src": "2892:44:21"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nativeSrc": "2877:11:21",
															"nodeType": "YulTypedName",
															"src": "2877:11:21",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "3093:27:21",
														"nodeType": "YulBlock",
														"src": "3093:27:21",
														"statements": [
															{
																"nativeSrc": "3095:23:21",
																"nodeType": "YulAssignment",
																"src": "3095:23:21",
																"value": {
																	"name": "dataArea",
																	"nativeSrc": "3110:8:21",
																	"nodeType": "YulIdentifier",
																	"src": "3110:8:21"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nativeSrc": "3095:11:21",
																		"nodeType": "YulIdentifier",
																		"src": "3095:11:21"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nativeSrc": "3077:10:21",
																"nodeType": "YulIdentifier",
																"src": "3077:10:21"
															},
															{
																"kind": "number",
																"nativeSrc": "3089:2:21",
																"nodeType": "YulLiteral",
																"src": "3089:2:21",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "3074:2:21",
															"nodeType": "YulIdentifier",
															"src": "3074:2:21"
														},
														"nativeSrc": "3074:18:21",
														"nodeType": "YulFunctionCall",
														"src": "3074:18:21"
													},
													"nativeSrc": "3071:49:21",
													"nodeType": "YulIf",
													"src": "3071:49:21"
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "deleteStart",
																"nativeSrc": "3162:11:21",
																"nodeType": "YulIdentifier",
																"src": "3162:11:21"
															},
															{
																"arguments": [
																	{
																		"name": "dataArea",
																		"nativeSrc": "3179:8:21",
																		"nodeType": "YulIdentifier",
																		"src": "3179:8:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nativeSrc": "3207:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "3207:3:21"
																			}
																		],
																		"functionName": {
																			"name": "divide_by_32_ceil",
																			"nativeSrc": "3189:17:21",
																			"nodeType": "YulIdentifier",
																			"src": "3189:17:21"
																		},
																		"nativeSrc": "3189:22:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3189:22:21"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3175:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "3175:3:21"
																},
																"nativeSrc": "3175:37:21",
																"nodeType": "YulFunctionCall",
																"src": "3175:37:21"
															}
														],
														"functionName": {
															"name": "clear_storage_range_t_bytes1",
															"nativeSrc": "3133:28:21",
															"nodeType": "YulIdentifier",
															"src": "3133:28:21"
														},
														"nativeSrc": "3133:80:21",
														"nodeType": "YulFunctionCall",
														"src": "3133:80:21"
													},
													"nativeSrc": "3133:80:21",
													"nodeType": "YulExpressionStatement",
													"src": "3133:80:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nativeSrc": "2783:3:21",
													"nodeType": "YulIdentifier",
													"src": "2783:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "2788:2:21",
													"nodeType": "YulLiteral",
													"src": "2788:2:21",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "2780:2:21",
												"nodeType": "YulIdentifier",
												"src": "2780:2:21"
											},
											"nativeSrc": "2780:11:21",
											"nodeType": "YulFunctionCall",
											"src": "2780:11:21"
										},
										"nativeSrc": "2777:446:21",
										"nodeType": "YulIf",
										"src": "2777:446:21"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_t_string_storage",
							"nativeSrc": "2687:543:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "2742:5:21",
									"nodeType": "YulTypedName",
									"src": "2742:5:21",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "2749:3:21",
									"nodeType": "YulTypedName",
									"src": "2749:3:21",
									"type": ""
								},
								{
									"name": "startIndex",
									"nativeSrc": "2754:10:21",
									"nodeType": "YulTypedName",
									"src": "2754:10:21",
									"type": ""
								}
							],
							"src": "2687:543:21"
						},
						{
							"body": {
								"nativeSrc": "3299:54:21",
								"nodeType": "YulBlock",
								"src": "3299:54:21",
								"statements": [
									{
										"nativeSrc": "3309:37:21",
										"nodeType": "YulAssignment",
										"src": "3309:37:21",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nativeSrc": "3334:4:21",
													"nodeType": "YulIdentifier",
													"src": "3334:4:21"
												},
												{
													"name": "value",
													"nativeSrc": "3340:5:21",
													"nodeType": "YulIdentifier",
													"src": "3340:5:21"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "3330:3:21",
												"nodeType": "YulIdentifier",
												"src": "3330:3:21"
											},
											"nativeSrc": "3330:16:21",
											"nodeType": "YulFunctionCall",
											"src": "3330:16:21"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "3309:8:21",
												"nodeType": "YulIdentifier",
												"src": "3309:8:21"
											}
										]
									}
								]
							},
							"name": "shift_right_unsigned_dynamic",
							"nativeSrc": "3236:117:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nativeSrc": "3274:4:21",
									"nodeType": "YulTypedName",
									"src": "3274:4:21",
									"type": ""
								},
								{
									"name": "value",
									"nativeSrc": "3280:5:21",
									"nodeType": "YulTypedName",
									"src": "3280:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "3290:8:21",
									"nodeType": "YulTypedName",
									"src": "3290:8:21",
									"type": ""
								}
							],
							"src": "3236:117:21"
						},
						{
							"body": {
								"nativeSrc": "3410:118:21",
								"nodeType": "YulBlock",
								"src": "3410:118:21",
								"statements": [
									{
										"nativeSrc": "3420:68:21",
										"nodeType": "YulVariableDeclaration",
										"src": "3420:68:21",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "3469:1:21",
																	"nodeType": "YulLiteral",
																	"src": "3469:1:21",
																	"type": "",
																	"value": "8"
																},
																{
																	"name": "bytes",
																	"nativeSrc": "3472:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "3472:5:21"
																}
															],
															"functionName": {
																"name": "mul",
																"nativeSrc": "3465:3:21",
																"nodeType": "YulIdentifier",
																"src": "3465:3:21"
															},
															"nativeSrc": "3465:13:21",
															"nodeType": "YulFunctionCall",
															"src": "3465:13:21"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "3484:1:21",
																	"nodeType": "YulLiteral",
																	"src": "3484:1:21",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "3480:3:21",
																"nodeType": "YulIdentifier",
																"src": "3480:3:21"
															},
															"nativeSrc": "3480:6:21",
															"nodeType": "YulFunctionCall",
															"src": "3480:6:21"
														}
													],
													"functionName": {
														"name": "shift_right_unsigned_dynamic",
														"nativeSrc": "3436:28:21",
														"nodeType": "YulIdentifier",
														"src": "3436:28:21"
													},
													"nativeSrc": "3436:51:21",
													"nodeType": "YulFunctionCall",
													"src": "3436:51:21"
												}
											],
											"functionName": {
												"name": "not",
												"nativeSrc": "3432:3:21",
												"nodeType": "YulIdentifier",
												"src": "3432:3:21"
											},
											"nativeSrc": "3432:56:21",
											"nodeType": "YulFunctionCall",
											"src": "3432:56:21"
										},
										"variables": [
											{
												"name": "mask",
												"nativeSrc": "3424:4:21",
												"nodeType": "YulTypedName",
												"src": "3424:4:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3497:25:21",
										"nodeType": "YulAssignment",
										"src": "3497:25:21",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "3511:4:21",
													"nodeType": "YulIdentifier",
													"src": "3511:4:21"
												},
												{
													"name": "mask",
													"nativeSrc": "3517:4:21",
													"nodeType": "YulIdentifier",
													"src": "3517:4:21"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "3507:3:21",
												"nodeType": "YulIdentifier",
												"src": "3507:3:21"
											},
											"nativeSrc": "3507:15:21",
											"nodeType": "YulFunctionCall",
											"src": "3507:15:21"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "3497:6:21",
												"nodeType": "YulIdentifier",
												"src": "3497:6:21"
											}
										]
									}
								]
							},
							"name": "mask_bytes_dynamic",
							"nativeSrc": "3359:169:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "3387:4:21",
									"nodeType": "YulTypedName",
									"src": "3387:4:21",
									"type": ""
								},
								{
									"name": "bytes",
									"nativeSrc": "3393:5:21",
									"nodeType": "YulTypedName",
									"src": "3393:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "3403:6:21",
									"nodeType": "YulTypedName",
									"src": "3403:6:21",
									"type": ""
								}
							],
							"src": "3359:169:21"
						},
						{
							"body": {
								"nativeSrc": "3614:214:21",
								"nodeType": "YulBlock",
								"src": "3614:214:21",
								"statements": [
									{
										"nativeSrc": "3747:37:21",
										"nodeType": "YulAssignment",
										"src": "3747:37:21",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "3774:4:21",
													"nodeType": "YulIdentifier",
													"src": "3774:4:21"
												},
												{
													"name": "len",
													"nativeSrc": "3780:3:21",
													"nodeType": "YulIdentifier",
													"src": "3780:3:21"
												}
											],
											"functionName": {
												"name": "mask_bytes_dynamic",
												"nativeSrc": "3755:18:21",
												"nodeType": "YulIdentifier",
												"src": "3755:18:21"
											},
											"nativeSrc": "3755:29:21",
											"nodeType": "YulFunctionCall",
											"src": "3755:29:21"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "3747:4:21",
												"nodeType": "YulIdentifier",
												"src": "3747:4:21"
											}
										]
									},
									{
										"nativeSrc": "3793:29:21",
										"nodeType": "YulAssignment",
										"src": "3793:29:21",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "3804:4:21",
													"nodeType": "YulIdentifier",
													"src": "3804:4:21"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "3814:1:21",
															"nodeType": "YulLiteral",
															"src": "3814:1:21",
															"type": "",
															"value": "2"
														},
														{
															"name": "len",
															"nativeSrc": "3817:3:21",
															"nodeType": "YulIdentifier",
															"src": "3817:3:21"
														}
													],
													"functionName": {
														"name": "mul",
														"nativeSrc": "3810:3:21",
														"nodeType": "YulIdentifier",
														"src": "3810:3:21"
													},
													"nativeSrc": "3810:11:21",
													"nodeType": "YulFunctionCall",
													"src": "3810:11:21"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "3801:2:21",
												"nodeType": "YulIdentifier",
												"src": "3801:2:21"
											},
											"nativeSrc": "3801:21:21",
											"nodeType": "YulFunctionCall",
											"src": "3801:21:21"
										},
										"variableNames": [
											{
												"name": "used",
												"nativeSrc": "3793:4:21",
												"nodeType": "YulIdentifier",
												"src": "3793:4:21"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nativeSrc": "3533:295:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "3595:4:21",
									"nodeType": "YulTypedName",
									"src": "3595:4:21",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "3601:3:21",
									"nodeType": "YulTypedName",
									"src": "3601:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nativeSrc": "3609:4:21",
									"nodeType": "YulTypedName",
									"src": "3609:4:21",
									"type": ""
								}
							],
							"src": "3533:295:21"
						},
						{
							"body": {
								"nativeSrc": "3925:1303:21",
								"nodeType": "YulBlock",
								"src": "3925:1303:21",
								"statements": [
									{
										"nativeSrc": "3936:51:21",
										"nodeType": "YulVariableDeclaration",
										"src": "3936:51:21",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "3983:3:21",
													"nodeType": "YulIdentifier",
													"src": "3983:3:21"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "3950:32:21",
												"nodeType": "YulIdentifier",
												"src": "3950:32:21"
											},
											"nativeSrc": "3950:37:21",
											"nodeType": "YulFunctionCall",
											"src": "3950:37:21"
										},
										"variables": [
											{
												"name": "newLen",
												"nativeSrc": "3940:6:21",
												"nodeType": "YulTypedName",
												"src": "3940:6:21",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4072:22:21",
											"nodeType": "YulBlock",
											"src": "4072:22:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "4074:16:21",
															"nodeType": "YulIdentifier",
															"src": "4074:16:21"
														},
														"nativeSrc": "4074:18:21",
														"nodeType": "YulFunctionCall",
														"src": "4074:18:21"
													},
													"nativeSrc": "4074:18:21",
													"nodeType": "YulExpressionStatement",
													"src": "4074:18:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "4044:6:21",
													"nodeType": "YulIdentifier",
													"src": "4044:6:21"
												},
												{
													"kind": "number",
													"nativeSrc": "4052:18:21",
													"nodeType": "YulLiteral",
													"src": "4052:18:21",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "4041:2:21",
												"nodeType": "YulIdentifier",
												"src": "4041:2:21"
											},
											"nativeSrc": "4041:30:21",
											"nodeType": "YulFunctionCall",
											"src": "4041:30:21"
										},
										"nativeSrc": "4038:56:21",
										"nodeType": "YulIf",
										"src": "4038:56:21"
									},
									{
										"nativeSrc": "4104:52:21",
										"nodeType": "YulVariableDeclaration",
										"src": "4104:52:21",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "slot",
															"nativeSrc": "4150:4:21",
															"nodeType": "YulIdentifier",
															"src": "4150:4:21"
														}
													],
													"functionName": {
														"name": "sload",
														"nativeSrc": "4144:5:21",
														"nodeType": "YulIdentifier",
														"src": "4144:5:21"
													},
													"nativeSrc": "4144:11:21",
													"nodeType": "YulFunctionCall",
													"src": "4144:11:21"
												}
											],
											"functionName": {
												"name": "extract_byte_array_length",
												"nativeSrc": "4118:25:21",
												"nodeType": "YulIdentifier",
												"src": "4118:25:21"
											},
											"nativeSrc": "4118:38:21",
											"nodeType": "YulFunctionCall",
											"src": "4118:38:21"
										},
										"variables": [
											{
												"name": "oldLen",
												"nativeSrc": "4108:6:21",
												"nodeType": "YulTypedName",
												"src": "4108:6:21",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "4249:4:21",
													"nodeType": "YulIdentifier",
													"src": "4249:4:21"
												},
												{
													"name": "oldLen",
													"nativeSrc": "4255:6:21",
													"nodeType": "YulIdentifier",
													"src": "4255:6:21"
												},
												{
													"name": "newLen",
													"nativeSrc": "4263:6:21",
													"nodeType": "YulIdentifier",
													"src": "4263:6:21"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "4203:45:21",
												"nodeType": "YulIdentifier",
												"src": "4203:45:21"
											},
											"nativeSrc": "4203:67:21",
											"nodeType": "YulFunctionCall",
											"src": "4203:67:21"
										},
										"nativeSrc": "4203:67:21",
										"nodeType": "YulExpressionStatement",
										"src": "4203:67:21"
									},
									{
										"nativeSrc": "4280:18:21",
										"nodeType": "YulVariableDeclaration",
										"src": "4280:18:21",
										"value": {
											"kind": "number",
											"nativeSrc": "4297:1:21",
											"nodeType": "YulLiteral",
											"src": "4297:1:21",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nativeSrc": "4284:9:21",
												"nodeType": "YulTypedName",
												"src": "4284:9:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "4308:17:21",
										"nodeType": "YulAssignment",
										"src": "4308:17:21",
										"value": {
											"kind": "number",
											"nativeSrc": "4321:4:21",
											"nodeType": "YulLiteral",
											"src": "4321:4:21",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nativeSrc": "4308:9:21",
												"nodeType": "YulIdentifier",
												"src": "4308:9:21"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "4372:611:21",
													"nodeType": "YulBlock",
													"src": "4372:611:21",
													"statements": [
														{
															"nativeSrc": "4386:37:21",
															"nodeType": "YulVariableDeclaration",
															"src": "4386:37:21",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "4405:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "4405:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4417:4:21",
																				"nodeType": "YulLiteral",
																				"src": "4417:4:21",
																				"type": "",
																				"value": "0x1f"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "4413:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "4413:3:21"
																		},
																		"nativeSrc": "4413:9:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4413:9:21"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4401:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "4401:3:21"
																},
																"nativeSrc": "4401:22:21",
																"nodeType": "YulFunctionCall",
																"src": "4401:22:21"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nativeSrc": "4390:7:21",
																	"nodeType": "YulTypedName",
																	"src": "4390:7:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4437:51:21",
															"nodeType": "YulVariableDeclaration",
															"src": "4437:51:21",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "4483:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "4483:4:21"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_string_storage",
																	"nativeSrc": "4451:31:21",
																	"nodeType": "YulIdentifier",
																	"src": "4451:31:21"
																},
																"nativeSrc": "4451:37:21",
																"nodeType": "YulFunctionCall",
																"src": "4451:37:21"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nativeSrc": "4441:6:21",
																	"nodeType": "YulTypedName",
																	"src": "4441:6:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4501:10:21",
															"nodeType": "YulVariableDeclaration",
															"src": "4501:10:21",
															"value": {
																"kind": "number",
																"nativeSrc": "4510:1:21",
																"nodeType": "YulLiteral",
																"src": "4510:1:21",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "4505:1:21",
																	"nodeType": "YulTypedName",
																	"src": "4505:1:21",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4569:163:21",
																"nodeType": "YulBlock",
																"src": "4569:163:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "4594:6:21",
																					"nodeType": "YulIdentifier",
																					"src": "4594:6:21"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "4612:3:21",
																									"nodeType": "YulIdentifier",
																									"src": "4612:3:21"
																								},
																								{
																									"name": "srcOffset",
																									"nativeSrc": "4617:9:21",
																									"nodeType": "YulIdentifier",
																									"src": "4617:9:21"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "4608:3:21",
																								"nodeType": "YulIdentifier",
																								"src": "4608:3:21"
																							},
																							"nativeSrc": "4608:19:21",
																							"nodeType": "YulFunctionCall",
																							"src": "4608:19:21"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "4602:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "4602:5:21"
																					},
																					"nativeSrc": "4602:26:21",
																					"nodeType": "YulFunctionCall",
																					"src": "4602:26:21"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "4587:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "4587:6:21"
																			},
																			"nativeSrc": "4587:42:21",
																			"nodeType": "YulFunctionCall",
																			"src": "4587:42:21"
																		},
																		"nativeSrc": "4587:42:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "4587:42:21"
																	},
																	{
																		"nativeSrc": "4646:24:21",
																		"nodeType": "YulAssignment",
																		"src": "4646:24:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "4660:6:21",
																					"nodeType": "YulIdentifier",
																					"src": "4660:6:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4668:1:21",
																					"nodeType": "YulLiteral",
																					"src": "4668:1:21",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4656:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "4656:3:21"
																			},
																			"nativeSrc": "4656:14:21",
																			"nodeType": "YulFunctionCall",
																			"src": "4656:14:21"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nativeSrc": "4646:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "4646:6:21"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4687:31:21",
																		"nodeType": "YulAssignment",
																		"src": "4687:31:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nativeSrc": "4704:9:21",
																					"nodeType": "YulIdentifier",
																					"src": "4704:9:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4715:2:21",
																					"nodeType": "YulLiteral",
																					"src": "4715:2:21",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4700:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "4700:3:21"
																			},
																			"nativeSrc": "4700:18:21",
																			"nodeType": "YulFunctionCall",
																			"src": "4700:18:21"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nativeSrc": "4687:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "4687:9:21"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "4535:1:21",
																		"nodeType": "YulIdentifier",
																		"src": "4535:1:21"
																	},
																	{
																		"name": "loopEnd",
																		"nativeSrc": "4538:7:21",
																		"nodeType": "YulIdentifier",
																		"src": "4538:7:21"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "4532:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "4532:2:21"
																},
																"nativeSrc": "4532:14:21",
																"nodeType": "YulFunctionCall",
																"src": "4532:14:21"
															},
															"nativeSrc": "4524:208:21",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "4547:21:21",
																"nodeType": "YulBlock",
																"src": "4547:21:21",
																"statements": [
																	{
																		"nativeSrc": "4549:17:21",
																		"nodeType": "YulAssignment",
																		"src": "4549:17:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "4558:1:21",
																					"nodeType": "YulIdentifier",
																					"src": "4558:1:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4561:4:21",
																					"nodeType": "YulLiteral",
																					"src": "4561:4:21",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4554:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "4554:3:21"
																			},
																			"nativeSrc": "4554:12:21",
																			"nodeType": "YulFunctionCall",
																			"src": "4554:12:21"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "4549:1:21",
																				"nodeType": "YulIdentifier",
																				"src": "4549:1:21"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "4528:3:21",
																"nodeType": "YulBlock",
																"src": "4528:3:21",
																"statements": []
															},
															"src": "4524:208:21"
														},
														{
															"body": {
																"nativeSrc": "4768:156:21",
																"nodeType": "YulBlock",
																"src": "4768:156:21",
																"statements": [
																	{
																		"nativeSrc": "4786:43:21",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4786:43:21",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "4813:3:21",
																							"nodeType": "YulIdentifier",
																							"src": "4813:3:21"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "4818:9:21",
																							"nodeType": "YulIdentifier",
																							"src": "4818:9:21"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "4809:3:21",
																						"nodeType": "YulIdentifier",
																						"src": "4809:3:21"
																					},
																					"nativeSrc": "4809:19:21",
																					"nodeType": "YulFunctionCall",
																					"src": "4809:19:21"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "4803:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "4803:5:21"
																			},
																			"nativeSrc": "4803:26:21",
																			"nodeType": "YulFunctionCall",
																			"src": "4803:26:21"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nativeSrc": "4790:9:21",
																				"nodeType": "YulTypedName",
																				"src": "4790:9:21",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "4853:6:21",
																					"nodeType": "YulIdentifier",
																					"src": "4853:6:21"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nativeSrc": "4880:9:21",
																							"nodeType": "YulIdentifier",
																							"src": "4880:9:21"
																						},
																						{
																							"arguments": [
																								{
																									"name": "newLen",
																									"nativeSrc": "4895:6:21",
																									"nodeType": "YulIdentifier",
																									"src": "4895:6:21"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "4903:4:21",
																									"nodeType": "YulLiteral",
																									"src": "4903:4:21",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nativeSrc": "4891:3:21",
																								"nodeType": "YulIdentifier",
																								"src": "4891:3:21"
																							},
																							"nativeSrc": "4891:17:21",
																							"nodeType": "YulFunctionCall",
																							"src": "4891:17:21"
																						}
																					],
																					"functionName": {
																						"name": "mask_bytes_dynamic",
																						"nativeSrc": "4861:18:21",
																						"nodeType": "YulIdentifier",
																						"src": "4861:18:21"
																					},
																					"nativeSrc": "4861:48:21",
																					"nodeType": "YulFunctionCall",
																					"src": "4861:48:21"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "4846:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "4846:6:21"
																			},
																			"nativeSrc": "4846:64:21",
																			"nodeType": "YulFunctionCall",
																			"src": "4846:64:21"
																		},
																		"nativeSrc": "4846:64:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "4846:64:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nativeSrc": "4751:7:21",
																		"nodeType": "YulIdentifier",
																		"src": "4751:7:21"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "4760:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "4760:6:21"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "4748:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "4748:2:21"
																},
																"nativeSrc": "4748:19:21",
																"nodeType": "YulFunctionCall",
																"src": "4748:19:21"
															},
															"nativeSrc": "4745:179:21",
															"nodeType": "YulIf",
															"src": "4745:179:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "4944:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "4944:4:21"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "newLen",
																						"nativeSrc": "4958:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "4958:6:21"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4966:1:21",
																						"nodeType": "YulLiteral",
																						"src": "4966:1:21",
																						"type": "",
																						"value": "2"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "4954:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4954:3:21"
																				},
																				"nativeSrc": "4954:14:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4954:14:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4970:1:21",
																				"nodeType": "YulLiteral",
																				"src": "4970:1:21",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4950:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "4950:3:21"
																		},
																		"nativeSrc": "4950:22:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4950:22:21"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "4937:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "4937:6:21"
																},
																"nativeSrc": "4937:36:21",
																"nodeType": "YulFunctionCall",
																"src": "4937:36:21"
															},
															"nativeSrc": "4937:36:21",
															"nodeType": "YulExpressionStatement",
															"src": "4937:36:21"
														}
													]
												},
												"nativeSrc": "4365:618:21",
												"nodeType": "YulCase",
												"src": "4365:618:21",
												"value": {
													"kind": "number",
													"nativeSrc": "4370:1:21",
													"nodeType": "YulLiteral",
													"src": "4370:1:21",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "5000:222:21",
													"nodeType": "YulBlock",
													"src": "5000:222:21",
													"statements": [
														{
															"nativeSrc": "5014:14:21",
															"nodeType": "YulVariableDeclaration",
															"src": "5014:14:21",
															"value": {
																"kind": "number",
																"nativeSrc": "5027:1:21",
																"nodeType": "YulLiteral",
																"src": "5027:1:21",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "5018:5:21",
																	"nodeType": "YulTypedName",
																	"src": "5018:5:21",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5051:67:21",
																"nodeType": "YulBlock",
																"src": "5051:67:21",
																"statements": [
																	{
																		"nativeSrc": "5069:35:21",
																		"nodeType": "YulAssignment",
																		"src": "5069:35:21",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "5088:3:21",
																							"nodeType": "YulIdentifier",
																							"src": "5088:3:21"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "5093:9:21",
																							"nodeType": "YulIdentifier",
																							"src": "5093:9:21"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "5084:3:21",
																						"nodeType": "YulIdentifier",
																						"src": "5084:3:21"
																					},
																					"nativeSrc": "5084:19:21",
																					"nodeType": "YulFunctionCall",
																					"src": "5084:19:21"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "5078:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "5078:5:21"
																			},
																			"nativeSrc": "5078:26:21",
																			"nodeType": "YulFunctionCall",
																			"src": "5078:26:21"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "5069:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "5069:5:21"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nativeSrc": "5044:6:21",
																"nodeType": "YulIdentifier",
																"src": "5044:6:21"
															},
															"nativeSrc": "5041:77:21",
															"nodeType": "YulIf",
															"src": "5041:77:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5138:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "5138:4:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5197:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "5197:5:21"
																			},
																			{
																				"name": "newLen",
																				"nativeSrc": "5204:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "5204:6:21"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nativeSrc": "5144:52:21",
																			"nodeType": "YulIdentifier",
																			"src": "5144:52:21"
																		},
																		"nativeSrc": "5144:67:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5144:67:21"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "5131:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "5131:6:21"
																},
																"nativeSrc": "5131:81:21",
																"nodeType": "YulFunctionCall",
																"src": "5131:81:21"
															},
															"nativeSrc": "5131:81:21",
															"nodeType": "YulExpressionStatement",
															"src": "5131:81:21"
														}
													]
												},
												"nativeSrc": "4992:230:21",
												"nodeType": "YulCase",
												"src": "4992:230:21",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "4345:6:21",
													"nodeType": "YulIdentifier",
													"src": "4345:6:21"
												},
												{
													"kind": "number",
													"nativeSrc": "4353:2:21",
													"nodeType": "YulLiteral",
													"src": "4353:2:21",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "4342:2:21",
												"nodeType": "YulIdentifier",
												"src": "4342:2:21"
											},
											"nativeSrc": "4342:14:21",
											"nodeType": "YulFunctionCall",
											"src": "4342:14:21"
										},
										"nativeSrc": "4335:887:21",
										"nodeType": "YulSwitch",
										"src": "4335:887:21"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nativeSrc": "3833:1395:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "3914:4:21",
									"nodeType": "YulTypedName",
									"src": "3914:4:21",
									"type": ""
								},
								{
									"name": "src",
									"nativeSrc": "3920:3:21",
									"nodeType": "YulTypedName",
									"src": "3920:3:21",
									"type": ""
								}
							],
							"src": "3833:1395:21"
						},
						{
							"body": {
								"nativeSrc": "5279:81:21",
								"nodeType": "YulBlock",
								"src": "5279:81:21",
								"statements": [
									{
										"nativeSrc": "5289:65:21",
										"nodeType": "YulAssignment",
										"src": "5289:65:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "5304:5:21",
													"nodeType": "YulIdentifier",
													"src": "5304:5:21"
												},
												{
													"kind": "number",
													"nativeSrc": "5311:42:21",
													"nodeType": "YulLiteral",
													"src": "5311:42:21",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "5300:3:21",
												"nodeType": "YulIdentifier",
												"src": "5300:3:21"
											},
											"nativeSrc": "5300:54:21",
											"nodeType": "YulFunctionCall",
											"src": "5300:54:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "5289:7:21",
												"nodeType": "YulIdentifier",
												"src": "5289:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "5234:126:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5261:5:21",
									"nodeType": "YulTypedName",
									"src": "5261:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "5271:7:21",
									"nodeType": "YulTypedName",
									"src": "5271:7:21",
									"type": ""
								}
							],
							"src": "5234:126:21"
						},
						{
							"body": {
								"nativeSrc": "5411:51:21",
								"nodeType": "YulBlock",
								"src": "5411:51:21",
								"statements": [
									{
										"nativeSrc": "5421:35:21",
										"nodeType": "YulAssignment",
										"src": "5421:35:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "5450:5:21",
													"nodeType": "YulIdentifier",
													"src": "5450:5:21"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "5432:17:21",
												"nodeType": "YulIdentifier",
												"src": "5432:17:21"
											},
											"nativeSrc": "5432:24:21",
											"nodeType": "YulFunctionCall",
											"src": "5432:24:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "5421:7:21",
												"nodeType": "YulIdentifier",
												"src": "5421:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "5366:96:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5393:5:21",
									"nodeType": "YulTypedName",
									"src": "5393:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "5403:7:21",
									"nodeType": "YulTypedName",
									"src": "5403:7:21",
									"type": ""
								}
							],
							"src": "5366:96:21"
						},
						{
							"body": {
								"nativeSrc": "5533:53:21",
								"nodeType": "YulBlock",
								"src": "5533:53:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "5550:3:21",
													"nodeType": "YulIdentifier",
													"src": "5550:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "5573:5:21",
															"nodeType": "YulIdentifier",
															"src": "5573:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nativeSrc": "5555:17:21",
														"nodeType": "YulIdentifier",
														"src": "5555:17:21"
													},
													"nativeSrc": "5555:24:21",
													"nodeType": "YulFunctionCall",
													"src": "5555:24:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5543:6:21",
												"nodeType": "YulIdentifier",
												"src": "5543:6:21"
											},
											"nativeSrc": "5543:37:21",
											"nodeType": "YulFunctionCall",
											"src": "5543:37:21"
										},
										"nativeSrc": "5543:37:21",
										"nodeType": "YulExpressionStatement",
										"src": "5543:37:21"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nativeSrc": "5468:118:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5521:5:21",
									"nodeType": "YulTypedName",
									"src": "5521:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "5528:3:21",
									"nodeType": "YulTypedName",
									"src": "5528:3:21",
									"type": ""
								}
							],
							"src": "5468:118:21"
						},
						{
							"body": {
								"nativeSrc": "5690:124:21",
								"nodeType": "YulBlock",
								"src": "5690:124:21",
								"statements": [
									{
										"nativeSrc": "5700:26:21",
										"nodeType": "YulAssignment",
										"src": "5700:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5712:9:21",
													"nodeType": "YulIdentifier",
													"src": "5712:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "5723:2:21",
													"nodeType": "YulLiteral",
													"src": "5723:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5708:3:21",
												"nodeType": "YulIdentifier",
												"src": "5708:3:21"
											},
											"nativeSrc": "5708:18:21",
											"nodeType": "YulFunctionCall",
											"src": "5708:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5700:4:21",
												"nodeType": "YulIdentifier",
												"src": "5700:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "5780:6:21",
													"nodeType": "YulIdentifier",
													"src": "5780:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5793:9:21",
															"nodeType": "YulIdentifier",
															"src": "5793:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "5804:1:21",
															"nodeType": "YulLiteral",
															"src": "5804:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5789:3:21",
														"nodeType": "YulIdentifier",
														"src": "5789:3:21"
													},
													"nativeSrc": "5789:17:21",
													"nodeType": "YulFunctionCall",
													"src": "5789:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5736:43:21",
												"nodeType": "YulIdentifier",
												"src": "5736:43:21"
											},
											"nativeSrc": "5736:71:21",
											"nodeType": "YulFunctionCall",
											"src": "5736:71:21"
										},
										"nativeSrc": "5736:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "5736:71:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "5592:222:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5662:9:21",
									"nodeType": "YulTypedName",
									"src": "5662:9:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5674:6:21",
									"nodeType": "YulTypedName",
									"src": "5674:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5685:4:21",
									"nodeType": "YulTypedName",
									"src": "5685:4:21",
									"type": ""
								}
							],
							"src": "5592:222:21"
						},
						{
							"body": {
								"nativeSrc": "5865:32:21",
								"nodeType": "YulBlock",
								"src": "5865:32:21",
								"statements": [
									{
										"nativeSrc": "5875:16:21",
										"nodeType": "YulAssignment",
										"src": "5875:16:21",
										"value": {
											"name": "value",
											"nativeSrc": "5886:5:21",
											"nodeType": "YulIdentifier",
											"src": "5886:5:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "5875:7:21",
												"nodeType": "YulIdentifier",
												"src": "5875:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bytes32",
							"nativeSrc": "5820:77:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5847:5:21",
									"nodeType": "YulTypedName",
									"src": "5847:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "5857:7:21",
									"nodeType": "YulTypedName",
									"src": "5857:7:21",
									"type": ""
								}
							],
							"src": "5820:77:21"
						},
						{
							"body": {
								"nativeSrc": "5968:53:21",
								"nodeType": "YulBlock",
								"src": "5968:53:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "5985:3:21",
													"nodeType": "YulIdentifier",
													"src": "5985:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "6008:5:21",
															"nodeType": "YulIdentifier",
															"src": "6008:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_bytes32",
														"nativeSrc": "5990:17:21",
														"nodeType": "YulIdentifier",
														"src": "5990:17:21"
													},
													"nativeSrc": "5990:24:21",
													"nodeType": "YulFunctionCall",
													"src": "5990:24:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5978:6:21",
												"nodeType": "YulIdentifier",
												"src": "5978:6:21"
											},
											"nativeSrc": "5978:37:21",
											"nodeType": "YulFunctionCall",
											"src": "5978:37:21"
										},
										"nativeSrc": "5978:37:21",
										"nodeType": "YulExpressionStatement",
										"src": "5978:37:21"
									}
								]
							},
							"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
							"nativeSrc": "5903:118:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5956:5:21",
									"nodeType": "YulTypedName",
									"src": "5956:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "5963:3:21",
									"nodeType": "YulTypedName",
									"src": "5963:3:21",
									"type": ""
								}
							],
							"src": "5903:118:21"
						},
						{
							"body": {
								"nativeSrc": "6092:53:21",
								"nodeType": "YulBlock",
								"src": "6092:53:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6109:3:21",
													"nodeType": "YulIdentifier",
													"src": "6109:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "6132:5:21",
															"nodeType": "YulIdentifier",
															"src": "6132:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nativeSrc": "6114:17:21",
														"nodeType": "YulIdentifier",
														"src": "6114:17:21"
													},
													"nativeSrc": "6114:24:21",
													"nodeType": "YulFunctionCall",
													"src": "6114:24:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6102:6:21",
												"nodeType": "YulIdentifier",
												"src": "6102:6:21"
											},
											"nativeSrc": "6102:37:21",
											"nodeType": "YulFunctionCall",
											"src": "6102:37:21"
										},
										"nativeSrc": "6102:37:21",
										"nodeType": "YulExpressionStatement",
										"src": "6102:37:21"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nativeSrc": "6027:118:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "6080:5:21",
									"nodeType": "YulTypedName",
									"src": "6080:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "6087:3:21",
									"nodeType": "YulTypedName",
									"src": "6087:3:21",
									"type": ""
								}
							],
							"src": "6027:118:21"
						},
						{
							"body": {
								"nativeSrc": "6361:454:21",
								"nodeType": "YulBlock",
								"src": "6361:454:21",
								"statements": [
									{
										"nativeSrc": "6371:27:21",
										"nodeType": "YulAssignment",
										"src": "6371:27:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6383:9:21",
													"nodeType": "YulIdentifier",
													"src": "6383:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "6394:3:21",
													"nodeType": "YulLiteral",
													"src": "6394:3:21",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6379:3:21",
												"nodeType": "YulIdentifier",
												"src": "6379:3:21"
											},
											"nativeSrc": "6379:19:21",
											"nodeType": "YulFunctionCall",
											"src": "6379:19:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6371:4:21",
												"nodeType": "YulIdentifier",
												"src": "6371:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "6452:6:21",
													"nodeType": "YulIdentifier",
													"src": "6452:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6465:9:21",
															"nodeType": "YulIdentifier",
															"src": "6465:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "6476:1:21",
															"nodeType": "YulLiteral",
															"src": "6476:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6461:3:21",
														"nodeType": "YulIdentifier",
														"src": "6461:3:21"
													},
													"nativeSrc": "6461:17:21",
													"nodeType": "YulFunctionCall",
													"src": "6461:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "6408:43:21",
												"nodeType": "YulIdentifier",
												"src": "6408:43:21"
											},
											"nativeSrc": "6408:71:21",
											"nodeType": "YulFunctionCall",
											"src": "6408:71:21"
										},
										"nativeSrc": "6408:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "6408:71:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "6533:6:21",
													"nodeType": "YulIdentifier",
													"src": "6533:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6546:9:21",
															"nodeType": "YulIdentifier",
															"src": "6546:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "6557:2:21",
															"nodeType": "YulLiteral",
															"src": "6557:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6542:3:21",
														"nodeType": "YulIdentifier",
														"src": "6542:3:21"
													},
													"nativeSrc": "6542:18:21",
													"nodeType": "YulFunctionCall",
													"src": "6542:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "6489:43:21",
												"nodeType": "YulIdentifier",
												"src": "6489:43:21"
											},
											"nativeSrc": "6489:72:21",
											"nodeType": "YulFunctionCall",
											"src": "6489:72:21"
										},
										"nativeSrc": "6489:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "6489:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "6615:6:21",
													"nodeType": "YulIdentifier",
													"src": "6615:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6628:9:21",
															"nodeType": "YulIdentifier",
															"src": "6628:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "6639:2:21",
															"nodeType": "YulLiteral",
															"src": "6639:2:21",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6624:3:21",
														"nodeType": "YulIdentifier",
														"src": "6624:3:21"
													},
													"nativeSrc": "6624:18:21",
													"nodeType": "YulFunctionCall",
													"src": "6624:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "6571:43:21",
												"nodeType": "YulIdentifier",
												"src": "6571:43:21"
											},
											"nativeSrc": "6571:72:21",
											"nodeType": "YulFunctionCall",
											"src": "6571:72:21"
										},
										"nativeSrc": "6571:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "6571:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value3",
													"nativeSrc": "6697:6:21",
													"nodeType": "YulIdentifier",
													"src": "6697:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6710:9:21",
															"nodeType": "YulIdentifier",
															"src": "6710:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "6721:2:21",
															"nodeType": "YulLiteral",
															"src": "6721:2:21",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6706:3:21",
														"nodeType": "YulIdentifier",
														"src": "6706:3:21"
													},
													"nativeSrc": "6706:18:21",
													"nodeType": "YulFunctionCall",
													"src": "6706:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "6653:43:21",
												"nodeType": "YulIdentifier",
												"src": "6653:43:21"
											},
											"nativeSrc": "6653:72:21",
											"nodeType": "YulFunctionCall",
											"src": "6653:72:21"
										},
										"nativeSrc": "6653:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "6653:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value4",
													"nativeSrc": "6779:6:21",
													"nodeType": "YulIdentifier",
													"src": "6779:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6792:9:21",
															"nodeType": "YulIdentifier",
															"src": "6792:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "6803:3:21",
															"nodeType": "YulLiteral",
															"src": "6803:3:21",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6788:3:21",
														"nodeType": "YulIdentifier",
														"src": "6788:3:21"
													},
													"nativeSrc": "6788:19:21",
													"nodeType": "YulFunctionCall",
													"src": "6788:19:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "6735:43:21",
												"nodeType": "YulIdentifier",
												"src": "6735:43:21"
											},
											"nativeSrc": "6735:73:21",
											"nodeType": "YulFunctionCall",
											"src": "6735:73:21"
										},
										"nativeSrc": "6735:73:21",
										"nodeType": "YulExpressionStatement",
										"src": "6735:73:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "6151:664:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6301:9:21",
									"nodeType": "YulTypedName",
									"src": "6301:9:21",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "6313:6:21",
									"nodeType": "YulTypedName",
									"src": "6313:6:21",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "6321:6:21",
									"nodeType": "YulTypedName",
									"src": "6321:6:21",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "6329:6:21",
									"nodeType": "YulTypedName",
									"src": "6329:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6337:6:21",
									"nodeType": "YulTypedName",
									"src": "6337:6:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6345:6:21",
									"nodeType": "YulTypedName",
									"src": "6345:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6356:4:21",
									"nodeType": "YulTypedName",
									"src": "6356:4:21",
									"type": ""
								}
							],
							"src": "6151:664:21"
						},
						{
							"body": {
								"nativeSrc": "6917:73:21",
								"nodeType": "YulBlock",
								"src": "6917:73:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6934:3:21",
													"nodeType": "YulIdentifier",
													"src": "6934:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "6939:6:21",
													"nodeType": "YulIdentifier",
													"src": "6939:6:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6927:6:21",
												"nodeType": "YulIdentifier",
												"src": "6927:6:21"
											},
											"nativeSrc": "6927:19:21",
											"nodeType": "YulFunctionCall",
											"src": "6927:19:21"
										},
										"nativeSrc": "6927:19:21",
										"nodeType": "YulExpressionStatement",
										"src": "6927:19:21"
									},
									{
										"nativeSrc": "6955:29:21",
										"nodeType": "YulAssignment",
										"src": "6955:29:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6974:3:21",
													"nodeType": "YulIdentifier",
													"src": "6974:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "6979:4:21",
													"nodeType": "YulLiteral",
													"src": "6979:4:21",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6970:3:21",
												"nodeType": "YulIdentifier",
												"src": "6970:3:21"
											},
											"nativeSrc": "6970:14:21",
											"nodeType": "YulFunctionCall",
											"src": "6970:14:21"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "6955:11:21",
												"nodeType": "YulIdentifier",
												"src": "6955:11:21"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nativeSrc": "6821:169:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "6889:3:21",
									"nodeType": "YulTypedName",
									"src": "6889:3:21",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "6894:6:21",
									"nodeType": "YulTypedName",
									"src": "6894:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "6905:11:21",
									"nodeType": "YulTypedName",
									"src": "6905:11:21",
									"type": ""
								}
							],
							"src": "6821:169:21"
						},
						{
							"body": {
								"nativeSrc": "7058:77:21",
								"nodeType": "YulBlock",
								"src": "7058:77:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "dst",
													"nativeSrc": "7075:3:21",
													"nodeType": "YulIdentifier",
													"src": "7075:3:21"
												},
												{
													"name": "src",
													"nativeSrc": "7080:3:21",
													"nodeType": "YulIdentifier",
													"src": "7080:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "7085:6:21",
													"nodeType": "YulIdentifier",
													"src": "7085:6:21"
												}
											],
											"functionName": {
												"name": "mcopy",
												"nativeSrc": "7069:5:21",
												"nodeType": "YulIdentifier",
												"src": "7069:5:21"
											},
											"nativeSrc": "7069:23:21",
											"nodeType": "YulFunctionCall",
											"src": "7069:23:21"
										},
										"nativeSrc": "7069:23:21",
										"nodeType": "YulExpressionStatement",
										"src": "7069:23:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nativeSrc": "7112:3:21",
															"nodeType": "YulIdentifier",
															"src": "7112:3:21"
														},
														{
															"name": "length",
															"nativeSrc": "7117:6:21",
															"nodeType": "YulIdentifier",
															"src": "7117:6:21"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7108:3:21",
														"nodeType": "YulIdentifier",
														"src": "7108:3:21"
													},
													"nativeSrc": "7108:16:21",
													"nodeType": "YulFunctionCall",
													"src": "7108:16:21"
												},
												{
													"kind": "number",
													"nativeSrc": "7126:1:21",
													"nodeType": "YulLiteral",
													"src": "7126:1:21",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7101:6:21",
												"nodeType": "YulIdentifier",
												"src": "7101:6:21"
											},
											"nativeSrc": "7101:27:21",
											"nodeType": "YulFunctionCall",
											"src": "7101:27:21"
										},
										"nativeSrc": "7101:27:21",
										"nodeType": "YulExpressionStatement",
										"src": "7101:27:21"
									}
								]
							},
							"name": "copy_memory_to_memory_with_cleanup",
							"nativeSrc": "6996:139:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nativeSrc": "7040:3:21",
									"nodeType": "YulTypedName",
									"src": "7040:3:21",
									"type": ""
								},
								{
									"name": "dst",
									"nativeSrc": "7045:3:21",
									"nodeType": "YulTypedName",
									"src": "7045:3:21",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "7050:6:21",
									"nodeType": "YulTypedName",
									"src": "7050:6:21",
									"type": ""
								}
							],
							"src": "6996:139:21"
						},
						{
							"body": {
								"nativeSrc": "7189:54:21",
								"nodeType": "YulBlock",
								"src": "7189:54:21",
								"statements": [
									{
										"nativeSrc": "7199:38:21",
										"nodeType": "YulAssignment",
										"src": "7199:38:21",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "7217:5:21",
															"nodeType": "YulIdentifier",
															"src": "7217:5:21"
														},
														{
															"kind": "number",
															"nativeSrc": "7224:2:21",
															"nodeType": "YulLiteral",
															"src": "7224:2:21",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7213:3:21",
														"nodeType": "YulIdentifier",
														"src": "7213:3:21"
													},
													"nativeSrc": "7213:14:21",
													"nodeType": "YulFunctionCall",
													"src": "7213:14:21"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "7233:2:21",
															"nodeType": "YulLiteral",
															"src": "7233:2:21",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "not",
														"nativeSrc": "7229:3:21",
														"nodeType": "YulIdentifier",
														"src": "7229:3:21"
													},
													"nativeSrc": "7229:7:21",
													"nodeType": "YulFunctionCall",
													"src": "7229:7:21"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "7209:3:21",
												"nodeType": "YulIdentifier",
												"src": "7209:3:21"
											},
											"nativeSrc": "7209:28:21",
											"nodeType": "YulFunctionCall",
											"src": "7209:28:21"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "7199:6:21",
												"nodeType": "YulIdentifier",
												"src": "7199:6:21"
											}
										]
									}
								]
							},
							"name": "round_up_to_mul_of_32",
							"nativeSrc": "7141:102:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "7172:5:21",
									"nodeType": "YulTypedName",
									"src": "7172:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "7182:6:21",
									"nodeType": "YulTypedName",
									"src": "7182:6:21",
									"type": ""
								}
							],
							"src": "7141:102:21"
						},
						{
							"body": {
								"nativeSrc": "7341:285:21",
								"nodeType": "YulBlock",
								"src": "7341:285:21",
								"statements": [
									{
										"nativeSrc": "7351:53:21",
										"nodeType": "YulVariableDeclaration",
										"src": "7351:53:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "7398:5:21",
													"nodeType": "YulIdentifier",
													"src": "7398:5:21"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "7365:32:21",
												"nodeType": "YulIdentifier",
												"src": "7365:32:21"
											},
											"nativeSrc": "7365:39:21",
											"nodeType": "YulFunctionCall",
											"src": "7365:39:21"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "7355:6:21",
												"nodeType": "YulTypedName",
												"src": "7355:6:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "7413:78:21",
										"nodeType": "YulAssignment",
										"src": "7413:78:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "7479:3:21",
													"nodeType": "YulIdentifier",
													"src": "7479:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "7484:6:21",
													"nodeType": "YulIdentifier",
													"src": "7484:6:21"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "7420:58:21",
												"nodeType": "YulIdentifier",
												"src": "7420:58:21"
											},
											"nativeSrc": "7420:71:21",
											"nodeType": "YulFunctionCall",
											"src": "7420:71:21"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "7413:3:21",
												"nodeType": "YulIdentifier",
												"src": "7413:3:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "7539:5:21",
															"nodeType": "YulIdentifier",
															"src": "7539:5:21"
														},
														{
															"kind": "number",
															"nativeSrc": "7546:4:21",
															"nodeType": "YulLiteral",
															"src": "7546:4:21",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7535:3:21",
														"nodeType": "YulIdentifier",
														"src": "7535:3:21"
													},
													"nativeSrc": "7535:16:21",
													"nodeType": "YulFunctionCall",
													"src": "7535:16:21"
												},
												{
													"name": "pos",
													"nativeSrc": "7553:3:21",
													"nodeType": "YulIdentifier",
													"src": "7553:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "7558:6:21",
													"nodeType": "YulIdentifier",
													"src": "7558:6:21"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "7500:34:21",
												"nodeType": "YulIdentifier",
												"src": "7500:34:21"
											},
											"nativeSrc": "7500:65:21",
											"nodeType": "YulFunctionCall",
											"src": "7500:65:21"
										},
										"nativeSrc": "7500:65:21",
										"nodeType": "YulExpressionStatement",
										"src": "7500:65:21"
									},
									{
										"nativeSrc": "7574:46:21",
										"nodeType": "YulAssignment",
										"src": "7574:46:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "7585:3:21",
													"nodeType": "YulIdentifier",
													"src": "7585:3:21"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "7612:6:21",
															"nodeType": "YulIdentifier",
															"src": "7612:6:21"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nativeSrc": "7590:21:21",
														"nodeType": "YulIdentifier",
														"src": "7590:21:21"
													},
													"nativeSrc": "7590:29:21",
													"nodeType": "YulFunctionCall",
													"src": "7590:29:21"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7581:3:21",
												"nodeType": "YulIdentifier",
												"src": "7581:3:21"
											},
											"nativeSrc": "7581:39:21",
											"nodeType": "YulFunctionCall",
											"src": "7581:39:21"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "7574:3:21",
												"nodeType": "YulIdentifier",
												"src": "7574:3:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "7249:377:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "7322:5:21",
									"nodeType": "YulTypedName",
									"src": "7322:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "7329:3:21",
									"nodeType": "YulTypedName",
									"src": "7329:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "7337:3:21",
									"nodeType": "YulTypedName",
									"src": "7337:3:21",
									"type": ""
								}
							],
							"src": "7249:377:21"
						},
						{
							"body": {
								"nativeSrc": "7750:195:21",
								"nodeType": "YulBlock",
								"src": "7750:195:21",
								"statements": [
									{
										"nativeSrc": "7760:26:21",
										"nodeType": "YulAssignment",
										"src": "7760:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7772:9:21",
													"nodeType": "YulIdentifier",
													"src": "7772:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "7783:2:21",
													"nodeType": "YulLiteral",
													"src": "7783:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7768:3:21",
												"nodeType": "YulIdentifier",
												"src": "7768:3:21"
											},
											"nativeSrc": "7768:18:21",
											"nodeType": "YulFunctionCall",
											"src": "7768:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7760:4:21",
												"nodeType": "YulIdentifier",
												"src": "7760:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7807:9:21",
															"nodeType": "YulIdentifier",
															"src": "7807:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "7818:1:21",
															"nodeType": "YulLiteral",
															"src": "7818:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7803:3:21",
														"nodeType": "YulIdentifier",
														"src": "7803:3:21"
													},
													"nativeSrc": "7803:17:21",
													"nodeType": "YulFunctionCall",
													"src": "7803:17:21"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "7826:4:21",
															"nodeType": "YulIdentifier",
															"src": "7826:4:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "7832:9:21",
															"nodeType": "YulIdentifier",
															"src": "7832:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "7822:3:21",
														"nodeType": "YulIdentifier",
														"src": "7822:3:21"
													},
													"nativeSrc": "7822:20:21",
													"nodeType": "YulFunctionCall",
													"src": "7822:20:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7796:6:21",
												"nodeType": "YulIdentifier",
												"src": "7796:6:21"
											},
											"nativeSrc": "7796:47:21",
											"nodeType": "YulFunctionCall",
											"src": "7796:47:21"
										},
										"nativeSrc": "7796:47:21",
										"nodeType": "YulExpressionStatement",
										"src": "7796:47:21"
									},
									{
										"nativeSrc": "7852:86:21",
										"nodeType": "YulAssignment",
										"src": "7852:86:21",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "7924:6:21",
													"nodeType": "YulIdentifier",
													"src": "7924:6:21"
												},
												{
													"name": "tail",
													"nativeSrc": "7933:4:21",
													"nodeType": "YulIdentifier",
													"src": "7933:4:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "7860:63:21",
												"nodeType": "YulIdentifier",
												"src": "7860:63:21"
											},
											"nativeSrc": "7860:78:21",
											"nodeType": "YulFunctionCall",
											"src": "7860:78:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7852:4:21",
												"nodeType": "YulIdentifier",
												"src": "7852:4:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "7632:313:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7722:9:21",
									"nodeType": "YulTypedName",
									"src": "7722:9:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "7734:6:21",
									"nodeType": "YulTypedName",
									"src": "7734:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "7745:4:21",
									"nodeType": "YulTypedName",
									"src": "7745:4:21",
									"type": ""
								}
							],
							"src": "7632:313:21"
						},
						{
							"body": {
								"nativeSrc": "8009:40:21",
								"nodeType": "YulBlock",
								"src": "8009:40:21",
								"statements": [
									{
										"nativeSrc": "8020:22:21",
										"nodeType": "YulAssignment",
										"src": "8020:22:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "8036:5:21",
													"nodeType": "YulIdentifier",
													"src": "8036:5:21"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "8030:5:21",
												"nodeType": "YulIdentifier",
												"src": "8030:5:21"
											},
											"nativeSrc": "8030:12:21",
											"nodeType": "YulFunctionCall",
											"src": "8030:12:21"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "8020:6:21",
												"nodeType": "YulIdentifier",
												"src": "8020:6:21"
											}
										]
									}
								]
							},
							"name": "array_length_t_bytes_memory_ptr",
							"nativeSrc": "7951:98:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "7992:5:21",
									"nodeType": "YulTypedName",
									"src": "7992:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "8002:6:21",
									"nodeType": "YulTypedName",
									"src": "8002:6:21",
									"type": ""
								}
							],
							"src": "7951:98:21"
						},
						{
							"body": {
								"nativeSrc": "8111:60:21",
								"nodeType": "YulBlock",
								"src": "8111:60:21",
								"statements": [
									{
										"nativeSrc": "8121:11:21",
										"nodeType": "YulAssignment",
										"src": "8121:11:21",
										"value": {
											"name": "ptr",
											"nativeSrc": "8129:3:21",
											"nodeType": "YulIdentifier",
											"src": "8129:3:21"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "8121:4:21",
												"nodeType": "YulIdentifier",
												"src": "8121:4:21"
											}
										]
									},
									{
										"nativeSrc": "8142:22:21",
										"nodeType": "YulAssignment",
										"src": "8142:22:21",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nativeSrc": "8154:3:21",
													"nodeType": "YulIdentifier",
													"src": "8154:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "8159:4:21",
													"nodeType": "YulLiteral",
													"src": "8159:4:21",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8150:3:21",
												"nodeType": "YulIdentifier",
												"src": "8150:3:21"
											},
											"nativeSrc": "8150:14:21",
											"nodeType": "YulFunctionCall",
											"src": "8150:14:21"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "8142:4:21",
												"nodeType": "YulIdentifier",
												"src": "8142:4:21"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_bytes_memory_ptr",
							"nativeSrc": "8055:116:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "8098:3:21",
									"nodeType": "YulTypedName",
									"src": "8098:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "8106:4:21",
									"nodeType": "YulTypedName",
									"src": "8106:4:21",
									"type": ""
								}
							],
							"src": "8055:116:21"
						},
						{
							"body": {
								"nativeSrc": "8232:99:21",
								"nodeType": "YulBlock",
								"src": "8232:99:21",
								"statements": [
									{
										"nativeSrc": "8243:42:21",
										"nodeType": "YulVariableDeclaration",
										"src": "8243:42:21",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "ptr",
															"nativeSrc": "8280:3:21",
															"nodeType": "YulIdentifier",
															"src": "8280:3:21"
														}
													],
													"functionName": {
														"name": "mload",
														"nativeSrc": "8274:5:21",
														"nodeType": "YulIdentifier",
														"src": "8274:5:21"
													},
													"nativeSrc": "8274:10:21",
													"nodeType": "YulFunctionCall",
													"src": "8274:10:21"
												}
											],
											"functionName": {
												"name": "cleanup_t_bytes32",
												"nativeSrc": "8256:17:21",
												"nodeType": "YulIdentifier",
												"src": "8256:17:21"
											},
											"nativeSrc": "8256:29:21",
											"nodeType": "YulFunctionCall",
											"src": "8256:29:21"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "8247:5:21",
												"nodeType": "YulTypedName",
												"src": "8247:5:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "8295:29:21",
										"nodeType": "YulAssignment",
										"src": "8295:29:21",
										"value": {
											"name": "value",
											"nativeSrc": "8319:5:21",
											"nodeType": "YulIdentifier",
											"src": "8319:5:21"
										},
										"variableNames": [
											{
												"name": "returnValue",
												"nativeSrc": "8295:11:21",
												"nodeType": "YulIdentifier",
												"src": "8295:11:21"
											}
										]
									}
								]
							},
							"name": "read_from_memoryt_bytes32",
							"nativeSrc": "8177:154:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "8212:3:21",
									"nodeType": "YulTypedName",
									"src": "8212:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "returnValue",
									"nativeSrc": "8220:11:21",
									"nodeType": "YulTypedName",
									"src": "8220:11:21",
									"type": ""
								}
							],
							"src": "8177:154:21"
						},
						{
							"body": {
								"nativeSrc": "8427:504:21",
								"nodeType": "YulBlock",
								"src": "8427:504:21",
								"statements": [
									{
										"nativeSrc": "8438:52:21",
										"nodeType": "YulVariableDeclaration",
										"src": "8438:52:21",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nativeSrc": "8484:5:21",
													"nodeType": "YulIdentifier",
													"src": "8484:5:21"
												}
											],
											"functionName": {
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "8452:31:21",
												"nodeType": "YulIdentifier",
												"src": "8452:31:21"
											},
											"nativeSrc": "8452:38:21",
											"nodeType": "YulFunctionCall",
											"src": "8452:38:21"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "8442:6:21",
												"nodeType": "YulTypedName",
												"src": "8442:6:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "8499:21:21",
										"nodeType": "YulVariableDeclaration",
										"src": "8499:21:21",
										"value": {
											"name": "array",
											"nativeSrc": "8515:5:21",
											"nodeType": "YulIdentifier",
											"src": "8515:5:21"
										},
										"variables": [
											{
												"name": "dataArea",
												"nativeSrc": "8503:8:21",
												"nodeType": "YulTypedName",
												"src": "8503:8:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "8530:52:21",
										"nodeType": "YulAssignment",
										"src": "8530:52:21",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nativeSrc": "8576:5:21",
													"nodeType": "YulIdentifier",
													"src": "8576:5:21"
												}
											],
											"functionName": {
												"name": "array_dataslot_t_bytes_memory_ptr",
												"nativeSrc": "8542:33:21",
												"nodeType": "YulIdentifier",
												"src": "8542:33:21"
											},
											"nativeSrc": "8542:40:21",
											"nodeType": "YulFunctionCall",
											"src": "8542:40:21"
										},
										"variableNames": [
											{
												"name": "dataArea",
												"nativeSrc": "8530:8:21",
												"nodeType": "YulIdentifier",
												"src": "8530:8:21"
											}
										]
									},
									{
										"nativeSrc": "8592:44:21",
										"nodeType": "YulAssignment",
										"src": "8592:44:21",
										"value": {
											"arguments": [
												{
													"name": "dataArea",
													"nativeSrc": "8627:8:21",
													"nodeType": "YulIdentifier",
													"src": "8627:8:21"
												}
											],
											"functionName": {
												"name": "read_from_memoryt_bytes32",
												"nativeSrc": "8601:25:21",
												"nodeType": "YulIdentifier",
												"src": "8601:25:21"
											},
											"nativeSrc": "8601:35:21",
											"nodeType": "YulFunctionCall",
											"src": "8601:35:21"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "8592:5:21",
												"nodeType": "YulIdentifier",
												"src": "8592:5:21"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "8664:260:21",
											"nodeType": "YulBlock",
											"src": "8664:260:21",
											"statements": [
												{
													"nativeSrc": "8678:236:21",
													"nodeType": "YulAssignment",
													"src": "8678:236:21",
													"value": {
														"arguments": [
															{
																"name": "value",
																"nativeSrc": "8708:5:21",
																"nodeType": "YulIdentifier",
																"src": "8708:5:21"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "8775:1:21",
																				"nodeType": "YulLiteral",
																				"src": "8775:1:21",
																				"type": "",
																				"value": "8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "8782:2:21",
																						"nodeType": "YulLiteral",
																						"src": "8782:2:21",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "8786:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "8786:6:21"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "8778:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "8778:3:21"
																				},
																				"nativeSrc": "8778:15:21",
																				"nodeType": "YulFunctionCall",
																				"src": "8778:15:21"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "8771:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8771:3:21"
																		},
																		"nativeSrc": "8771:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8771:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8816:66:21",
																		"nodeType": "YulLiteral",
																		"src": "8816:66:21",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "8731:18:21",
																	"nodeType": "YulIdentifier",
																	"src": "8731:18:21"
																},
																"nativeSrc": "8731:169:21",
																"nodeType": "YulFunctionCall",
																"src": "8731:169:21"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "8687:3:21",
															"nodeType": "YulIdentifier",
															"src": "8687:3:21"
														},
														"nativeSrc": "8687:227:21",
														"nodeType": "YulFunctionCall",
														"src": "8687:227:21"
													},
													"variableNames": [
														{
															"name": "value",
															"nativeSrc": "8678:5:21",
															"nodeType": "YulIdentifier",
															"src": "8678:5:21"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nativeSrc": "8652:6:21",
													"nodeType": "YulIdentifier",
													"src": "8652:6:21"
												},
												{
													"kind": "number",
													"nativeSrc": "8660:2:21",
													"nodeType": "YulLiteral",
													"src": "8660:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "8649:2:21",
												"nodeType": "YulIdentifier",
												"src": "8649:2:21"
											},
											"nativeSrc": "8649:14:21",
											"nodeType": "YulFunctionCall",
											"src": "8649:14:21"
										},
										"nativeSrc": "8646:278:21",
										"nodeType": "YulIf",
										"src": "8646:278:21"
									}
								]
							},
							"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
							"nativeSrc": "8337:594:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "8411:5:21",
									"nodeType": "YulTypedName",
									"src": "8411:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "8421:5:21",
									"nodeType": "YulTypedName",
									"src": "8421:5:21",
									"type": ""
								}
							],
							"src": "8337:594:21"
						}
					]
				},
				"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_dataslot_t_bytes_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function read_from_memoryt_bytes32(ptr) -> returnValue {\n\n        let value := cleanup_t_bytes32(mload(ptr))\n\n        returnValue :=\n\n        value\n\n    }\n\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value {\n\n        let length := array_length_t_bytes_memory_ptr(array)\n        let dataArea := array\n\n        dataArea := array_dataslot_t_bytes_memory_ptr(array)\n\n        value := read_from_memoryt_bytes32(dataArea)\n\n        if lt(length, 32) {\n            value := and(\n                value,\n                shift_left_dynamic(\n                    mul(8, sub(32, length)),\n                    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                )\n            )\n        }\n\n    }\n\n}\n",
				"id": 21,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "610160604052348015610010575f80fd5b50336040518060400160405280600a81526020017f5772617070656420523500000000000000000000000000000000000000000000815250806040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600a81526020017f57726170706564205235000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f575235000000000000000000000000000000000000000000000000000000000081525081600390816100fa9190610657565b50806004908161010a9190610657565b50505061012160058361024560201b90919060201c565b610120818152505061013d60068261024560201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a0818152505061017a61029260201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250505050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610228575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161021f9190610765565b60405180910390fd5b610237816102ec60201b60201c565b50600160098190555061090f565b5f6020835110156102665761025f836103af60201b60201c565b905061028c565b826102768361041460201b60201c565b5f0190816102849190610657565b5060ff5f1b90505b92915050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e0516101005146306040516020016102d19594939291906107a5565b60405160208183030381529060405280519060200120905090565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f80829050601f815111156103fb57826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016103f2919061085c565b60405180910390fd5b805181610407906108a9565b5f1c175f1b915050919050565b5f819050919050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061049857607f821691505b6020821081036104ab576104aa610454565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261050d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826104d2565b61051786836104d2565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61055b6105566105518461052f565b610538565b61052f565b9050919050565b5f819050919050565b61057483610541565b61058861058082610562565b8484546104de565b825550505050565b5f90565b61059c610590565b6105a781848461056b565b505050565b5b818110156105ca576105bf5f82610594565b6001810190506105ad565b5050565b601f82111561060f576105e0816104b1565b6105e9846104c3565b810160208510156105f8578190505b61060c610604856104c3565b8301826105ac565b50505b505050565b5f82821c905092915050565b5f61062f5f1984600802610614565b1980831691505092915050565b5f6106478383610620565b9150826002028217905092915050565b6106608261041d565b67ffffffffffffffff81111561067957610678610427565b5b6106838254610481565b61068e8282856105ce565b5f60209050601f8311600181146106bf575f84156106ad578287015190505b6106b7858261063c565b86555061071e565b601f1984166106cd866104b1565b5f5b828110156106f4578489015182556001820191506020850194506020810190506106cf565b86831015610711578489015161070d601f891682610620565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61074f82610726565b9050919050565b61075f81610745565b82525050565b5f6020820190506107785f830184610756565b92915050565b5f819050919050565b6107908161077e565b82525050565b61079f8161052f565b82525050565b5f60a0820190506107b85f830188610787565b6107c56020830187610787565b6107d26040830186610787565b6107df6060830185610796565b6107ec6080830184610756565b9695505050505050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61082e8261041d565b61083881856107f6565b9350610848818560208601610806565b61085181610814565b840191505092915050565b5f6020820190508181035f8301526108748184610824565b905092915050565b5f81519050919050565b5f819050602082019050919050565b5f6108a0825161077e565b80915050919050565b5f6108b38261087c565b826108bd84610886565b90506108c881610895565b92506020821015610908576109037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026104d2565b831692505b5050919050565b60805160a05160c05160e05161010051610120516101405161285c6109605f395f61138001525f61134501525f61187901525f61185801525f610fed01525f61104301525f61106c015261285c5ff3fe608060405234801561000f575f80fd5b5060043610610156575f3560e01c80637ecebe00116100c1578063d505accf1161007a578063d505accf146103a6578063dd62ed3e146103c2578063e30c3978146103f2578063eb8f4c4a14610410578063ec81b4831461042c578063f2fde38b1461044a57610156565b80637ecebe00146102ca57806384b0196e146102fa5780638da5cb5b1461031e57806395d89b411461033c578063a9059cbb1461035a578063c0b6f5611461038a57610156565b806340c10f191161011357806340c10f191461023257806342966c681461024e57806370a082311461026a578063715018a61461029a57806379ba5097146102a457806379cc6790146102ae57610156565b806306fdde031461015a578063095ea7b31461017857806318160ddd146101a857806323b872dd146101c6578063313ce567146101f65780633644e51514610214575b5f80fd5b610162610466565b60405161016f9190611dae565b60405180910390f35b610192600480360381019061018d9190611e5f565b6104f6565b60405161019f9190611eb7565b60405180910390f35b6101b0610518565b6040516101bd9190611edf565b60405180910390f35b6101e060048036038101906101db9190611ef8565b610521565b6040516101ed9190611eb7565b60405180910390f35b6101fe61054f565b60405161020b9190611f63565b60405180910390f35b61021c610557565b6040516102299190611f94565b60405180910390f35b61024c60048036038101906102479190611e5f565b610565565b005b61026860048036038101906102639190611fad565b610639565b005b610284600480360381019061027f9190611fd8565b61069a565b6040516102919190611edf565b60405180910390f35b6102a26106df565b005b6102ac6106f2565b005b6102c860048036038101906102c39190611e5f565b6107d8565b005b6102e460048036038101906102df9190611fd8565b610834565b6040516102f19190611edf565b60405180910390f35b610302610845565b6040516103159796959493929190612103565b60405180910390f35b6103266108ea565b6040516103339190612185565b60405180910390f35b610344610912565b6040516103519190611dae565b60405180910390f35b610374600480360381019061036f9190611e5f565b6109a2565b6040516103819190611eb7565b60405180910390f35b6103a4600480360381019061039f9190611fd8565b6109c4565b005b6103c060048036038101906103bb91906121f2565b610ade565b005b6103dc60048036038101906103d7919061228f565b610c23565b6040516103e99190611edf565b60405180910390f35b6103fa610ca5565b6040516104079190612185565b60405180910390f35b61042a60048036038101906104259190612308565b610ccd565b005b610434610dbb565b6040516104419190611edf565b60405180910390f35b610464600480360381019061045f9190611fd8565b610dca565b005b60606003805461047590612385565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190612385565b80156104ec5780601f106104c3576101008083540402835291602001916104ec565b820191905f5260205f20905b8154815290600101906020018083116104cf57829003601f168201915b5050505050905090565b5f80610500610e4e565b905061050d818585610e55565b600191505092915050565b5f600254905090565b5f8061052b610e4e565b9050610538858285610e67565b610543858585610efa565b60019150509392505050565b5f6012905090565b5f610560610fea565b905090565b61056d6110a0565b610575611127565b6a36df8dec4229fb481000008161058a610518565b61059491906123e2565b11156105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc9061245f565b60405180910390fd5b6105df8282611176565b8173ffffffffffffffffffffffffffffffffffffffff167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a4273826040516106259190611edf565b60405180910390a26106356111f5565b5050565b610642816111ff565b61064a610e4e565b73ffffffffffffffffffffffffffffffffffffffff167ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb68260405161068f9190611edf565b60405180910390a250565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6106e76110a0565b6106f05f611213565b565b5f6106fb610e4e565b9050600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610783906124ed565b60405180910390fd5b5f600a5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107d581611213565b50565b6107e282826112d6565b8173ffffffffffffffffffffffffffffffffffffffff167ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb6826040516108289190611edf565b60405180910390a25050565b5f61083e826112f6565b9050919050565b5f6060805f805f606061085661133c565b61085e611377565b46305f801b5f67ffffffffffffffff81111561087d5761087c61250b565b5b6040519080825280602002602001820160405280156108ab5781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461092190612385565b80601f016020809104026020016040519081016040528092919081815260200182805461094d90612385565b80156109985780601f1061096f57610100808354040283529160200191610998565b820191905f5260205f20905b81548152906001019060200180831161097b57829003601f168201915b5050505050905090565b5f806109ac610e4e565b90506109b9818585610efa565b600191505092915050565b6109cc6110a0565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a31906125a8565b60405180910390fd5b80600a5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16610a996108ea565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b83421115610b2357836040517f62791302000000000000000000000000000000000000000000000000000000008152600401610b1a9190611edf565b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b518c6113b2565b89604051602001610b67969594939291906125c6565b6040516020818303038152906040528051906020012090505f610b8982611405565b90505f610b988287878761141e565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c0c57808a6040517f4b800e46000000000000000000000000000000000000000000000000000000008152600401610c03929190612625565b60405180910390fd5b610c178a8a8a610e55565b50505050505050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cd56110a0565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610d1092919061264c565b6020604051808303815f875af1158015610d2c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d50919061269d565b508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f401f439d865a766757ec78675925bd67198d5e78805aa41691b34b5d6a6cbbe683604051610dae9190611edf565b60405180910390a3505050565b6a36df8dec4229fb4810000081565b610dd26110a0565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e42575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610e399190612185565b60405180910390fd5b610e4b81611213565b50565b5f33905090565b610e62838383600161144c565b505050565b5f610e728484610c23565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610ef45781811015610ee5578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610edc939291906126c8565b60405180910390fd5b610ef384848484035f61144c565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f6a575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610f619190612185565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fda575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610fd19190612185565b60405180910390fd5b610fe583838361161b565b505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561106557507f000000000000000000000000000000000000000000000000000000000000000046145b15611092577f0000000000000000000000000000000000000000000000000000000000000000905061109d565b61109a611834565b90505b90565b6110a8610e4e565b73ffffffffffffffffffffffffffffffffffffffff166110c66108ea565b73ffffffffffffffffffffffffffffffffffffffff1614611125576110e9610e4e565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161111c9190612185565b60405180910390fd5b565b60026009540361116c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116390612747565b60405180910390fd5b6002600981905550565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111e6575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016111dd9190612185565b60405180910390fd5b6111f15f838361161b565b5050565b6001600981905550565b61121061120a610e4e565b826118c9565b50565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112e8826112e2610e4e565b83610e67565b6112f282826118c9565b5050565b5f60075f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b606061137260057f000000000000000000000000000000000000000000000000000000000000000061194890919063ffffffff16565b905090565b60606113ad60067f000000000000000000000000000000000000000000000000000000000000000061194890919063ffffffff16565b905090565b5f60075f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190600101919050559050919050565b5f611417611411610fea565b836119f5565b9050919050565b5f805f8061142e88888888611a35565b92509250925061143e8282611b1c565b829350505050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114bc575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016114b39190612185565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361152c575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016115239190612185565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611615578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161160c9190611edf565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361166b578060025f82825461165f91906123e2565b92505081905550611739565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156116f4578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016116eb939291906126c8565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611780578060025f82825403925050819055506117ca565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516118279190611edf565b60405180910390a3505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016118ae959493929190612765565b60405160208183030381529060405280519060200120905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611939575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016119309190612185565b60405180910390fd5b611944825f8361161b565b5050565b606060ff5f1b83146119645761195d83611c7e565b90506119ef565b81805461197090612385565b80601f016020809104026020016040519081016040528092919081815260200182805461199c90612385565b80156119e75780601f106119be576101008083540402835291602001916119e7565b820191905f5260205f20905b8154815290600101906020018083116119ca57829003601f168201915b505050505090505b92915050565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f805f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c1115611a71575f600385925092509250611b12565b5f6001888888886040515f8152602001604052604051611a9494939291906127b6565b6020604051602081039080840390855afa158015611ab4573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b05575f60015f801b93509350935050611b12565b805f805f1b935093509350505b9450945094915050565b5f6003811115611b2f57611b2e6127f9565b5b826003811115611b4257611b416127f9565b5b0315611c7a5760016003811115611b5c57611b5b6127f9565b5b826003811115611b6f57611b6e6127f9565b5b03611ba6576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115611bba57611bb96127f9565b5b826003811115611bcd57611bcc6127f9565b5b03611c1157805f1c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401611c089190611edf565b60405180910390fd5b600380811115611c2457611c236127f9565b5b826003811115611c3757611c366127f9565b5b03611c7957806040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600401611c709190611f94565b60405180910390fd5b5b5050565b60605f611c8a83611cf0565b90505f602067ffffffffffffffff811115611ca857611ca761250b565b5b6040519080825280601f01601f191660200182016040528015611cda5781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f8060ff835f1c169050601f811115611d35576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611d8082611d3e565b611d8a8185611d48565b9350611d9a818560208601611d58565b611da381611d66565b840191505092915050565b5f6020820190508181035f830152611dc68184611d76565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611dfb82611dd2565b9050919050565b611e0b81611df1565b8114611e15575f80fd5b50565b5f81359050611e2681611e02565b92915050565b5f819050919050565b611e3e81611e2c565b8114611e48575f80fd5b50565b5f81359050611e5981611e35565b92915050565b5f8060408385031215611e7557611e74611dce565b5b5f611e8285828601611e18565b9250506020611e9385828601611e4b565b9150509250929050565b5f8115159050919050565b611eb181611e9d565b82525050565b5f602082019050611eca5f830184611ea8565b92915050565b611ed981611e2c565b82525050565b5f602082019050611ef25f830184611ed0565b92915050565b5f805f60608486031215611f0f57611f0e611dce565b5b5f611f1c86828701611e18565b9350506020611f2d86828701611e18565b9250506040611f3e86828701611e4b565b9150509250925092565b5f60ff82169050919050565b611f5d81611f48565b82525050565b5f602082019050611f765f830184611f54565b92915050565b5f819050919050565b611f8e81611f7c565b82525050565b5f602082019050611fa75f830184611f85565b92915050565b5f60208284031215611fc257611fc1611dce565b5b5f611fcf84828501611e4b565b91505092915050565b5f60208284031215611fed57611fec611dce565b5b5f611ffa84828501611e18565b91505092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61203781612003565b82525050565b61204681611df1565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61207e81611e2c565b82525050565b5f61208f8383612075565b60208301905092915050565b5f602082019050919050565b5f6120b18261204c565b6120bb8185612056565b93506120c683612066565b805f5b838110156120f65781516120dd8882612084565b97506120e88361209b565b9250506001810190506120c9565b5085935050505092915050565b5f60e0820190506121165f83018a61202e565b81810360208301526121288189611d76565b9050818103604083015261213c8188611d76565b905061214b6060830187611ed0565b612158608083018661203d565b61216560a0830185611f85565b81810360c083015261217781846120a7565b905098975050505050505050565b5f6020820190506121985f83018461203d565b92915050565b6121a781611f48565b81146121b1575f80fd5b50565b5f813590506121c28161219e565b92915050565b6121d181611f7c565b81146121db575f80fd5b50565b5f813590506121ec816121c8565b92915050565b5f805f805f805f60e0888a03121561220d5761220c611dce565b5b5f61221a8a828b01611e18565b975050602061222b8a828b01611e18565b965050604061223c8a828b01611e4b565b955050606061224d8a828b01611e4b565b945050608061225e8a828b016121b4565b93505060a061226f8a828b016121de565b92505060c06122808a828b016121de565b91505092959891949750929550565b5f80604083850312156122a5576122a4611dce565b5b5f6122b285828601611e18565b92505060206122c385828601611e18565b9150509250929050565b5f6122d782611df1565b9050919050565b6122e7816122cd565b81146122f1575f80fd5b50565b5f81359050612302816122de565b92915050565b5f805f6060848603121561231f5761231e611dce565b5b5f61232c868287016122f4565b935050602061233d86828701611e18565b925050604061234e86828701611e4b565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061239c57607f821691505b6020821081036123af576123ae612358565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6123ec82611e2c565b91506123f783611e2c565b925082820190508082111561240f5761240e6123b5565b5b92915050565b7f5772617070656452353a206361702065786365656465640000000000000000005f82015250565b5f612449601783611d48565b915061245482612415565b602082019050919050565b5f6020820190508181035f8301526124768161243d565b9050919050565b7f5772617070656452353a2063616c6c6572206973206e6f74207468652070656e5f8201527f64696e67206f776e657200000000000000000000000000000000000000000000602082015250565b5f6124d7602a83611d48565b91506124e28261247d565b604082019050919050565b5f6020820190508181035f830152612504816124cb565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f5772617070656452353a206e6577206f776e6572206973207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f612592602483611d48565b915061259d82612538565b604082019050919050565b5f6020820190508181035f8301526125bf81612586565b9050919050565b5f60c0820190506125d95f830189611f85565b6125e6602083018861203d565b6125f3604083018761203d565b6126006060830186611ed0565b61260d6080830185611ed0565b61261a60a0830184611ed0565b979650505050505050565b5f6040820190506126385f83018561203d565b612645602083018461203d565b9392505050565b5f60408201905061265f5f83018561203d565b61266c6020830184611ed0565b9392505050565b61267c81611e9d565b8114612686575f80fd5b50565b5f8151905061269781612673565b92915050565b5f602082840312156126b2576126b1611dce565b5b5f6126bf84828501612689565b91505092915050565b5f6060820190506126db5f83018661203d565b6126e86020830185611ed0565b6126f56040830184611ed0565b949350505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f612731601f83611d48565b915061273c826126fd565b602082019050919050565b5f6020820190508181035f83015261275e81612725565b9050919050565b5f60a0820190506127785f830188611f85565b6127856020830187611f85565b6127926040830186611f85565b61279f6060830185611ed0565b6127ac608083018461203d565b9695505050505050565b5f6080820190506127c95f830187611f85565b6127d66020830186611f54565b6127e36040830185611f85565b6127f06060830184611f85565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffdfea264697066735822122046ec330ce2a86dce04904d74095c3d856e12831b325cd44a1b2dd954caf7f4ae64736f6c634300081a0033",
		"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5772617070656420523500000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5772617070656420523500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5752350000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x657 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH2 0x10A SWAP2 SWAP1 PUSH2 0x657 JUMP JUMPDEST POP POP POP PUSH2 0x121 PUSH1 0x5 DUP4 PUSH2 0x245 PUSH1 0x20 SHL SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x120 DUP2 DUP2 MSTORE POP POP PUSH2 0x13D PUSH1 0x6 DUP3 PUSH2 0x245 PUSH1 0x20 SHL SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x140 DUP2 DUP2 MSTORE POP POP DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x100 DUP2 DUP2 MSTORE POP POP CHAINID PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP PUSH2 0x17A PUSH2 0x292 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x80 DUP2 DUP2 MSTORE POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x228 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21F SWAP2 SWAP1 PUSH2 0x765 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x237 DUP2 PUSH2 0x2EC PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x9 DUP2 SWAP1 SSTORE POP PUSH2 0x90F JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x266 JUMPI PUSH2 0x25F DUP4 PUSH2 0x3AF PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH2 0x28C JUMP JUMPDEST DUP3 PUSH2 0x276 DUP4 PUSH2 0x414 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH0 ADD SWAP1 DUP2 PUSH2 0x284 SWAP2 SWAP1 PUSH2 0x657 JUMP JUMPDEST POP PUSH1 0xFF PUSH0 SHL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x8 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x3FB JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x305A27A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F2 SWAP2 SWAP1 PUSH2 0x85C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH2 0x407 SWAP1 PUSH2 0x8A9 JUMP JUMPDEST PUSH0 SHR OR PUSH0 SHL SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x498 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x4AB JUMPI PUSH2 0x4AA PUSH2 0x454 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x50D PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x4D2 JUMP JUMPDEST PUSH2 0x517 DUP7 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x55B PUSH2 0x556 PUSH2 0x551 DUP5 PUSH2 0x52F JUMP JUMPDEST PUSH2 0x538 JUMP JUMPDEST PUSH2 0x52F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x574 DUP4 PUSH2 0x541 JUMP JUMPDEST PUSH2 0x588 PUSH2 0x580 DUP3 PUSH2 0x562 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x4DE JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x59C PUSH2 0x590 JUMP JUMPDEST PUSH2 0x5A7 DUP2 DUP5 DUP5 PUSH2 0x56B JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5CA JUMPI PUSH2 0x5BF PUSH0 DUP3 PUSH2 0x594 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x5AD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x60F JUMPI PUSH2 0x5E0 DUP2 PUSH2 0x4B1 JUMP JUMPDEST PUSH2 0x5E9 DUP5 PUSH2 0x4C3 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x5F8 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x60C PUSH2 0x604 DUP6 PUSH2 0x4C3 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x5AC JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x62F PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x614 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x647 DUP4 DUP4 PUSH2 0x620 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x660 DUP3 PUSH2 0x41D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x679 JUMPI PUSH2 0x678 PUSH2 0x427 JUMP JUMPDEST JUMPDEST PUSH2 0x683 DUP3 SLOAD PUSH2 0x481 JUMP JUMPDEST PUSH2 0x68E DUP3 DUP3 DUP6 PUSH2 0x5CE JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x6BF JUMPI PUSH0 DUP5 ISZERO PUSH2 0x6AD JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x6B7 DUP6 DUP3 PUSH2 0x63C JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x71E JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x6CD DUP7 PUSH2 0x4B1 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6F4 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6CF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x711 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x70D PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x620 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x74F DUP3 PUSH2 0x726 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x75F DUP2 PUSH2 0x745 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x778 PUSH0 DUP4 ADD DUP5 PUSH2 0x756 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x790 DUP2 PUSH2 0x77E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x79F DUP2 PUSH2 0x52F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x7B8 PUSH0 DUP4 ADD DUP9 PUSH2 0x787 JUMP JUMPDEST PUSH2 0x7C5 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x787 JUMP JUMPDEST PUSH2 0x7D2 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x787 JUMP JUMPDEST PUSH2 0x7DF PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x796 JUMP JUMPDEST PUSH2 0x7EC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x756 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x82E DUP3 PUSH2 0x41D JUMP JUMPDEST PUSH2 0x838 DUP2 DUP6 PUSH2 0x7F6 JUMP JUMPDEST SWAP4 POP PUSH2 0x848 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x806 JUMP JUMPDEST PUSH2 0x851 DUP2 PUSH2 0x814 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x874 DUP2 DUP5 PUSH2 0x824 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x8A0 DUP3 MLOAD PUSH2 0x77E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x8B3 DUP3 PUSH2 0x87C JUMP JUMPDEST DUP3 PUSH2 0x8BD DUP5 PUSH2 0x886 JUMP JUMPDEST SWAP1 POP PUSH2 0x8C8 DUP2 PUSH2 0x895 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP3 LT ISZERO PUSH2 0x908 JUMPI PUSH2 0x903 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH1 0x20 SUB PUSH1 0x8 MUL PUSH2 0x4D2 JUMP JUMPDEST DUP4 AND SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x285C PUSH2 0x960 PUSH0 CODECOPY PUSH0 PUSH2 0x1380 ADD MSTORE PUSH0 PUSH2 0x1345 ADD MSTORE PUSH0 PUSH2 0x1879 ADD MSTORE PUSH0 PUSH2 0x1858 ADD MSTORE PUSH0 PUSH2 0xFED ADD MSTORE PUSH0 PUSH2 0x1043 ADD MSTORE PUSH0 PUSH2 0x106C ADD MSTORE PUSH2 0x285C PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x156 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0xC1 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x3F2 JUMPI DUP1 PUSH4 0xEB8F4C4A EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0xEC81B483 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x44A JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0xC0B6F561 EQ PUSH2 0x38A JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x40C10F19 GT PUSH2 0x113 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x24E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2AE JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x214 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x162 PUSH2 0x466 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x1DAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x1E5F JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x1EF8 JUMP JUMPDEST PUSH2 0x521 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FE PUSH2 0x54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21C PUSH2 0x557 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x229 SWAP2 SWAP1 PUSH2 0x1F94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x247 SWAP2 SWAP1 PUSH2 0x1E5F JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x268 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x263 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x284 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27F SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0x69A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A2 PUSH2 0x6DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AC PUSH2 0x6F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C3 SWAP2 SWAP1 PUSH2 0x1E5F JUMP JUMPDEST PUSH2 0x7D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0x834 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F1 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x302 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x315 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2103 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x326 PUSH2 0x8EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x333 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x344 PUSH2 0x912 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x351 SWAP2 SWAP1 PUSH2 0x1DAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x374 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x1E5F JUMP JUMPDEST PUSH2 0x9A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0x9C4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x21F2 JUMP JUMPDEST PUSH2 0xADE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D7 SWAP2 SWAP1 PUSH2 0x228F JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E9 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3FA PUSH2 0xCA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x42A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x2308 JUMP JUMPDEST PUSH2 0xCCD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x434 PUSH2 0xDBB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x441 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x464 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45F SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0xDCA JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x475 SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4A1 SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4EC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4EC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4CF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x500 PUSH2 0xE4E JUMP JUMPDEST SWAP1 POP PUSH2 0x50D DUP2 DUP6 DUP6 PUSH2 0xE55 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x52B PUSH2 0xE4E JUMP JUMPDEST SWAP1 POP PUSH2 0x538 DUP6 DUP3 DUP6 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0x543 DUP6 DUP6 DUP6 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x560 PUSH2 0xFEA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x56D PUSH2 0x10A0 JUMP JUMPDEST PUSH2 0x575 PUSH2 0x1127 JUMP JUMPDEST PUSH11 0x36DF8DEC4229FB48100000 DUP2 PUSH2 0x58A PUSH2 0x518 JUMP JUMPDEST PUSH2 0x594 SWAP2 SWAP1 PUSH2 0x23E2 JUMP JUMPDEST GT ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CC SWAP1 PUSH2 0x245F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5DF DUP3 DUP3 PUSH2 0x1176 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3F2C9D57C068687834F0DE942A9BABB9E5ACAB57D516D3480A3C16EE165A4273 DUP3 PUSH1 0x40 MLOAD PUSH2 0x625 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x635 PUSH2 0x11F5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x642 DUP2 PUSH2 0x11FF JUMP JUMPDEST PUSH2 0x64A PUSH2 0xE4E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFD38818F5291BF0BB3A2A48AADC06BA8757865D1DABD804585338AAB3009DCB6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x68F SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6E7 PUSH2 0x10A0 JUMP JUMPDEST PUSH2 0x6F0 PUSH0 PUSH2 0x1213 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH2 0x6FB PUSH2 0xE4E JUMP JUMPDEST SWAP1 POP PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x78C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x783 SWAP1 PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0xA PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x7D5 DUP2 PUSH2 0x1213 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7E2 DUP3 DUP3 PUSH2 0x12D6 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFD38818F5291BF0BB3A2A48AADC06BA8757865D1DABD804585338AAB3009DCB6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x828 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x83E DUP3 PUSH2 0x12F6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x856 PUSH2 0x133C JUMP JUMPDEST PUSH2 0x85E PUSH2 0x1377 JUMP JUMPDEST CHAINID ADDRESS PUSH0 DUP1 SHL PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x87D JUMPI PUSH2 0x87C PUSH2 0x250B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8AB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x921 SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x94D SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x998 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x96F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x998 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x97B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x9AC PUSH2 0xE4E JUMP JUMPDEST SWAP1 POP PUSH2 0x9B9 DUP2 DUP6 DUP6 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x9CC PUSH2 0x10A0 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA31 SWAP1 PUSH2 0x25A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xA PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA99 PUSH2 0x8EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xB23 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB1A SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xB51 DUP13 PUSH2 0x13B2 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB67 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0xB89 DUP3 PUSH2 0x1405 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xB98 DUP3 DUP8 DUP8 DUP8 PUSH2 0x141E JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC0C JUMPI DUP1 DUP11 PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC03 SWAP3 SWAP2 SWAP1 PUSH2 0x2625 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC17 DUP11 DUP11 DUP11 PUSH2 0xE55 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xCD5 PUSH2 0x10A0 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD10 SWAP3 SWAP2 SWAP1 PUSH2 0x264C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD2C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD50 SWAP2 SWAP1 PUSH2 0x269D JUMP JUMPDEST POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x401F439D865A766757EC78675925BD67198D5E78805AA41691B34B5D6A6CBBE6 DUP4 PUSH1 0x40 MLOAD PUSH2 0xDAE SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH11 0x36DF8DEC4229FB48100000 DUP2 JUMP JUMPDEST PUSH2 0xDD2 PUSH2 0x10A0 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE42 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE39 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE4B DUP2 PUSH2 0x1213 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xE62 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x144C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE72 DUP5 DUP5 PUSH2 0xC23 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 LT ISZERO PUSH2 0xEF4 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xEE5 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEDC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF3 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x144C JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF6A JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF61 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xFDA JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD1 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFE5 DUP4 DUP4 DUP4 PUSH2 0x161B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1065 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x1092 JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0x109D JUMP JUMPDEST PUSH2 0x109A PUSH2 0x1834 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10A8 PUSH2 0xE4E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x10C6 PUSH2 0x8EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1125 JUMPI PUSH2 0x10E9 PUSH2 0xE4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111C SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x9 SLOAD SUB PUSH2 0x116C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1163 SWAP1 PUSH2 0x2747 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11E6 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11DD SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11F1 PUSH0 DUP4 DUP4 PUSH2 0x161B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1210 PUSH2 0x120A PUSH2 0xE4E JUMP JUMPDEST DUP3 PUSH2 0x18C9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x8 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x12E8 DUP3 PUSH2 0x12E2 PUSH2 0xE4E JUMP JUMPDEST DUP4 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0x12F2 DUP3 DUP3 PUSH2 0x18C9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x7 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1372 PUSH1 0x5 PUSH32 0x0 PUSH2 0x1948 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13AD PUSH1 0x6 PUSH32 0x0 PUSH2 0x1948 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x7 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1417 PUSH2 0x1411 PUSH2 0xFEA JUMP JUMPDEST DUP4 PUSH2 0x19F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x142E DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A35 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x143E DUP3 DUP3 PUSH2 0x1B1C JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14BC JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14B3 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x152C JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1523 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1615 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x160C SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x166B JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x165F SWAP2 SWAP1 PUSH2 0x23E2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1739 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x16F4 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16EB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1780 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x17CA JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1827 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x18AE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2765 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1939 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1930 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1944 DUP3 PUSH0 DUP4 PUSH2 0x161B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF PUSH0 SHL DUP4 EQ PUSH2 0x1964 JUMPI PUSH2 0x195D DUP4 PUSH2 0x1C7E JUMP JUMPDEST SWAP1 POP PUSH2 0x19EF JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x1970 SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x199C SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19E7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x19BE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19E7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x19CA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH0 SHR GT ISZERO PUSH2 0x1A71 JUMPI PUSH0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1B12 JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1A94 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AB4 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1B05 JUMPI PUSH0 PUSH1 0x1 PUSH0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x1B12 JUMP JUMPDEST DUP1 PUSH0 DUP1 PUSH0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B2F JUMPI PUSH2 0x1B2E PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B42 JUMPI PUSH2 0x1B41 PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1C7A JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B5C JUMPI PUSH2 0x1B5B PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B6F JUMPI PUSH2 0x1B6E PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1BA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1BBA JUMPI PUSH2 0x1BB9 PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1BCD JUMPI PUSH2 0x1BCC PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1C11 JUMPI DUP1 PUSH0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C08 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x1C24 JUMPI PUSH2 0x1C23 PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1C37 JUMPI PUSH2 0x1C36 PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1C79 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C70 SWAP2 SWAP1 PUSH2 0x1F94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x1C8A DUP4 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CA8 JUMPI PUSH2 0x1CA7 PUSH2 0x250B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CDA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0xFF DUP4 PUSH0 SHR AND SWAP1 POP PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x1D35 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D80 DUP3 PUSH2 0x1D3E JUMP JUMPDEST PUSH2 0x1D8A DUP2 DUP6 PUSH2 0x1D48 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D9A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1D58 JUMP JUMPDEST PUSH2 0x1DA3 DUP2 PUSH2 0x1D66 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1DC6 DUP2 DUP5 PUSH2 0x1D76 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1DFB DUP3 PUSH2 0x1DD2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E0B DUP2 PUSH2 0x1DF1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E15 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E26 DUP2 PUSH2 0x1E02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E3E DUP2 PUSH2 0x1E2C JUMP JUMPDEST DUP2 EQ PUSH2 0x1E48 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E59 DUP2 PUSH2 0x1E35 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E75 JUMPI PUSH2 0x1E74 PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E82 DUP6 DUP3 DUP7 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E93 DUP6 DUP3 DUP7 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1EB1 DUP2 PUSH2 0x1E9D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1ECA PUSH0 DUP4 ADD DUP5 PUSH2 0x1EA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1ED9 DUP2 PUSH2 0x1E2C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1EF2 PUSH0 DUP4 ADD DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F0F JUMPI PUSH2 0x1F0E PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F1C DUP7 DUP3 DUP8 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1F2D DUP7 DUP3 DUP8 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1F3E DUP7 DUP3 DUP8 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F5D DUP2 PUSH2 0x1F48 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F76 PUSH0 DUP4 ADD DUP5 PUSH2 0x1F54 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F8E DUP2 PUSH2 0x1F7C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FA7 PUSH0 DUP4 ADD DUP5 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FC2 JUMPI PUSH2 0x1FC1 PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FCF DUP5 DUP3 DUP6 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FED JUMPI PUSH2 0x1FEC PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FFA DUP5 DUP3 DUP6 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2037 DUP2 PUSH2 0x2003 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2046 DUP2 PUSH2 0x1DF1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x207E DUP2 PUSH2 0x1E2C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x208F DUP4 DUP4 PUSH2 0x2075 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x20B1 DUP3 PUSH2 0x204C JUMP JUMPDEST PUSH2 0x20BB DUP2 DUP6 PUSH2 0x2056 JUMP JUMPDEST SWAP4 POP PUSH2 0x20C6 DUP4 PUSH2 0x2066 JUMP JUMPDEST DUP1 PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20F6 JUMPI DUP2 MLOAD PUSH2 0x20DD DUP9 DUP3 PUSH2 0x2084 JUMP JUMPDEST SWAP8 POP PUSH2 0x20E8 DUP4 PUSH2 0x209B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x20C9 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x2116 PUSH0 DUP4 ADD DUP11 PUSH2 0x202E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2128 DUP2 DUP10 PUSH2 0x1D76 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x213C DUP2 DUP9 PUSH2 0x1D76 JUMP JUMPDEST SWAP1 POP PUSH2 0x214B PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x2158 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x2165 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x1F85 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x2177 DUP2 DUP5 PUSH2 0x20A7 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2198 PUSH0 DUP4 ADD DUP5 PUSH2 0x203D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x21A7 DUP2 PUSH2 0x1F48 JUMP JUMPDEST DUP2 EQ PUSH2 0x21B1 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x21C2 DUP2 PUSH2 0x219E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x21D1 DUP2 PUSH2 0x1F7C JUMP JUMPDEST DUP2 EQ PUSH2 0x21DB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x21EC DUP2 PUSH2 0x21C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x220D JUMPI PUSH2 0x220C PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x221A DUP11 DUP3 DUP12 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x222B DUP11 DUP3 DUP12 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x223C DUP11 DUP3 DUP12 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x224D DUP11 DUP3 DUP12 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x225E DUP11 DUP3 DUP12 ADD PUSH2 0x21B4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x226F DUP11 DUP3 DUP12 ADD PUSH2 0x21DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x2280 DUP11 DUP3 DUP12 ADD PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22A5 JUMPI PUSH2 0x22A4 PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x22B2 DUP6 DUP3 DUP7 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22C3 DUP6 DUP3 DUP7 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x22D7 DUP3 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22E7 DUP2 PUSH2 0x22CD JUMP JUMPDEST DUP2 EQ PUSH2 0x22F1 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2302 DUP2 PUSH2 0x22DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x231F JUMPI PUSH2 0x231E PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x232C DUP7 DUP3 DUP8 ADD PUSH2 0x22F4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x233D DUP7 DUP3 DUP8 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x234E DUP7 DUP3 DUP8 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x239C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x23AF JUMPI PUSH2 0x23AE PUSH2 0x2358 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x23EC DUP3 PUSH2 0x1E2C JUMP JUMPDEST SWAP2 POP PUSH2 0x23F7 DUP4 PUSH2 0x1E2C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x240F JUMPI PUSH2 0x240E PUSH2 0x23B5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5772617070656452353A20636170206578636565646564000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x2449 PUSH1 0x17 DUP4 PUSH2 0x1D48 JUMP JUMPDEST SWAP2 POP PUSH2 0x2454 DUP3 PUSH2 0x2415 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2476 DUP2 PUSH2 0x243D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5772617070656452353A2063616C6C6572206973206E6F74207468652070656E PUSH0 DUP3 ADD MSTORE PUSH32 0x64696E67206F776E657200000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x24D7 PUSH1 0x2A DUP4 PUSH2 0x1D48 JUMP JUMPDEST SWAP2 POP PUSH2 0x24E2 DUP3 PUSH2 0x247D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2504 DUP2 PUSH2 0x24CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x5772617070656452353A206E6577206F776E6572206973207A65726F20616464 PUSH0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x2592 PUSH1 0x24 DUP4 PUSH2 0x1D48 JUMP JUMPDEST SWAP2 POP PUSH2 0x259D DUP3 PUSH2 0x2538 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x25BF DUP2 PUSH2 0x2586 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x25D9 PUSH0 DUP4 ADD DUP10 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x25E6 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x25F3 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x2600 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x260D PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x261A PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2638 PUSH0 DUP4 ADD DUP6 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x2645 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x203D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x265F PUSH0 DUP4 ADD DUP6 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x266C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x267C DUP2 PUSH2 0x1E9D JUMP JUMPDEST DUP2 EQ PUSH2 0x2686 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2697 DUP2 PUSH2 0x2673 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26B2 JUMPI PUSH2 0x26B1 PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x26BF DUP5 DUP3 DUP6 ADD PUSH2 0x2689 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x26DB PUSH0 DUP4 ADD DUP7 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x26E8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x26F5 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x2731 PUSH1 0x1F DUP4 PUSH2 0x1D48 JUMP JUMPDEST SWAP2 POP PUSH2 0x273C DUP3 PUSH2 0x26FD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x275E DUP2 PUSH2 0x2725 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2778 PUSH0 DUP4 ADD DUP9 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x2785 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x2792 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x279F PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x27AC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x203D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x27C9 PUSH0 DUP4 ADD DUP8 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x27D6 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x27E3 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x27F0 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1F85 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0xEC CALLER 0xC 0xE2 0xA8 PUSH14 0xCE04904D74095C3D856E12831B32 TLOAD 0xD4 BLOBBASEFEE SHL 0x2D 0xD9 SLOAD 0xCA 0xF7 DELEGATECALL 0xAE PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
		"sourceMap": "559:3322:20:-:0;;;1482:169;;;;;;;;;;1584:10;1577:52:7;;;;;;;;;;;;;;;;;1616:4;3428:431:16;;;;;;;;;;;;;;;;;1582:113:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1656:5;1648;:13;;;;;;:::i;:::-;;1681:7;1671;:17;;;;;;:::i;:::-;;1582:113;;3501:45:16;3532:13;3501:4;:30;;;;:45;;;;:::i;:::-;3493:53;;;;;;3567:51;3601:16;3567:7;:33;;;;:51;;;;:::i;:::-;3556:62;;;;;;3658:4;3642:22;;;;;;3628:36;;;;;;3707:7;3691:25;;;;;;3674:42;;;;;;3744:13;3727:30;;;;;;3792:23;:21;;;:23;;:::i;:::-;3767:48;;;;;;3847:4;3825:27;;;;;;;;;;3428:431;;1577:52:7;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;1716:1:3;1821:7;:22;;;;559:3322:20;;2887:340:12;2983:11;3032:2;3016:5;3010:19;:24;3006:215;;;3057:20;3071:5;3057:13;;;:20;;:::i;:::-;3050:27;;;;3006:215;3149:5;3108:32;3134:5;3108:25;;;:32;;:::i;:::-;:38;;:46;;;;;;:::i;:::-;;1390:66;3192:17;;3168:42;;2887:340;;;;;:::o;4213:179:16:-;4268:7;2079:95;4326:11;;4339:14;;4355:13;4378:4;4304:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4294:91;;;;;;4287:98;;4213:179;:::o;2912:187:0:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;1708:286:12:-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;;;;;;;;;;:::i;:::-;;;;;;;;1836:72;1974:4;:11;1965:4;1957:13;;;:::i;:::-;1949:22;;:36;1941:45;;1917:70;;;1708:286;;;:::o;3468:175:13:-;3536:20;3617:10;3607:20;;3468:175;;;:::o;7:99:21:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;5234:126::-;5271:7;5311:42;5304:5;5300:54;5289:65;;5234:126;;;:::o;5366:96::-;5403:7;5432:24;5450:5;5432:24;:::i;:::-;5421:35;;5366:96;;;:::o;5468:118::-;5555:24;5573:5;5555:24;:::i;:::-;5550:3;5543:37;5468:118;;:::o;5592:222::-;5685:4;5723:2;5712:9;5708:18;5700:26;;5736:71;5804:1;5793:9;5789:17;5780:6;5736:71;:::i;:::-;5592:222;;;;:::o;5820:77::-;5857:7;5886:5;5875:16;;5820:77;;;:::o;5903:118::-;5990:24;6008:5;5990:24;:::i;:::-;5985:3;5978:37;5903:118;;:::o;6027:::-;6114:24;6132:5;6114:24;:::i;:::-;6109:3;6102:37;6027:118;;:::o;6151:664::-;6356:4;6394:3;6383:9;6379:19;6371:27;;6408:71;6476:1;6465:9;6461:17;6452:6;6408:71;:::i;:::-;6489:72;6557:2;6546:9;6542:18;6533:6;6489:72;:::i;:::-;6571;6639:2;6628:9;6624:18;6615:6;6571:72;:::i;:::-;6653;6721:2;6710:9;6706:18;6697:6;6653:72;:::i;:::-;6735:73;6803:3;6792:9;6788:19;6779:6;6735:73;:::i;:::-;6151:664;;;;;;;;:::o;6821:169::-;6905:11;6939:6;6934:3;6927:19;6979:4;6974:3;6970:14;6955:29;;6821:169;;;;:::o;6996:139::-;7085:6;7080:3;7075;7069:23;7126:1;7117:6;7112:3;7108:16;7101:27;6996:139;;;:::o;7141:102::-;7182:6;7233:2;7229:7;7224:2;7217:5;7213:14;7209:28;7199:38;;7141:102;;;:::o;7249:377::-;7337:3;7365:39;7398:5;7365:39;:::i;:::-;7420:71;7484:6;7479:3;7420:71;:::i;:::-;7413:78;;7500:65;7558:6;7553:3;7546:4;7539:5;7535:16;7500:65;:::i;:::-;7590:29;7612:6;7590:29;:::i;:::-;7585:3;7581:39;7574:46;;7341:285;7249:377;;;;:::o;7632:313::-;7745:4;7783:2;7772:9;7768:18;7760:26;;7832:9;7826:4;7822:20;7818:1;7807:9;7803:17;7796:47;7860:78;7933:4;7924:6;7860:78;:::i;:::-;7852:86;;7632:313;;;;:::o;7951:98::-;8002:6;8036:5;8030:12;8020:22;;7951:98;;;:::o;8055:116::-;8106:4;8129:3;8121:11;;8159:4;8154:3;8150:14;8142:22;;8055:116;;;:::o;8177:154::-;8220:11;8256:29;8280:3;8274:10;8256:29;:::i;:::-;8319:5;8295:29;;8232:99;8177:154;;;:::o;8337:594::-;8421:5;8452:38;8484:5;8452:38;:::i;:::-;8515:5;8542:40;8576:5;8542:40;:::i;:::-;8530:52;;8601:35;8627:8;8601:35;:::i;:::-;8592:44;;8660:2;8652:6;8649:14;8646:278;;;8731:169;8816:66;8786:6;8782:2;8778:15;8775:1;8771:23;8731:169;:::i;:::-;8708:5;8687:227;8678:236;;8646:278;8427:504;;8337:594;;;:::o;559:3322:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
	},
	"abi": [
		{
			"inputs": [],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [],
			"name": "ECDSAInvalidSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "length",
					"type": "uint256"
				}
			],
			"name": "ECDSAInvalidSignatureLength",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "ECDSAInvalidSignatureS",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "allowance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientAllowance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "balance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientBalance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "approver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidApprover",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSpender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				}
			],
			"name": "ERC2612ExpiredSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "signer",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ERC2612InvalidSigner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "currentNonce",
					"type": "uint256"
				}
			],
			"name": "InvalidAccountNonce",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "InvalidShortString",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "OwnableInvalidOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "OwnableUnauthorizedAccount",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "str",
					"type": "string"
				}
			],
			"name": "StringTooLong",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [],
			"name": "EIP712DomainChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferStarted",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "TokensBurned",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "TokensMinted",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "token",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "TokensRecovered",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "CAP",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "DOMAIN_SEPARATOR",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "acceptOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "allowance",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "burn",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "burnFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "decimals",
			"outputs": [
				{
					"internalType": "uint8",
					"name": "",
					"type": "uint8"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "eip712Domain",
			"outputs": [
				{
					"internalType": "bytes1",
					"name": "fields",
					"type": "bytes1"
				},
				{
					"internalType": "string",
					"name": "name",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "version",
					"type": "string"
				},
				{
					"internalType": "uint256",
					"name": "chainId",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "verifyingContract",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "salt",
					"type": "bytes32"
				},
				{
					"internalType": "uint256[]",
					"name": "extensions",
					"type": "uint256[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "contract IERC20",
					"name": "token",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "emergencyRecoverERC20",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "initiateOwnershipTransfer",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "mint",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "nonces",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "pendingOwner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				},
				{
					"internalType": "uint8",
					"name": "v",
					"type": "uint8"
				},
				{
					"internalType": "bytes32",
					"name": "r",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "permit",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "totalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transfer",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 397,
				"contract": "R5.sol:WrappedR5",
				"label": "_balances",
				"offset": 0,
				"slot": "0",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 403,
				"contract": "R5.sol:WrappedR5",
				"label": "_allowances",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
			},
			{
				"astId": 405,
				"contract": "R5.sol:WrappedR5",
				"label": "_totalSupply",
				"offset": 0,
				"slot": "2",
				"type": "t_uint256"
			},
			{
				"astId": 407,
				"contract": "R5.sol:WrappedR5",
				"label": "_name",
				"offset": 0,
				"slot": "3",
				"type": "t_string_storage"
			},
			{
				"astId": 409,
				"contract": "R5.sol:WrappedR5",
				"label": "_symbol",
				"offset": 0,
				"slot": "4",
				"type": "t_string_storage"
			},
			{
				"astId": 2308,
				"contract": "R5.sol:WrappedR5",
				"label": "_nameFallback",
				"offset": 0,
				"slot": "5",
				"type": "t_string_storage"
			},
			{
				"astId": 2310,
				"contract": "R5.sol:WrappedR5",
				"label": "_versionFallback",
				"offset": 0,
				"slot": "6",
				"type": "t_string_storage"
			},
			{
				"astId": 1273,
				"contract": "R5.sol:WrappedR5",
				"label": "_nonces",
				"offset": 0,
				"slot": "7",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 8,
				"contract": "R5.sol:WrappedR5",
				"label": "_owner",
				"offset": 0,
				"slot": "8",
				"type": "t_address"
			},
			{
				"astId": 320,
				"contract": "R5.sol:WrappedR5",
				"label": "_status",
				"offset": 0,
				"slot": "9",
				"type": "t_uint256"
			},
			{
				"astId": 3803,
				"contract": "R5.sol:WrappedR5",
				"label": "_pendingOwner",
				"offset": 0,
				"slot": "10",
				"type": "t_address"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => uint256))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_uint256)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var wrappedr5Contract = new web3.eth.Contract([{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRecoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\nvar wrappedr5 = wrappedr5Contract.deploy({\n     data: '0x610160604052348015610010575f80fd5b50336040518060400160405280600a81526020017f5772617070656420523500000000000000000000000000000000000000000000815250806040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600a81526020017f57726170706564205235000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f575235000000000000000000000000000000000000000000000000000000000081525081600390816100fa9190610657565b50806004908161010a9190610657565b50505061012160058361024560201b90919060201c565b610120818152505061013d60068261024560201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a0818152505061017a61029260201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250505050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610228575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161021f9190610765565b60405180910390fd5b610237816102ec60201b60201c565b50600160098190555061090f565b5f6020835110156102665761025f836103af60201b60201c565b905061028c565b826102768361041460201b60201c565b5f0190816102849190610657565b5060ff5f1b90505b92915050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e0516101005146306040516020016102d19594939291906107a5565b60405160208183030381529060405280519060200120905090565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f80829050601f815111156103fb57826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016103f2919061085c565b60405180910390fd5b805181610407906108a9565b5f1c175f1b915050919050565b5f819050919050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061049857607f821691505b6020821081036104ab576104aa610454565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261050d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826104d2565b61051786836104d2565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61055b6105566105518461052f565b610538565b61052f565b9050919050565b5f819050919050565b61057483610541565b61058861058082610562565b8484546104de565b825550505050565b5f90565b61059c610590565b6105a781848461056b565b505050565b5b818110156105ca576105bf5f82610594565b6001810190506105ad565b5050565b601f82111561060f576105e0816104b1565b6105e9846104c3565b810160208510156105f8578190505b61060c610604856104c3565b8301826105ac565b50505b505050565b5f82821c905092915050565b5f61062f5f1984600802610614565b1980831691505092915050565b5f6106478383610620565b9150826002028217905092915050565b6106608261041d565b67ffffffffffffffff81111561067957610678610427565b5b6106838254610481565b61068e8282856105ce565b5f60209050601f8311600181146106bf575f84156106ad578287015190505b6106b7858261063c565b86555061071e565b601f1984166106cd866104b1565b5f5b828110156106f4578489015182556001820191506020850194506020810190506106cf565b86831015610711578489015161070d601f891682610620565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61074f82610726565b9050919050565b61075f81610745565b82525050565b5f6020820190506107785f830184610756565b92915050565b5f819050919050565b6107908161077e565b82525050565b61079f8161052f565b82525050565b5f60a0820190506107b85f830188610787565b6107c56020830187610787565b6107d26040830186610787565b6107df6060830185610796565b6107ec6080830184610756565b9695505050505050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61082e8261041d565b61083881856107f6565b9350610848818560208601610806565b61085181610814565b840191505092915050565b5f6020820190508181035f8301526108748184610824565b905092915050565b5f81519050919050565b5f819050602082019050919050565b5f6108a0825161077e565b80915050919050565b5f6108b38261087c565b826108bd84610886565b90506108c881610895565b92506020821015610908576109037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026104d2565b831692505b5050919050565b60805160a05160c05160e05161010051610120516101405161285c6109605f395f61138001525f61134501525f61187901525f61185801525f610fed01525f61104301525f61106c015261285c5ff3fe608060405234801561000f575f80fd5b5060043610610156575f3560e01c80637ecebe00116100c1578063d505accf1161007a578063d505accf146103a6578063dd62ed3e146103c2578063e30c3978146103f2578063eb8f4c4a14610410578063ec81b4831461042c578063f2fde38b1461044a57610156565b80637ecebe00146102ca57806384b0196e146102fa5780638da5cb5b1461031e57806395d89b411461033c578063a9059cbb1461035a578063c0b6f5611461038a57610156565b806340c10f191161011357806340c10f191461023257806342966c681461024e57806370a082311461026a578063715018a61461029a57806379ba5097146102a457806379cc6790146102ae57610156565b806306fdde031461015a578063095ea7b31461017857806318160ddd146101a857806323b872dd146101c6578063313ce567146101f65780633644e51514610214575b5f80fd5b610162610466565b60405161016f9190611dae565b60405180910390f35b610192600480360381019061018d9190611e5f565b6104f6565b60405161019f9190611eb7565b60405180910390f35b6101b0610518565b6040516101bd9190611edf565b60405180910390f35b6101e060048036038101906101db9190611ef8565b610521565b6040516101ed9190611eb7565b60405180910390f35b6101fe61054f565b60405161020b9190611f63565b60405180910390f35b61021c610557565b6040516102299190611f94565b60405180910390f35b61024c60048036038101906102479190611e5f565b610565565b005b61026860048036038101906102639190611fad565b610639565b005b610284600480360381019061027f9190611fd8565b61069a565b6040516102919190611edf565b60405180910390f35b6102a26106df565b005b6102ac6106f2565b005b6102c860048036038101906102c39190611e5f565b6107d8565b005b6102e460048036038101906102df9190611fd8565b610834565b6040516102f19190611edf565b60405180910390f35b610302610845565b6040516103159796959493929190612103565b60405180910390f35b6103266108ea565b6040516103339190612185565b60405180910390f35b610344610912565b6040516103519190611dae565b60405180910390f35b610374600480360381019061036f9190611e5f565b6109a2565b6040516103819190611eb7565b60405180910390f35b6103a4600480360381019061039f9190611fd8565b6109c4565b005b6103c060048036038101906103bb91906121f2565b610ade565b005b6103dc60048036038101906103d7919061228f565b610c23565b6040516103e99190611edf565b60405180910390f35b6103fa610ca5565b6040516104079190612185565b60405180910390f35b61042a60048036038101906104259190612308565b610ccd565b005b610434610dbb565b6040516104419190611edf565b60405180910390f35b610464600480360381019061045f9190611fd8565b610dca565b005b60606003805461047590612385565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190612385565b80156104ec5780601f106104c3576101008083540402835291602001916104ec565b820191905f5260205f20905b8154815290600101906020018083116104cf57829003601f168201915b5050505050905090565b5f80610500610e4e565b905061050d818585610e55565b600191505092915050565b5f600254905090565b5f8061052b610e4e565b9050610538858285610e67565b610543858585610efa565b60019150509392505050565b5f6012905090565b5f610560610fea565b905090565b61056d6110a0565b610575611127565b6a36df8dec4229fb481000008161058a610518565b61059491906123e2565b11156105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc9061245f565b60405180910390fd5b6105df8282611176565b8173ffffffffffffffffffffffffffffffffffffffff167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a4273826040516106259190611edf565b60405180910390a26106356111f5565b5050565b610642816111ff565b61064a610e4e565b73ffffffffffffffffffffffffffffffffffffffff167ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb68260405161068f9190611edf565b60405180910390a250565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6106e76110a0565b6106f05f611213565b565b5f6106fb610e4e565b9050600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610783906124ed565b60405180910390fd5b5f600a5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107d581611213565b50565b6107e282826112d6565b8173ffffffffffffffffffffffffffffffffffffffff167ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb6826040516108289190611edf565b60405180910390a25050565b5f61083e826112f6565b9050919050565b5f6060805f805f606061085661133c565b61085e611377565b46305f801b5f67ffffffffffffffff81111561087d5761087c61250b565b5b6040519080825280602002602001820160405280156108ab5781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461092190612385565b80601f016020809104026020016040519081016040528092919081815260200182805461094d90612385565b80156109985780601f1061096f57610100808354040283529160200191610998565b820191905f5260205f20905b81548152906001019060200180831161097b57829003601f168201915b5050505050905090565b5f806109ac610e4e565b90506109b9818585610efa565b600191505092915050565b6109cc6110a0565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a31906125a8565b60405180910390fd5b80600a5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16610a996108ea565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b83421115610b2357836040517f62791302000000000000000000000000000000000000000000000000000000008152600401610b1a9190611edf565b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b518c6113b2565b89604051602001610b67969594939291906125c6565b6040516020818303038152906040528051906020012090505f610b8982611405565b90505f610b988287878761141e565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c0c57808a6040517f4b800e46000000000000000000000000000000000000000000000000000000008152600401610c03929190612625565b60405180910390fd5b610c178a8a8a610e55565b50505050505050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cd56110a0565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610d1092919061264c565b6020604051808303815f875af1158015610d2c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d50919061269d565b508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f401f439d865a766757ec78675925bd67198d5e78805aa41691b34b5d6a6cbbe683604051610dae9190611edf565b60405180910390a3505050565b6a36df8dec4229fb4810000081565b610dd26110a0565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e42575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610e399190612185565b60405180910390fd5b610e4b81611213565b50565b5f33905090565b610e62838383600161144c565b505050565b5f610e728484610c23565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610ef45781811015610ee5578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610edc939291906126c8565b60405180910390fd5b610ef384848484035f61144c565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f6a575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610f619190612185565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fda575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610fd19190612185565b60405180910390fd5b610fe583838361161b565b505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561106557507f000000000000000000000000000000000000000000000000000000000000000046145b15611092577f0000000000000000000000000000000000000000000000000000000000000000905061109d565b61109a611834565b90505b90565b6110a8610e4e565b73ffffffffffffffffffffffffffffffffffffffff166110c66108ea565b73ffffffffffffffffffffffffffffffffffffffff1614611125576110e9610e4e565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161111c9190612185565b60405180910390fd5b565b60026009540361116c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116390612747565b60405180910390fd5b6002600981905550565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111e6575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016111dd9190612185565b60405180910390fd5b6111f15f838361161b565b5050565b6001600981905550565b61121061120a610e4e565b826118c9565b50565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112e8826112e2610e4e565b83610e67565b6112f282826118c9565b5050565b5f60075f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b606061137260057f000000000000000000000000000000000000000000000000000000000000000061194890919063ffffffff16565b905090565b60606113ad60067f000000000000000000000000000000000000000000000000000000000000000061194890919063ffffffff16565b905090565b5f60075f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190600101919050559050919050565b5f611417611411610fea565b836119f5565b9050919050565b5f805f8061142e88888888611a35565b92509250925061143e8282611b1c565b829350505050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114bc575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016114b39190612185565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361152c575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016115239190612185565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611615578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161160c9190611edf565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361166b578060025f82825461165f91906123e2565b92505081905550611739565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156116f4578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016116eb939291906126c8565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611780578060025f82825403925050819055506117ca565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516118279190611edf565b60405180910390a3505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016118ae959493929190612765565b60405160208183030381529060405280519060200120905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611939575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016119309190612185565b60405180910390fd5b611944825f8361161b565b5050565b606060ff5f1b83146119645761195d83611c7e565b90506119ef565b81805461197090612385565b80601f016020809104026020016040519081016040528092919081815260200182805461199c90612385565b80156119e75780601f106119be576101008083540402835291602001916119e7565b820191905f5260205f20905b8154815290600101906020018083116119ca57829003601f168201915b505050505090505b92915050565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f805f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c1115611a71575f600385925092509250611b12565b5f6001888888886040515f8152602001604052604051611a9494939291906127b6565b6020604051602081039080840390855afa158015611ab4573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b05575f60015f801b93509350935050611b12565b805f805f1b935093509350505b9450945094915050565b5f6003811115611b2f57611b2e6127f9565b5b826003811115611b4257611b416127f9565b5b0315611c7a5760016003811115611b5c57611b5b6127f9565b5b826003811115611b6f57611b6e6127f9565b5b03611ba6576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115611bba57611bb96127f9565b5b826003811115611bcd57611bcc6127f9565b5b03611c1157805f1c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401611c089190611edf565b60405180910390fd5b600380811115611c2457611c236127f9565b5b826003811115611c3757611c366127f9565b5b03611c7957806040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600401611c709190611f94565b60405180910390fd5b5b5050565b60605f611c8a83611cf0565b90505f602067ffffffffffffffff811115611ca857611ca761250b565b5b6040519080825280601f01601f191660200182016040528015611cda5781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f8060ff835f1c169050601f811115611d35576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611d8082611d3e565b611d8a8185611d48565b9350611d9a818560208601611d58565b611da381611d66565b840191505092915050565b5f6020820190508181035f830152611dc68184611d76565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611dfb82611dd2565b9050919050565b611e0b81611df1565b8114611e15575f80fd5b50565b5f81359050611e2681611e02565b92915050565b5f819050919050565b611e3e81611e2c565b8114611e48575f80fd5b50565b5f81359050611e5981611e35565b92915050565b5f8060408385031215611e7557611e74611dce565b5b5f611e8285828601611e18565b9250506020611e9385828601611e4b565b9150509250929050565b5f8115159050919050565b611eb181611e9d565b82525050565b5f602082019050611eca5f830184611ea8565b92915050565b611ed981611e2c565b82525050565b5f602082019050611ef25f830184611ed0565b92915050565b5f805f60608486031215611f0f57611f0e611dce565b5b5f611f1c86828701611e18565b9350506020611f2d86828701611e18565b9250506040611f3e86828701611e4b565b9150509250925092565b5f60ff82169050919050565b611f5d81611f48565b82525050565b5f602082019050611f765f830184611f54565b92915050565b5f819050919050565b611f8e81611f7c565b82525050565b5f602082019050611fa75f830184611f85565b92915050565b5f60208284031215611fc257611fc1611dce565b5b5f611fcf84828501611e4b565b91505092915050565b5f60208284031215611fed57611fec611dce565b5b5f611ffa84828501611e18565b91505092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61203781612003565b82525050565b61204681611df1565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61207e81611e2c565b82525050565b5f61208f8383612075565b60208301905092915050565b5f602082019050919050565b5f6120b18261204c565b6120bb8185612056565b93506120c683612066565b805f5b838110156120f65781516120dd8882612084565b97506120e88361209b565b9250506001810190506120c9565b5085935050505092915050565b5f60e0820190506121165f83018a61202e565b81810360208301526121288189611d76565b9050818103604083015261213c8188611d76565b905061214b6060830187611ed0565b612158608083018661203d565b61216560a0830185611f85565b81810360c083015261217781846120a7565b905098975050505050505050565b5f6020820190506121985f83018461203d565b92915050565b6121a781611f48565b81146121b1575f80fd5b50565b5f813590506121c28161219e565b92915050565b6121d181611f7c565b81146121db575f80fd5b50565b5f813590506121ec816121c8565b92915050565b5f805f805f805f60e0888a03121561220d5761220c611dce565b5b5f61221a8a828b01611e18565b975050602061222b8a828b01611e18565b965050604061223c8a828b01611e4b565b955050606061224d8a828b01611e4b565b945050608061225e8a828b016121b4565b93505060a061226f8a828b016121de565b92505060c06122808a828b016121de565b91505092959891949750929550565b5f80604083850312156122a5576122a4611dce565b5b5f6122b285828601611e18565b92505060206122c385828601611e18565b9150509250929050565b5f6122d782611df1565b9050919050565b6122e7816122cd565b81146122f1575f80fd5b50565b5f81359050612302816122de565b92915050565b5f805f6060848603121561231f5761231e611dce565b5b5f61232c868287016122f4565b935050602061233d86828701611e18565b925050604061234e86828701611e4b565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061239c57607f821691505b6020821081036123af576123ae612358565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6123ec82611e2c565b91506123f783611e2c565b925082820190508082111561240f5761240e6123b5565b5b92915050565b7f5772617070656452353a206361702065786365656465640000000000000000005f82015250565b5f612449601783611d48565b915061245482612415565b602082019050919050565b5f6020820190508181035f8301526124768161243d565b9050919050565b7f5772617070656452353a2063616c6c6572206973206e6f74207468652070656e5f8201527f64696e67206f776e657200000000000000000000000000000000000000000000602082015250565b5f6124d7602a83611d48565b91506124e28261247d565b604082019050919050565b5f6020820190508181035f830152612504816124cb565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f5772617070656452353a206e6577206f776e6572206973207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f612592602483611d48565b915061259d82612538565b604082019050919050565b5f6020820190508181035f8301526125bf81612586565b9050919050565b5f60c0820190506125d95f830189611f85565b6125e6602083018861203d565b6125f3604083018761203d565b6126006060830186611ed0565b61260d6080830185611ed0565b61261a60a0830184611ed0565b979650505050505050565b5f6040820190506126385f83018561203d565b612645602083018461203d565b9392505050565b5f60408201905061265f5f83018561203d565b61266c6020830184611ed0565b9392505050565b61267c81611e9d565b8114612686575f80fd5b50565b5f8151905061269781612673565b92915050565b5f602082840312156126b2576126b1611dce565b5b5f6126bf84828501612689565b91505092915050565b5f6060820190506126db5f83018661203d565b6126e86020830185611ed0565b6126f56040830184611ed0565b949350505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f612731601f83611d48565b915061273c826126fd565b602082019050919050565b5f6020820190508181035f83015261275e81612725565b9050919050565b5f60a0820190506127785f830188611f85565b6127856020830187611f85565b6127926040830186611f85565b61279f6060830185611ed0565b6127ac608083018461203d565b9695505050505050565b5f6080820190506127c95f830187611f85565b6127d66020830186611f54565b6127e36040830185611f85565b6127f06060830184611f85565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffdfea264697066735822122046ec330ce2a86dce04904d74095c3d856e12831b325cd44a1b2dd954caf7f4ae64736f6c634300081a0033', \n     arguments: [\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"ec81b483": "CAP()",
		"3644e515": "DOMAIN_SEPARATOR()",
		"79ba5097": "acceptOwnership()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"42966c68": "burn(uint256)",
		"79cc6790": "burnFrom(address,uint256)",
		"313ce567": "decimals()",
		"84b0196e": "eip712Domain()",
		"eb8f4c4a": "emergencyRecoverERC20(address,address,uint256)",
		"c0b6f561": "initiateOwnershipTransfer(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"7ecebe00": "nonces(address)",
		"8da5cb5b": "owner()",
		"e30c3978": "pendingOwner()",
		"d505accf": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
		"715018a6": "renounceOwnership()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"f2fde38b": "transferOwnership(address)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "2066400",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"CAP()": "435",
			"DOMAIN_SEPARATOR()": "infinite",
			"acceptOwnership()": "54721",
			"allowance(address,address)": "infinite",
			"approve(address,uint256)": "infinite",
			"balanceOf(address)": "2896",
			"burn(uint256)": "infinite",
			"burnFrom(address,uint256)": "infinite",
			"decimals()": "450",
			"eip712Domain()": "infinite",
			"emergencyRecoverERC20(address,address,uint256)": "infinite",
			"initiateOwnershipTransfer(address)": "infinite",
			"mint(address,uint256)": "infinite",
			"name()": "infinite",
			"nonces(address)": "2894",
			"owner()": "2582",
			"pendingOwner()": "2581",
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
			"renounceOwnership()": "infinite",
			"symbol()": "infinite",
			"totalSupply()": "2500",
			"transfer(address,uint256)": "infinite",
			"transferFrom(address,address,uint256)": "infinite",
			"transferOwnership(address)": "infinite"
		}
	},
	"devdoc": {
		"errors": {
			"ECDSAInvalidSignature()": [
				{
					"details": "The signature derives the `address(0)`."
				}
			],
			"ECDSAInvalidSignatureLength(uint256)": [
				{
					"details": "The signature has an invalid length."
				}
			],
			"ECDSAInvalidSignatureS(bytes32)": [
				{
					"details": "The signature has an S value that is in the upper half order."
				}
			],
			"ERC20InsufficientAllowance(address,uint256,uint256)": [
				{
					"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
					"params": {
						"allowance": "Amount of tokens a `spender` is allowed to operate with.",
						"needed": "Minimum amount required to perform a transfer.",
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC20InsufficientBalance(address,uint256,uint256)": [
				{
					"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
					"params": {
						"balance": "Current balance for the interacting account.",
						"needed": "Minimum amount required to perform a transfer.",
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidApprover(address)": [
				{
					"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
					"params": {
						"approver": "Address initiating an approval operation."
					}
				}
			],
			"ERC20InvalidReceiver(address)": [
				{
					"details": "Indicates a failure with the token `receiver`. Used in transfers.",
					"params": {
						"receiver": "Address to which tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSender(address)": [
				{
					"details": "Indicates a failure with the token `sender`. Used in transfers.",
					"params": {
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSpender(address)": [
				{
					"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
					"params": {
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC2612ExpiredSignature(uint256)": [
				{
					"details": "Permit deadline has expired."
				}
			],
			"ERC2612InvalidSigner(address,address)": [
				{
					"details": "Mismatched signature."
				}
			],
			"InvalidAccountNonce(address,uint256)": [
				{
					"details": "The nonce used for an `account` is not the expected current nonce."
				}
			],
			"OwnableInvalidOwner(address)": [
				{
					"details": "The owner is not a valid owner account. (eg. `address(0)`)"
				}
			],
			"OwnableUnauthorizedAccount(address)": [
				{
					"details": "The caller account is not authorized to perform an operation."
				}
			]
		},
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
			},
			"EIP712DomainChanged()": {
				"details": "MAY be emitted to signal that the domain could have changed."
			},
			"OwnershipTransferStarted(address,address)": {
				"details": "Emitted when ownership transfer is initiated"
			},
			"TokensBurned(address,uint256)": {
				"details": "Emitted when tokens are burned"
			},
			"TokensMinted(address,uint256)": {
				"details": "Emitted when new tokens are minted"
			},
			"TokensRecovered(address,address,uint256)": {
				"details": "Emitted when tokens are rescued from the contract"
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
			}
		},
		"kind": "dev",
		"methods": {
			"DOMAIN_SEPARATOR()": {
				"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
			},
			"allowance(address,address)": {
				"details": "See {IERC20-allowance}."
			},
			"approve(address,uint256)": {
				"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
			},
			"balanceOf(address)": {
				"details": "See {IERC20-balanceOf}."
			},
			"decimals()": {
				"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
			},
			"eip712Domain()": {
				"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
			},
			"emergencyRecoverERC20(address,address,uint256)": {
				"params": {
					"amount": "Amount to recover",
					"to": "Recipient of the rescued tokens",
					"token": "The ERC20 contract to pull tokens from"
				}
			},
			"initiateOwnershipTransfer(address)": {
				"params": {
					"newOwner": "The address to transfer ownership to"
				}
			},
			"mint(address,uint256)": {
				"params": {
					"amount": "Amount to mint (in wei)",
					"to": "Recipient of the minted tokens"
				}
			},
			"name()": {
				"details": "Returns the name of the token."
			},
			"nonces(address)": {
				"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
			},
			"owner()": {
				"details": "Returns the address of the current owner."
			},
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
				"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
			},
			"renounceOwnership()": {
				"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
			},
			"symbol()": {
				"details": "Returns the symbol of the token, usually a shorter version of the name."
			},
			"totalSupply()": {
				"details": "See {IERC20-totalSupply}."
			},
			"transfer(address,uint256)": {
				"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
			},
			"transferFrom(address,address,uint256)": {
				"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
			},
			"transferOwnership(address)": {
				"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			}
		},
		"stateVariables": {
			"_pendingOwner": {
				"details": "The address pending ownership transfer"
			}
		},
		"title": "Wrapped R5",
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {
			"CAP()": {
				"notice": "Maximum total supply: 66,337,700 WR5 (18 decimals)"
			},
			"acceptOwnership()": {
				"notice": "Accept ownership transfer (must be called by pending owner)"
			},
			"burn(uint256)": {
				"notice": "Burn your own tokens; emits a custom event"
			},
			"burnFrom(address,uint256)": {
				"notice": "Burn from someone else’s allowance; emits a custom event"
			},
			"emergencyRecoverERC20(address,address,uint256)": {
				"notice": "Rescue any ERC20 tokens sent here by mistake"
			},
			"initiateOwnershipTransfer(address)": {
				"notice": "Initiate ownership transfer to a new account (`newOwner` cannot accept until this is called)"
			},
			"mint(address,uint256)": {
				"notice": "Mint up to the cap; only the owner can call"
			},
			"pendingOwner()": {
				"notice": "View the address pending to become owner"
			}
		},
		"notice": "ERC20 wrapper for R5 coin with a fixed cap, burn, and EIP‑2612 permit",
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@CAP_3770": {
				"entryPoint": 3515,
				"id": 3770,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@DOMAIN_SEPARATOR_1166": {
				"entryPoint": 1367,
				"id": 1166,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Name_2485": {
				"entryPoint": 4924,
				"id": 2485,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Version_2497": {
				"entryPoint": 4983,
				"id": 2497,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_approve_780": {
				"entryPoint": 3669,
				"id": 780,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_approve_840": {
				"entryPoint": 5196,
				"id": 840,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@_buildDomainSeparator_2415": {
				"entryPoint": 6196,
				"id": 2415,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_burn_762": {
				"entryPoint": 6345,
				"id": 762,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_checkOwner_84": {
				"entryPoint": 4256,
				"id": 84,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_domainSeparatorV4_2394": {
				"entryPoint": 4074,
				"id": 2394,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_hashTypedDataV4_2431": {
				"entryPoint": 5125,
				"id": 2431,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_mint_729": {
				"entryPoint": 4470,
				"id": 729,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_msgSender_1241": {
				"entryPoint": 3662,
				"id": 1241,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_nonReentrantAfter_362": {
				"entryPoint": 4597,
				"id": 362,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_nonReentrantBefore_354": {
				"entryPoint": 4391,
				"id": 354,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_spendAllowance_888": {
				"entryPoint": 3687,
				"id": 888,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_throwError_2270": {
				"entryPoint": 6940,
				"id": 2270,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_transferOwnership_146": {
				"entryPoint": 4627,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_transfer_619": {
				"entryPoint": 3834,
				"id": 619,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_696": {
				"entryPoint": 5659,
				"id": 696,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_useNonce_1301": {
				"entryPoint": 5042,
				"id": 1301,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@acceptOwnership_3884": {
				"entryPoint": 1778,
				"id": 3884,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@allowance_516": {
				"entryPoint": 3107,
				"id": 516,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@approve_540": {
				"entryPoint": 1270,
				"id": 540,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@balanceOf_475": {
				"entryPoint": 1690,
				"id": 475,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@burnFrom_1012": {
				"entryPoint": 4822,
				"id": 1012,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@burnFrom_3959": {
				"entryPoint": 2008,
				"id": 3959,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@burn_3937": {
				"entryPoint": 1593,
				"id": 3937,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@burn_991": {
				"entryPoint": 4607,
				"id": 991,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@byteLength_1445": {
				"entryPoint": 7408,
				"id": 1445,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@decimals_453": {
				"entryPoint": 1359,
				"id": 453,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@eip712Domain_2473": {
				"entryPoint": 2117,
				"id": 2473,
				"parameterSlots": 0,
				"returnSlots": 7
			},
			"@emergencyRecoverERC20_3989": {
				"entryPoint": 3277,
				"id": 3989,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@initiateOwnershipTransfer_3856": {
				"entryPoint": 2500,
				"id": 3856,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@mint_3917": {
				"entryPoint": 1381,
				"id": 3917,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@name_435": {
				"entryPoint": 1126,
				"id": 435,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@nonces_1156": {
				"entryPoint": 2100,
				"id": 1156,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@nonces_1286": {
				"entryPoint": 4854,
				"id": 1286,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@owner_67": {
				"entryPoint": 2282,
				"id": 67,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@pendingOwner_3827": {
				"entryPoint": 3237,
				"id": 3827,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@permit_1139": {
				"entryPoint": 2782,
				"id": 1139,
				"parameterSlots": 7,
				"returnSlots": 0
			},
			"@recover_2221": {
				"entryPoint": 5150,
				"id": 2221,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"@renounceOwnership_98": {
				"entryPoint": 1759,
				"id": 98,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@symbol_444": {
				"entryPoint": 2322,
				"id": 444,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@toStringWithFallback_1512": {
				"entryPoint": 6472,
				"id": 1512,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toString_1413": {
				"entryPoint": 7294,
				"id": 1413,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toTypedDataHash_2583": {
				"entryPoint": 6645,
				"id": 2583,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@totalSupply_462": {
				"entryPoint": 1304,
				"id": 462,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@transferFrom_572": {
				"entryPoint": 1313,
				"id": 572,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@transferOwnership_126": {
				"entryPoint": 3530,
				"id": 126,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@transfer_499": {
				"entryPoint": 2466,
				"id": 499,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@tryRecover_2185": {
				"entryPoint": 6709,
				"id": 2185,
				"parameterSlots": 4,
				"returnSlots": 3
			},
			"abi_decode_t_address": {
				"entryPoint": 7704,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_bool_fromMemory": {
				"entryPoint": 9865,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_bytes32": {
				"entryPoint": 8670,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_contract$_IERC20_$967": {
				"entryPoint": 8948,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256": {
				"entryPoint": 7755,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint8": {
				"entryPoint": 8628,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 8152,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_address": {
				"entryPoint": 8847,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_addresst_uint256": {
				"entryPoint": 7928,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
				"entryPoint": 8690,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 7
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 7775,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_bool_fromMemory": {
				"entryPoint": 9885,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_contract$_IERC20_$967t_addresst_uint256": {
				"entryPoint": 8968,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_uint256": {
				"entryPoint": 8109,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
				"entryPoint": 8324,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 8253,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
				"entryPoint": 8359,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_bool_to_t_bool_fromStack": {
				"entryPoint": 7848,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_bytes1_to_t_bytes1_fromStack": {
				"entryPoint": 8238,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
				"entryPoint": 8069,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7542,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 9277,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 9606,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 9419,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 10021,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256": {
				"entryPoint": 8309,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 7888,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_uint8_to_t_uint8_fromStack": {
				"entryPoint": 8020,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 8581,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
				"entryPoint": 9765,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
				"entryPoint": 9804,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": 9928,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
				"entryPoint": 7863,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
				"entryPoint": 8451,
				"id": null,
				"parameterSlots": 8,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
				"entryPoint": 8084,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": 9670,
				"id": null,
				"parameterSlots": 7,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": 10085,
				"id": null,
				"parameterSlots": 6,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
				"entryPoint": 10166,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7598,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 9311,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 9640,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 9453,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 10055,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": 7903,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
				"entryPoint": 8035,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 8294,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 8268,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 7486,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 8347,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
				"entryPoint": 8278,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 7496,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 9186,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"cleanup_t_address": {
				"entryPoint": 7665,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_bool": {
				"entryPoint": 7837,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_bytes1": {
				"entryPoint": 8195,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_bytes32": {
				"entryPoint": 8060,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_contract$_IERC20_$967": {
				"entryPoint": 8909,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 7634,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 7724,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint8": {
				"entryPoint": 8008,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_memory_to_memory_with_cleanup": {
				"entryPoint": 7512,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 9093,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 9141,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x21": {
				"entryPoint": 10233,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x22": {
				"entryPoint": 9048,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 9483,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 7630,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"round_up_to_mul_of_32": {
				"entryPoint": 7526,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"store_literal_in_memory_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a": {
				"entryPoint": 9237,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15": {
				"entryPoint": 9528,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4": {
				"entryPoint": 9341,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619": {
				"entryPoint": 9981,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 7682,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_bool": {
				"entryPoint": 9843,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_bytes32": {
				"entryPoint": 8648,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_contract$_IERC20_$967": {
				"entryPoint": 8926,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_uint256": {
				"entryPoint": 7733,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_uint8": {
				"entryPoint": 8606,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:21679:21",
					"nodeType": "YulBlock",
					"src": "0:21679:21",
					"statements": [
						{
							"body": {
								"nativeSrc": "66:40:21",
								"nodeType": "YulBlock",
								"src": "66:40:21",
								"statements": [
									{
										"nativeSrc": "77:22:21",
										"nodeType": "YulAssignment",
										"src": "77:22:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "93:5:21",
													"nodeType": "YulIdentifier",
													"src": "93:5:21"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "87:5:21",
												"nodeType": "YulIdentifier",
												"src": "87:5:21"
											},
											"nativeSrc": "87:12:21",
											"nodeType": "YulFunctionCall",
											"src": "87:12:21"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "77:6:21",
												"nodeType": "YulIdentifier",
												"src": "77:6:21"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nativeSrc": "7:99:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "49:5:21",
									"nodeType": "YulTypedName",
									"src": "49:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "59:6:21",
									"nodeType": "YulTypedName",
									"src": "59:6:21",
									"type": ""
								}
							],
							"src": "7:99:21"
						},
						{
							"body": {
								"nativeSrc": "208:73:21",
								"nodeType": "YulBlock",
								"src": "208:73:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "225:3:21",
													"nodeType": "YulIdentifier",
													"src": "225:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "230:6:21",
													"nodeType": "YulIdentifier",
													"src": "230:6:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "218:6:21",
												"nodeType": "YulIdentifier",
												"src": "218:6:21"
											},
											"nativeSrc": "218:19:21",
											"nodeType": "YulFunctionCall",
											"src": "218:19:21"
										},
										"nativeSrc": "218:19:21",
										"nodeType": "YulExpressionStatement",
										"src": "218:19:21"
									},
									{
										"nativeSrc": "246:29:21",
										"nodeType": "YulAssignment",
										"src": "246:29:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "265:3:21",
													"nodeType": "YulIdentifier",
													"src": "265:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "270:4:21",
													"nodeType": "YulLiteral",
													"src": "270:4:21",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "261:3:21",
												"nodeType": "YulIdentifier",
												"src": "261:3:21"
											},
											"nativeSrc": "261:14:21",
											"nodeType": "YulFunctionCall",
											"src": "261:14:21"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "246:11:21",
												"nodeType": "YulIdentifier",
												"src": "246:11:21"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nativeSrc": "112:169:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "180:3:21",
									"nodeType": "YulTypedName",
									"src": "180:3:21",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "185:6:21",
									"nodeType": "YulTypedName",
									"src": "185:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "196:11:21",
									"nodeType": "YulTypedName",
									"src": "196:11:21",
									"type": ""
								}
							],
							"src": "112:169:21"
						},
						{
							"body": {
								"nativeSrc": "349:77:21",
								"nodeType": "YulBlock",
								"src": "349:77:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "dst",
													"nativeSrc": "366:3:21",
													"nodeType": "YulIdentifier",
													"src": "366:3:21"
												},
												{
													"name": "src",
													"nativeSrc": "371:3:21",
													"nodeType": "YulIdentifier",
													"src": "371:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "376:6:21",
													"nodeType": "YulIdentifier",
													"src": "376:6:21"
												}
											],
											"functionName": {
												"name": "mcopy",
												"nativeSrc": "360:5:21",
												"nodeType": "YulIdentifier",
												"src": "360:5:21"
											},
											"nativeSrc": "360:23:21",
											"nodeType": "YulFunctionCall",
											"src": "360:23:21"
										},
										"nativeSrc": "360:23:21",
										"nodeType": "YulExpressionStatement",
										"src": "360:23:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nativeSrc": "403:3:21",
															"nodeType": "YulIdentifier",
															"src": "403:3:21"
														},
														{
															"name": "length",
															"nativeSrc": "408:6:21",
															"nodeType": "YulIdentifier",
															"src": "408:6:21"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "399:3:21",
														"nodeType": "YulIdentifier",
														"src": "399:3:21"
													},
													"nativeSrc": "399:16:21",
													"nodeType": "YulFunctionCall",
													"src": "399:16:21"
												},
												{
													"kind": "number",
													"nativeSrc": "417:1:21",
													"nodeType": "YulLiteral",
													"src": "417:1:21",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "392:6:21",
												"nodeType": "YulIdentifier",
												"src": "392:6:21"
											},
											"nativeSrc": "392:27:21",
											"nodeType": "YulFunctionCall",
											"src": "392:27:21"
										},
										"nativeSrc": "392:27:21",
										"nodeType": "YulExpressionStatement",
										"src": "392:27:21"
									}
								]
							},
							"name": "copy_memory_to_memory_with_cleanup",
							"nativeSrc": "287:139:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nativeSrc": "331:3:21",
									"nodeType": "YulTypedName",
									"src": "331:3:21",
									"type": ""
								},
								{
									"name": "dst",
									"nativeSrc": "336:3:21",
									"nodeType": "YulTypedName",
									"src": "336:3:21",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "341:6:21",
									"nodeType": "YulTypedName",
									"src": "341:6:21",
									"type": ""
								}
							],
							"src": "287:139:21"
						},
						{
							"body": {
								"nativeSrc": "480:54:21",
								"nodeType": "YulBlock",
								"src": "480:54:21",
								"statements": [
									{
										"nativeSrc": "490:38:21",
										"nodeType": "YulAssignment",
										"src": "490:38:21",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "508:5:21",
															"nodeType": "YulIdentifier",
															"src": "508:5:21"
														},
														{
															"kind": "number",
															"nativeSrc": "515:2:21",
															"nodeType": "YulLiteral",
															"src": "515:2:21",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "504:3:21",
														"nodeType": "YulIdentifier",
														"src": "504:3:21"
													},
													"nativeSrc": "504:14:21",
													"nodeType": "YulFunctionCall",
													"src": "504:14:21"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "524:2:21",
															"nodeType": "YulLiteral",
															"src": "524:2:21",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "not",
														"nativeSrc": "520:3:21",
														"nodeType": "YulIdentifier",
														"src": "520:3:21"
													},
													"nativeSrc": "520:7:21",
													"nodeType": "YulFunctionCall",
													"src": "520:7:21"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "500:3:21",
												"nodeType": "YulIdentifier",
												"src": "500:3:21"
											},
											"nativeSrc": "500:28:21",
											"nodeType": "YulFunctionCall",
											"src": "500:28:21"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "490:6:21",
												"nodeType": "YulIdentifier",
												"src": "490:6:21"
											}
										]
									}
								]
							},
							"name": "round_up_to_mul_of_32",
							"nativeSrc": "432:102:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "463:5:21",
									"nodeType": "YulTypedName",
									"src": "463:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "473:6:21",
									"nodeType": "YulTypedName",
									"src": "473:6:21",
									"type": ""
								}
							],
							"src": "432:102:21"
						},
						{
							"body": {
								"nativeSrc": "632:285:21",
								"nodeType": "YulBlock",
								"src": "632:285:21",
								"statements": [
									{
										"nativeSrc": "642:53:21",
										"nodeType": "YulVariableDeclaration",
										"src": "642:53:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "689:5:21",
													"nodeType": "YulIdentifier",
													"src": "689:5:21"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "656:32:21",
												"nodeType": "YulIdentifier",
												"src": "656:32:21"
											},
											"nativeSrc": "656:39:21",
											"nodeType": "YulFunctionCall",
											"src": "656:39:21"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "646:6:21",
												"nodeType": "YulTypedName",
												"src": "646:6:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "704:78:21",
										"nodeType": "YulAssignment",
										"src": "704:78:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "770:3:21",
													"nodeType": "YulIdentifier",
													"src": "770:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "775:6:21",
													"nodeType": "YulIdentifier",
													"src": "775:6:21"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "711:58:21",
												"nodeType": "YulIdentifier",
												"src": "711:58:21"
											},
											"nativeSrc": "711:71:21",
											"nodeType": "YulFunctionCall",
											"src": "711:71:21"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "704:3:21",
												"nodeType": "YulIdentifier",
												"src": "704:3:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "830:5:21",
															"nodeType": "YulIdentifier",
															"src": "830:5:21"
														},
														{
															"kind": "number",
															"nativeSrc": "837:4:21",
															"nodeType": "YulLiteral",
															"src": "837:4:21",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "826:3:21",
														"nodeType": "YulIdentifier",
														"src": "826:3:21"
													},
													"nativeSrc": "826:16:21",
													"nodeType": "YulFunctionCall",
													"src": "826:16:21"
												},
												{
													"name": "pos",
													"nativeSrc": "844:3:21",
													"nodeType": "YulIdentifier",
													"src": "844:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "849:6:21",
													"nodeType": "YulIdentifier",
													"src": "849:6:21"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "791:34:21",
												"nodeType": "YulIdentifier",
												"src": "791:34:21"
											},
											"nativeSrc": "791:65:21",
											"nodeType": "YulFunctionCall",
											"src": "791:65:21"
										},
										"nativeSrc": "791:65:21",
										"nodeType": "YulExpressionStatement",
										"src": "791:65:21"
									},
									{
										"nativeSrc": "865:46:21",
										"nodeType": "YulAssignment",
										"src": "865:46:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "876:3:21",
													"nodeType": "YulIdentifier",
													"src": "876:3:21"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "903:6:21",
															"nodeType": "YulIdentifier",
															"src": "903:6:21"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nativeSrc": "881:21:21",
														"nodeType": "YulIdentifier",
														"src": "881:21:21"
													},
													"nativeSrc": "881:29:21",
													"nodeType": "YulFunctionCall",
													"src": "881:29:21"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "872:3:21",
												"nodeType": "YulIdentifier",
												"src": "872:3:21"
											},
											"nativeSrc": "872:39:21",
											"nodeType": "YulFunctionCall",
											"src": "872:39:21"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "865:3:21",
												"nodeType": "YulIdentifier",
												"src": "865:3:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "540:377:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "613:5:21",
									"nodeType": "YulTypedName",
									"src": "613:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "620:3:21",
									"nodeType": "YulTypedName",
									"src": "620:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "628:3:21",
									"nodeType": "YulTypedName",
									"src": "628:3:21",
									"type": ""
								}
							],
							"src": "540:377:21"
						},
						{
							"body": {
								"nativeSrc": "1041:195:21",
								"nodeType": "YulBlock",
								"src": "1041:195:21",
								"statements": [
									{
										"nativeSrc": "1051:26:21",
										"nodeType": "YulAssignment",
										"src": "1051:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1063:9:21",
													"nodeType": "YulIdentifier",
													"src": "1063:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "1074:2:21",
													"nodeType": "YulLiteral",
													"src": "1074:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1059:3:21",
												"nodeType": "YulIdentifier",
												"src": "1059:3:21"
											},
											"nativeSrc": "1059:18:21",
											"nodeType": "YulFunctionCall",
											"src": "1059:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1051:4:21",
												"nodeType": "YulIdentifier",
												"src": "1051:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1098:9:21",
															"nodeType": "YulIdentifier",
															"src": "1098:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "1109:1:21",
															"nodeType": "YulLiteral",
															"src": "1109:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1094:3:21",
														"nodeType": "YulIdentifier",
														"src": "1094:3:21"
													},
													"nativeSrc": "1094:17:21",
													"nodeType": "YulFunctionCall",
													"src": "1094:17:21"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "1117:4:21",
															"nodeType": "YulIdentifier",
															"src": "1117:4:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "1123:9:21",
															"nodeType": "YulIdentifier",
															"src": "1123:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1113:3:21",
														"nodeType": "YulIdentifier",
														"src": "1113:3:21"
													},
													"nativeSrc": "1113:20:21",
													"nodeType": "YulFunctionCall",
													"src": "1113:20:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1087:6:21",
												"nodeType": "YulIdentifier",
												"src": "1087:6:21"
											},
											"nativeSrc": "1087:47:21",
											"nodeType": "YulFunctionCall",
											"src": "1087:47:21"
										},
										"nativeSrc": "1087:47:21",
										"nodeType": "YulExpressionStatement",
										"src": "1087:47:21"
									},
									{
										"nativeSrc": "1143:86:21",
										"nodeType": "YulAssignment",
										"src": "1143:86:21",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "1215:6:21",
													"nodeType": "YulIdentifier",
													"src": "1215:6:21"
												},
												{
													"name": "tail",
													"nativeSrc": "1224:4:21",
													"nodeType": "YulIdentifier",
													"src": "1224:4:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "1151:63:21",
												"nodeType": "YulIdentifier",
												"src": "1151:63:21"
											},
											"nativeSrc": "1151:78:21",
											"nodeType": "YulFunctionCall",
											"src": "1151:78:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1143:4:21",
												"nodeType": "YulIdentifier",
												"src": "1143:4:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "923:313:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1013:9:21",
									"nodeType": "YulTypedName",
									"src": "1013:9:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1025:6:21",
									"nodeType": "YulTypedName",
									"src": "1025:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1036:4:21",
									"nodeType": "YulTypedName",
									"src": "1036:4:21",
									"type": ""
								}
							],
							"src": "923:313:21"
						},
						{
							"body": {
								"nativeSrc": "1282:35:21",
								"nodeType": "YulBlock",
								"src": "1282:35:21",
								"statements": [
									{
										"nativeSrc": "1292:19:21",
										"nodeType": "YulAssignment",
										"src": "1292:19:21",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1308:2:21",
													"nodeType": "YulLiteral",
													"src": "1308:2:21",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "1302:5:21",
												"nodeType": "YulIdentifier",
												"src": "1302:5:21"
											},
											"nativeSrc": "1302:9:21",
											"nodeType": "YulFunctionCall",
											"src": "1302:9:21"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nativeSrc": "1292:6:21",
												"nodeType": "YulIdentifier",
												"src": "1292:6:21"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nativeSrc": "1242:75:21",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nativeSrc": "1275:6:21",
									"nodeType": "YulTypedName",
									"src": "1275:6:21",
									"type": ""
								}
							],
							"src": "1242:75:21"
						},
						{
							"body": {
								"nativeSrc": "1412:28:21",
								"nodeType": "YulBlock",
								"src": "1412:28:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1429:1:21",
													"nodeType": "YulLiteral",
													"src": "1429:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "1432:1:21",
													"nodeType": "YulLiteral",
													"src": "1432:1:21",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "1422:6:21",
												"nodeType": "YulIdentifier",
												"src": "1422:6:21"
											},
											"nativeSrc": "1422:12:21",
											"nodeType": "YulFunctionCall",
											"src": "1422:12:21"
										},
										"nativeSrc": "1422:12:21",
										"nodeType": "YulExpressionStatement",
										"src": "1422:12:21"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nativeSrc": "1323:117:21",
							"nodeType": "YulFunctionDefinition",
							"src": "1323:117:21"
						},
						{
							"body": {
								"nativeSrc": "1535:28:21",
								"nodeType": "YulBlock",
								"src": "1535:28:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1552:1:21",
													"nodeType": "YulLiteral",
													"src": "1552:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "1555:1:21",
													"nodeType": "YulLiteral",
													"src": "1555:1:21",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "1545:6:21",
												"nodeType": "YulIdentifier",
												"src": "1545:6:21"
											},
											"nativeSrc": "1545:12:21",
											"nodeType": "YulFunctionCall",
											"src": "1545:12:21"
										},
										"nativeSrc": "1545:12:21",
										"nodeType": "YulExpressionStatement",
										"src": "1545:12:21"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nativeSrc": "1446:117:21",
							"nodeType": "YulFunctionDefinition",
							"src": "1446:117:21"
						},
						{
							"body": {
								"nativeSrc": "1614:81:21",
								"nodeType": "YulBlock",
								"src": "1614:81:21",
								"statements": [
									{
										"nativeSrc": "1624:65:21",
										"nodeType": "YulAssignment",
										"src": "1624:65:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1639:5:21",
													"nodeType": "YulIdentifier",
													"src": "1639:5:21"
												},
												{
													"kind": "number",
													"nativeSrc": "1646:42:21",
													"nodeType": "YulLiteral",
													"src": "1646:42:21",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "1635:3:21",
												"nodeType": "YulIdentifier",
												"src": "1635:3:21"
											},
											"nativeSrc": "1635:54:21",
											"nodeType": "YulFunctionCall",
											"src": "1635:54:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1624:7:21",
												"nodeType": "YulIdentifier",
												"src": "1624:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "1569:126:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1596:5:21",
									"nodeType": "YulTypedName",
									"src": "1596:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1606:7:21",
									"nodeType": "YulTypedName",
									"src": "1606:7:21",
									"type": ""
								}
							],
							"src": "1569:126:21"
						},
						{
							"body": {
								"nativeSrc": "1746:51:21",
								"nodeType": "YulBlock",
								"src": "1746:51:21",
								"statements": [
									{
										"nativeSrc": "1756:35:21",
										"nodeType": "YulAssignment",
										"src": "1756:35:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1785:5:21",
													"nodeType": "YulIdentifier",
													"src": "1785:5:21"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "1767:17:21",
												"nodeType": "YulIdentifier",
												"src": "1767:17:21"
											},
											"nativeSrc": "1767:24:21",
											"nodeType": "YulFunctionCall",
											"src": "1767:24:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1756:7:21",
												"nodeType": "YulIdentifier",
												"src": "1756:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "1701:96:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1728:5:21",
									"nodeType": "YulTypedName",
									"src": "1728:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1738:7:21",
									"nodeType": "YulTypedName",
									"src": "1738:7:21",
									"type": ""
								}
							],
							"src": "1701:96:21"
						},
						{
							"body": {
								"nativeSrc": "1846:79:21",
								"nodeType": "YulBlock",
								"src": "1846:79:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "1903:16:21",
											"nodeType": "YulBlock",
											"src": "1903:16:21",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1912:1:21",
																"nodeType": "YulLiteral",
																"src": "1912:1:21",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1915:1:21",
																"nodeType": "YulLiteral",
																"src": "1915:1:21",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1905:6:21",
															"nodeType": "YulIdentifier",
															"src": "1905:6:21"
														},
														"nativeSrc": "1905:12:21",
														"nodeType": "YulFunctionCall",
														"src": "1905:12:21"
													},
													"nativeSrc": "1905:12:21",
													"nodeType": "YulExpressionStatement",
													"src": "1905:12:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1869:5:21",
															"nodeType": "YulIdentifier",
															"src": "1869:5:21"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "1894:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "1894:5:21"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nativeSrc": "1876:17:21",
																"nodeType": "YulIdentifier",
																"src": "1876:17:21"
															},
															"nativeSrc": "1876:24:21",
															"nodeType": "YulFunctionCall",
															"src": "1876:24:21"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "1866:2:21",
														"nodeType": "YulIdentifier",
														"src": "1866:2:21"
													},
													"nativeSrc": "1866:35:21",
													"nodeType": "YulFunctionCall",
													"src": "1866:35:21"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "1859:6:21",
												"nodeType": "YulIdentifier",
												"src": "1859:6:21"
											},
											"nativeSrc": "1859:43:21",
											"nodeType": "YulFunctionCall",
											"src": "1859:43:21"
										},
										"nativeSrc": "1856:63:21",
										"nodeType": "YulIf",
										"src": "1856:63:21"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nativeSrc": "1803:122:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1839:5:21",
									"nodeType": "YulTypedName",
									"src": "1839:5:21",
									"type": ""
								}
							],
							"src": "1803:122:21"
						},
						{
							"body": {
								"nativeSrc": "1983:87:21",
								"nodeType": "YulBlock",
								"src": "1983:87:21",
								"statements": [
									{
										"nativeSrc": "1993:29:21",
										"nodeType": "YulAssignment",
										"src": "1993:29:21",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "2015:6:21",
													"nodeType": "YulIdentifier",
													"src": "2015:6:21"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "2002:12:21",
												"nodeType": "YulIdentifier",
												"src": "2002:12:21"
											},
											"nativeSrc": "2002:20:21",
											"nodeType": "YulFunctionCall",
											"src": "2002:20:21"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "1993:5:21",
												"nodeType": "YulIdentifier",
												"src": "1993:5:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2058:5:21",
													"nodeType": "YulIdentifier",
													"src": "2058:5:21"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nativeSrc": "2031:26:21",
												"nodeType": "YulIdentifier",
												"src": "2031:26:21"
											},
											"nativeSrc": "2031:33:21",
											"nodeType": "YulFunctionCall",
											"src": "2031:33:21"
										},
										"nativeSrc": "2031:33:21",
										"nodeType": "YulExpressionStatement",
										"src": "2031:33:21"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nativeSrc": "1931:139:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "1961:6:21",
									"nodeType": "YulTypedName",
									"src": "1961:6:21",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "1969:3:21",
									"nodeType": "YulTypedName",
									"src": "1969:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "1977:5:21",
									"nodeType": "YulTypedName",
									"src": "1977:5:21",
									"type": ""
								}
							],
							"src": "1931:139:21"
						},
						{
							"body": {
								"nativeSrc": "2121:32:21",
								"nodeType": "YulBlock",
								"src": "2121:32:21",
								"statements": [
									{
										"nativeSrc": "2131:16:21",
										"nodeType": "YulAssignment",
										"src": "2131:16:21",
										"value": {
											"name": "value",
											"nativeSrc": "2142:5:21",
											"nodeType": "YulIdentifier",
											"src": "2142:5:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "2131:7:21",
												"nodeType": "YulIdentifier",
												"src": "2131:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nativeSrc": "2076:77:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2103:5:21",
									"nodeType": "YulTypedName",
									"src": "2103:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "2113:7:21",
									"nodeType": "YulTypedName",
									"src": "2113:7:21",
									"type": ""
								}
							],
							"src": "2076:77:21"
						},
						{
							"body": {
								"nativeSrc": "2202:79:21",
								"nodeType": "YulBlock",
								"src": "2202:79:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "2259:16:21",
											"nodeType": "YulBlock",
											"src": "2259:16:21",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "2268:1:21",
																"nodeType": "YulLiteral",
																"src": "2268:1:21",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "2271:1:21",
																"nodeType": "YulLiteral",
																"src": "2271:1:21",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "2261:6:21",
															"nodeType": "YulIdentifier",
															"src": "2261:6:21"
														},
														"nativeSrc": "2261:12:21",
														"nodeType": "YulFunctionCall",
														"src": "2261:12:21"
													},
													"nativeSrc": "2261:12:21",
													"nodeType": "YulExpressionStatement",
													"src": "2261:12:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "2225:5:21",
															"nodeType": "YulIdentifier",
															"src": "2225:5:21"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "2250:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "2250:5:21"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nativeSrc": "2232:17:21",
																"nodeType": "YulIdentifier",
																"src": "2232:17:21"
															},
															"nativeSrc": "2232:24:21",
															"nodeType": "YulFunctionCall",
															"src": "2232:24:21"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "2222:2:21",
														"nodeType": "YulIdentifier",
														"src": "2222:2:21"
													},
													"nativeSrc": "2222:35:21",
													"nodeType": "YulFunctionCall",
													"src": "2222:35:21"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "2215:6:21",
												"nodeType": "YulIdentifier",
												"src": "2215:6:21"
											},
											"nativeSrc": "2215:43:21",
											"nodeType": "YulFunctionCall",
											"src": "2215:43:21"
										},
										"nativeSrc": "2212:63:21",
										"nodeType": "YulIf",
										"src": "2212:63:21"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nativeSrc": "2159:122:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2195:5:21",
									"nodeType": "YulTypedName",
									"src": "2195:5:21",
									"type": ""
								}
							],
							"src": "2159:122:21"
						},
						{
							"body": {
								"nativeSrc": "2339:87:21",
								"nodeType": "YulBlock",
								"src": "2339:87:21",
								"statements": [
									{
										"nativeSrc": "2349:29:21",
										"nodeType": "YulAssignment",
										"src": "2349:29:21",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "2371:6:21",
													"nodeType": "YulIdentifier",
													"src": "2371:6:21"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "2358:12:21",
												"nodeType": "YulIdentifier",
												"src": "2358:12:21"
											},
											"nativeSrc": "2358:20:21",
											"nodeType": "YulFunctionCall",
											"src": "2358:20:21"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "2349:5:21",
												"nodeType": "YulIdentifier",
												"src": "2349:5:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2414:5:21",
													"nodeType": "YulIdentifier",
													"src": "2414:5:21"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2387:26:21",
												"nodeType": "YulIdentifier",
												"src": "2387:26:21"
											},
											"nativeSrc": "2387:33:21",
											"nodeType": "YulFunctionCall",
											"src": "2387:33:21"
										},
										"nativeSrc": "2387:33:21",
										"nodeType": "YulExpressionStatement",
										"src": "2387:33:21"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nativeSrc": "2287:139:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "2317:6:21",
									"nodeType": "YulTypedName",
									"src": "2317:6:21",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "2325:3:21",
									"nodeType": "YulTypedName",
									"src": "2325:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "2333:5:21",
									"nodeType": "YulTypedName",
									"src": "2333:5:21",
									"type": ""
								}
							],
							"src": "2287:139:21"
						},
						{
							"body": {
								"nativeSrc": "2515:391:21",
								"nodeType": "YulBlock",
								"src": "2515:391:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "2561:83:21",
											"nodeType": "YulBlock",
											"src": "2561:83:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "2563:77:21",
															"nodeType": "YulIdentifier",
															"src": "2563:77:21"
														},
														"nativeSrc": "2563:79:21",
														"nodeType": "YulFunctionCall",
														"src": "2563:79:21"
													},
													"nativeSrc": "2563:79:21",
													"nodeType": "YulExpressionStatement",
													"src": "2563:79:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "2536:7:21",
															"nodeType": "YulIdentifier",
															"src": "2536:7:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "2545:9:21",
															"nodeType": "YulIdentifier",
															"src": "2545:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2532:3:21",
														"nodeType": "YulIdentifier",
														"src": "2532:3:21"
													},
													"nativeSrc": "2532:23:21",
													"nodeType": "YulFunctionCall",
													"src": "2532:23:21"
												},
												{
													"kind": "number",
													"nativeSrc": "2557:2:21",
													"nodeType": "YulLiteral",
													"src": "2557:2:21",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "2528:3:21",
												"nodeType": "YulIdentifier",
												"src": "2528:3:21"
											},
											"nativeSrc": "2528:32:21",
											"nodeType": "YulFunctionCall",
											"src": "2528:32:21"
										},
										"nativeSrc": "2525:119:21",
										"nodeType": "YulIf",
										"src": "2525:119:21"
									},
									{
										"nativeSrc": "2654:117:21",
										"nodeType": "YulBlock",
										"src": "2654:117:21",
										"statements": [
											{
												"nativeSrc": "2669:15:21",
												"nodeType": "YulVariableDeclaration",
												"src": "2669:15:21",
												"value": {
													"kind": "number",
													"nativeSrc": "2683:1:21",
													"nodeType": "YulLiteral",
													"src": "2683:1:21",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2673:6:21",
														"nodeType": "YulTypedName",
														"src": "2673:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2698:63:21",
												"nodeType": "YulAssignment",
												"src": "2698:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2733:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "2733:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2744:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "2744:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2729:3:21",
																"nodeType": "YulIdentifier",
																"src": "2729:3:21"
															},
															"nativeSrc": "2729:22:21",
															"nodeType": "YulFunctionCall",
															"src": "2729:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2753:7:21",
															"nodeType": "YulIdentifier",
															"src": "2753:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "2708:20:21",
														"nodeType": "YulIdentifier",
														"src": "2708:20:21"
													},
													"nativeSrc": "2708:53:21",
													"nodeType": "YulFunctionCall",
													"src": "2708:53:21"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "2698:6:21",
														"nodeType": "YulIdentifier",
														"src": "2698:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "2781:118:21",
										"nodeType": "YulBlock",
										"src": "2781:118:21",
										"statements": [
											{
												"nativeSrc": "2796:16:21",
												"nodeType": "YulVariableDeclaration",
												"src": "2796:16:21",
												"value": {
													"kind": "number",
													"nativeSrc": "2810:2:21",
													"nodeType": "YulLiteral",
													"src": "2810:2:21",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2800:6:21",
														"nodeType": "YulTypedName",
														"src": "2800:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2826:63:21",
												"nodeType": "YulAssignment",
												"src": "2826:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2861:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "2861:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2872:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "2872:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2857:3:21",
																"nodeType": "YulIdentifier",
																"src": "2857:3:21"
															},
															"nativeSrc": "2857:22:21",
															"nodeType": "YulFunctionCall",
															"src": "2857:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2881:7:21",
															"nodeType": "YulIdentifier",
															"src": "2881:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "2836:20:21",
														"nodeType": "YulIdentifier",
														"src": "2836:20:21"
													},
													"nativeSrc": "2836:53:21",
													"nodeType": "YulFunctionCall",
													"src": "2836:53:21"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "2826:6:21",
														"nodeType": "YulIdentifier",
														"src": "2826:6:21"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nativeSrc": "2432:474:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2477:9:21",
									"nodeType": "YulTypedName",
									"src": "2477:9:21",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "2488:7:21",
									"nodeType": "YulTypedName",
									"src": "2488:7:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "2500:6:21",
									"nodeType": "YulTypedName",
									"src": "2500:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "2508:6:21",
									"nodeType": "YulTypedName",
									"src": "2508:6:21",
									"type": ""
								}
							],
							"src": "2432:474:21"
						},
						{
							"body": {
								"nativeSrc": "2954:48:21",
								"nodeType": "YulBlock",
								"src": "2954:48:21",
								"statements": [
									{
										"nativeSrc": "2964:32:21",
										"nodeType": "YulAssignment",
										"src": "2964:32:21",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "2989:5:21",
															"nodeType": "YulIdentifier",
															"src": "2989:5:21"
														}
													],
													"functionName": {
														"name": "iszero",
														"nativeSrc": "2982:6:21",
														"nodeType": "YulIdentifier",
														"src": "2982:6:21"
													},
													"nativeSrc": "2982:13:21",
													"nodeType": "YulFunctionCall",
													"src": "2982:13:21"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "2975:6:21",
												"nodeType": "YulIdentifier",
												"src": "2975:6:21"
											},
											"nativeSrc": "2975:21:21",
											"nodeType": "YulFunctionCall",
											"src": "2975:21:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "2964:7:21",
												"nodeType": "YulIdentifier",
												"src": "2964:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bool",
							"nativeSrc": "2912:90:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2936:5:21",
									"nodeType": "YulTypedName",
									"src": "2936:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "2946:7:21",
									"nodeType": "YulTypedName",
									"src": "2946:7:21",
									"type": ""
								}
							],
							"src": "2912:90:21"
						},
						{
							"body": {
								"nativeSrc": "3067:50:21",
								"nodeType": "YulBlock",
								"src": "3067:50:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3084:3:21",
													"nodeType": "YulIdentifier",
													"src": "3084:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "3104:5:21",
															"nodeType": "YulIdentifier",
															"src": "3104:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_bool",
														"nativeSrc": "3089:14:21",
														"nodeType": "YulIdentifier",
														"src": "3089:14:21"
													},
													"nativeSrc": "3089:21:21",
													"nodeType": "YulFunctionCall",
													"src": "3089:21:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3077:6:21",
												"nodeType": "YulIdentifier",
												"src": "3077:6:21"
											},
											"nativeSrc": "3077:34:21",
											"nodeType": "YulFunctionCall",
											"src": "3077:34:21"
										},
										"nativeSrc": "3077:34:21",
										"nodeType": "YulExpressionStatement",
										"src": "3077:34:21"
									}
								]
							},
							"name": "abi_encode_t_bool_to_t_bool_fromStack",
							"nativeSrc": "3008:109:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3055:5:21",
									"nodeType": "YulTypedName",
									"src": "3055:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "3062:3:21",
									"nodeType": "YulTypedName",
									"src": "3062:3:21",
									"type": ""
								}
							],
							"src": "3008:109:21"
						},
						{
							"body": {
								"nativeSrc": "3215:118:21",
								"nodeType": "YulBlock",
								"src": "3215:118:21",
								"statements": [
									{
										"nativeSrc": "3225:26:21",
										"nodeType": "YulAssignment",
										"src": "3225:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3237:9:21",
													"nodeType": "YulIdentifier",
													"src": "3237:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "3248:2:21",
													"nodeType": "YulLiteral",
													"src": "3248:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3233:3:21",
												"nodeType": "YulIdentifier",
												"src": "3233:3:21"
											},
											"nativeSrc": "3233:18:21",
											"nodeType": "YulFunctionCall",
											"src": "3233:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3225:4:21",
												"nodeType": "YulIdentifier",
												"src": "3225:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "3299:6:21",
													"nodeType": "YulIdentifier",
													"src": "3299:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3312:9:21",
															"nodeType": "YulIdentifier",
															"src": "3312:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "3323:1:21",
															"nodeType": "YulLiteral",
															"src": "3323:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3308:3:21",
														"nodeType": "YulIdentifier",
														"src": "3308:3:21"
													},
													"nativeSrc": "3308:17:21",
													"nodeType": "YulFunctionCall",
													"src": "3308:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3261:37:21",
												"nodeType": "YulIdentifier",
												"src": "3261:37:21"
											},
											"nativeSrc": "3261:65:21",
											"nodeType": "YulFunctionCall",
											"src": "3261:65:21"
										},
										"nativeSrc": "3261:65:21",
										"nodeType": "YulExpressionStatement",
										"src": "3261:65:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nativeSrc": "3123:210:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3187:9:21",
									"nodeType": "YulTypedName",
									"src": "3187:9:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "3199:6:21",
									"nodeType": "YulTypedName",
									"src": "3199:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "3210:4:21",
									"nodeType": "YulTypedName",
									"src": "3210:4:21",
									"type": ""
								}
							],
							"src": "3123:210:21"
						},
						{
							"body": {
								"nativeSrc": "3404:53:21",
								"nodeType": "YulBlock",
								"src": "3404:53:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3421:3:21",
													"nodeType": "YulIdentifier",
													"src": "3421:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "3444:5:21",
															"nodeType": "YulIdentifier",
															"src": "3444:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nativeSrc": "3426:17:21",
														"nodeType": "YulIdentifier",
														"src": "3426:17:21"
													},
													"nativeSrc": "3426:24:21",
													"nodeType": "YulFunctionCall",
													"src": "3426:24:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3414:6:21",
												"nodeType": "YulIdentifier",
												"src": "3414:6:21"
											},
											"nativeSrc": "3414:37:21",
											"nodeType": "YulFunctionCall",
											"src": "3414:37:21"
										},
										"nativeSrc": "3414:37:21",
										"nodeType": "YulExpressionStatement",
										"src": "3414:37:21"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nativeSrc": "3339:118:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3392:5:21",
									"nodeType": "YulTypedName",
									"src": "3392:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "3399:3:21",
									"nodeType": "YulTypedName",
									"src": "3399:3:21",
									"type": ""
								}
							],
							"src": "3339:118:21"
						},
						{
							"body": {
								"nativeSrc": "3561:124:21",
								"nodeType": "YulBlock",
								"src": "3561:124:21",
								"statements": [
									{
										"nativeSrc": "3571:26:21",
										"nodeType": "YulAssignment",
										"src": "3571:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3583:9:21",
													"nodeType": "YulIdentifier",
													"src": "3583:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "3594:2:21",
													"nodeType": "YulLiteral",
													"src": "3594:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3579:3:21",
												"nodeType": "YulIdentifier",
												"src": "3579:3:21"
											},
											"nativeSrc": "3579:18:21",
											"nodeType": "YulFunctionCall",
											"src": "3579:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3571:4:21",
												"nodeType": "YulIdentifier",
												"src": "3571:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "3651:6:21",
													"nodeType": "YulIdentifier",
													"src": "3651:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3664:9:21",
															"nodeType": "YulIdentifier",
															"src": "3664:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "3675:1:21",
															"nodeType": "YulLiteral",
															"src": "3675:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3660:3:21",
														"nodeType": "YulIdentifier",
														"src": "3660:3:21"
													},
													"nativeSrc": "3660:17:21",
													"nodeType": "YulFunctionCall",
													"src": "3660:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "3607:43:21",
												"nodeType": "YulIdentifier",
												"src": "3607:43:21"
											},
											"nativeSrc": "3607:71:21",
											"nodeType": "YulFunctionCall",
											"src": "3607:71:21"
										},
										"nativeSrc": "3607:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "3607:71:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "3463:222:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3533:9:21",
									"nodeType": "YulTypedName",
									"src": "3533:9:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "3545:6:21",
									"nodeType": "YulTypedName",
									"src": "3545:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "3556:4:21",
									"nodeType": "YulTypedName",
									"src": "3556:4:21",
									"type": ""
								}
							],
							"src": "3463:222:21"
						},
						{
							"body": {
								"nativeSrc": "3791:519:21",
								"nodeType": "YulBlock",
								"src": "3791:519:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "3837:83:21",
											"nodeType": "YulBlock",
											"src": "3837:83:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "3839:77:21",
															"nodeType": "YulIdentifier",
															"src": "3839:77:21"
														},
														"nativeSrc": "3839:79:21",
														"nodeType": "YulFunctionCall",
														"src": "3839:79:21"
													},
													"nativeSrc": "3839:79:21",
													"nodeType": "YulExpressionStatement",
													"src": "3839:79:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "3812:7:21",
															"nodeType": "YulIdentifier",
															"src": "3812:7:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "3821:9:21",
															"nodeType": "YulIdentifier",
															"src": "3821:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3808:3:21",
														"nodeType": "YulIdentifier",
														"src": "3808:3:21"
													},
													"nativeSrc": "3808:23:21",
													"nodeType": "YulFunctionCall",
													"src": "3808:23:21"
												},
												{
													"kind": "number",
													"nativeSrc": "3833:2:21",
													"nodeType": "YulLiteral",
													"src": "3833:2:21",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "3804:3:21",
												"nodeType": "YulIdentifier",
												"src": "3804:3:21"
											},
											"nativeSrc": "3804:32:21",
											"nodeType": "YulFunctionCall",
											"src": "3804:32:21"
										},
										"nativeSrc": "3801:119:21",
										"nodeType": "YulIf",
										"src": "3801:119:21"
									},
									{
										"nativeSrc": "3930:117:21",
										"nodeType": "YulBlock",
										"src": "3930:117:21",
										"statements": [
											{
												"nativeSrc": "3945:15:21",
												"nodeType": "YulVariableDeclaration",
												"src": "3945:15:21",
												"value": {
													"kind": "number",
													"nativeSrc": "3959:1:21",
													"nodeType": "YulLiteral",
													"src": "3959:1:21",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "3949:6:21",
														"nodeType": "YulTypedName",
														"src": "3949:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "3974:63:21",
												"nodeType": "YulAssignment",
												"src": "3974:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "4009:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "4009:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "4020:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "4020:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "4005:3:21",
																"nodeType": "YulIdentifier",
																"src": "4005:3:21"
															},
															"nativeSrc": "4005:22:21",
															"nodeType": "YulFunctionCall",
															"src": "4005:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "4029:7:21",
															"nodeType": "YulIdentifier",
															"src": "4029:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "3984:20:21",
														"nodeType": "YulIdentifier",
														"src": "3984:20:21"
													},
													"nativeSrc": "3984:53:21",
													"nodeType": "YulFunctionCall",
													"src": "3984:53:21"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "3974:6:21",
														"nodeType": "YulIdentifier",
														"src": "3974:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "4057:118:21",
										"nodeType": "YulBlock",
										"src": "4057:118:21",
										"statements": [
											{
												"nativeSrc": "4072:16:21",
												"nodeType": "YulVariableDeclaration",
												"src": "4072:16:21",
												"value": {
													"kind": "number",
													"nativeSrc": "4086:2:21",
													"nodeType": "YulLiteral",
													"src": "4086:2:21",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "4076:6:21",
														"nodeType": "YulTypedName",
														"src": "4076:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "4102:63:21",
												"nodeType": "YulAssignment",
												"src": "4102:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "4137:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "4137:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "4148:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "4148:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "4133:3:21",
																"nodeType": "YulIdentifier",
																"src": "4133:3:21"
															},
															"nativeSrc": "4133:22:21",
															"nodeType": "YulFunctionCall",
															"src": "4133:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "4157:7:21",
															"nodeType": "YulIdentifier",
															"src": "4157:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "4112:20:21",
														"nodeType": "YulIdentifier",
														"src": "4112:20:21"
													},
													"nativeSrc": "4112:53:21",
													"nodeType": "YulFunctionCall",
													"src": "4112:53:21"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "4102:6:21",
														"nodeType": "YulIdentifier",
														"src": "4102:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "4185:118:21",
										"nodeType": "YulBlock",
										"src": "4185:118:21",
										"statements": [
											{
												"nativeSrc": "4200:16:21",
												"nodeType": "YulVariableDeclaration",
												"src": "4200:16:21",
												"value": {
													"kind": "number",
													"nativeSrc": "4214:2:21",
													"nodeType": "YulLiteral",
													"src": "4214:2:21",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "4204:6:21",
														"nodeType": "YulTypedName",
														"src": "4204:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "4230:63:21",
												"nodeType": "YulAssignment",
												"src": "4230:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "4265:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "4265:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "4276:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "4276:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "4261:3:21",
																"nodeType": "YulIdentifier",
																"src": "4261:3:21"
															},
															"nativeSrc": "4261:22:21",
															"nodeType": "YulFunctionCall",
															"src": "4261:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "4285:7:21",
															"nodeType": "YulIdentifier",
															"src": "4285:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "4240:20:21",
														"nodeType": "YulIdentifier",
														"src": "4240:20:21"
													},
													"nativeSrc": "4240:53:21",
													"nodeType": "YulFunctionCall",
													"src": "4240:53:21"
												},
												"variableNames": [
													{
														"name": "value2",
														"nativeSrc": "4230:6:21",
														"nodeType": "YulIdentifier",
														"src": "4230:6:21"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256",
							"nativeSrc": "3691:619:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3745:9:21",
									"nodeType": "YulTypedName",
									"src": "3745:9:21",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "3756:7:21",
									"nodeType": "YulTypedName",
									"src": "3756:7:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "3768:6:21",
									"nodeType": "YulTypedName",
									"src": "3768:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "3776:6:21",
									"nodeType": "YulTypedName",
									"src": "3776:6:21",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "3784:6:21",
									"nodeType": "YulTypedName",
									"src": "3784:6:21",
									"type": ""
								}
							],
							"src": "3691:619:21"
						},
						{
							"body": {
								"nativeSrc": "4359:43:21",
								"nodeType": "YulBlock",
								"src": "4359:43:21",
								"statements": [
									{
										"nativeSrc": "4369:27:21",
										"nodeType": "YulAssignment",
										"src": "4369:27:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "4384:5:21",
													"nodeType": "YulIdentifier",
													"src": "4384:5:21"
												},
												{
													"kind": "number",
													"nativeSrc": "4391:4:21",
													"nodeType": "YulLiteral",
													"src": "4391:4:21",
													"type": "",
													"value": "0xff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "4380:3:21",
												"nodeType": "YulIdentifier",
												"src": "4380:3:21"
											},
											"nativeSrc": "4380:16:21",
											"nodeType": "YulFunctionCall",
											"src": "4380:16:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "4369:7:21",
												"nodeType": "YulIdentifier",
												"src": "4369:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint8",
							"nativeSrc": "4316:86:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4341:5:21",
									"nodeType": "YulTypedName",
									"src": "4341:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "4351:7:21",
									"nodeType": "YulTypedName",
									"src": "4351:7:21",
									"type": ""
								}
							],
							"src": "4316:86:21"
						},
						{
							"body": {
								"nativeSrc": "4469:51:21",
								"nodeType": "YulBlock",
								"src": "4469:51:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "4486:3:21",
													"nodeType": "YulIdentifier",
													"src": "4486:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "4507:5:21",
															"nodeType": "YulIdentifier",
															"src": "4507:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint8",
														"nativeSrc": "4491:15:21",
														"nodeType": "YulIdentifier",
														"src": "4491:15:21"
													},
													"nativeSrc": "4491:22:21",
													"nodeType": "YulFunctionCall",
													"src": "4491:22:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4479:6:21",
												"nodeType": "YulIdentifier",
												"src": "4479:6:21"
											},
											"nativeSrc": "4479:35:21",
											"nodeType": "YulFunctionCall",
											"src": "4479:35:21"
										},
										"nativeSrc": "4479:35:21",
										"nodeType": "YulExpressionStatement",
										"src": "4479:35:21"
									}
								]
							},
							"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
							"nativeSrc": "4408:112:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4457:5:21",
									"nodeType": "YulTypedName",
									"src": "4457:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "4464:3:21",
									"nodeType": "YulTypedName",
									"src": "4464:3:21",
									"type": ""
								}
							],
							"src": "4408:112:21"
						},
						{
							"body": {
								"nativeSrc": "4620:120:21",
								"nodeType": "YulBlock",
								"src": "4620:120:21",
								"statements": [
									{
										"nativeSrc": "4630:26:21",
										"nodeType": "YulAssignment",
										"src": "4630:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4642:9:21",
													"nodeType": "YulIdentifier",
													"src": "4642:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "4653:2:21",
													"nodeType": "YulLiteral",
													"src": "4653:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "4638:3:21",
												"nodeType": "YulIdentifier",
												"src": "4638:3:21"
											},
											"nativeSrc": "4638:18:21",
											"nodeType": "YulFunctionCall",
											"src": "4638:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4630:4:21",
												"nodeType": "YulIdentifier",
												"src": "4630:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "4706:6:21",
													"nodeType": "YulIdentifier",
													"src": "4706:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4719:9:21",
															"nodeType": "YulIdentifier",
															"src": "4719:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "4730:1:21",
															"nodeType": "YulLiteral",
															"src": "4730:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4715:3:21",
														"nodeType": "YulIdentifier",
														"src": "4715:3:21"
													},
													"nativeSrc": "4715:17:21",
													"nodeType": "YulFunctionCall",
													"src": "4715:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4666:39:21",
												"nodeType": "YulIdentifier",
												"src": "4666:39:21"
											},
											"nativeSrc": "4666:67:21",
											"nodeType": "YulFunctionCall",
											"src": "4666:67:21"
										},
										"nativeSrc": "4666:67:21",
										"nodeType": "YulExpressionStatement",
										"src": "4666:67:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
							"nativeSrc": "4526:214:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4592:9:21",
									"nodeType": "YulTypedName",
									"src": "4592:9:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4604:6:21",
									"nodeType": "YulTypedName",
									"src": "4604:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4615:4:21",
									"nodeType": "YulTypedName",
									"src": "4615:4:21",
									"type": ""
								}
							],
							"src": "4526:214:21"
						},
						{
							"body": {
								"nativeSrc": "4791:32:21",
								"nodeType": "YulBlock",
								"src": "4791:32:21",
								"statements": [
									{
										"nativeSrc": "4801:16:21",
										"nodeType": "YulAssignment",
										"src": "4801:16:21",
										"value": {
											"name": "value",
											"nativeSrc": "4812:5:21",
											"nodeType": "YulIdentifier",
											"src": "4812:5:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "4801:7:21",
												"nodeType": "YulIdentifier",
												"src": "4801:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bytes32",
							"nativeSrc": "4746:77:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4773:5:21",
									"nodeType": "YulTypedName",
									"src": "4773:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "4783:7:21",
									"nodeType": "YulTypedName",
									"src": "4783:7:21",
									"type": ""
								}
							],
							"src": "4746:77:21"
						},
						{
							"body": {
								"nativeSrc": "4894:53:21",
								"nodeType": "YulBlock",
								"src": "4894:53:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "4911:3:21",
													"nodeType": "YulIdentifier",
													"src": "4911:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "4934:5:21",
															"nodeType": "YulIdentifier",
															"src": "4934:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_bytes32",
														"nativeSrc": "4916:17:21",
														"nodeType": "YulIdentifier",
														"src": "4916:17:21"
													},
													"nativeSrc": "4916:24:21",
													"nodeType": "YulFunctionCall",
													"src": "4916:24:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4904:6:21",
												"nodeType": "YulIdentifier",
												"src": "4904:6:21"
											},
											"nativeSrc": "4904:37:21",
											"nodeType": "YulFunctionCall",
											"src": "4904:37:21"
										},
										"nativeSrc": "4904:37:21",
										"nodeType": "YulExpressionStatement",
										"src": "4904:37:21"
									}
								]
							},
							"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
							"nativeSrc": "4829:118:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4882:5:21",
									"nodeType": "YulTypedName",
									"src": "4882:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "4889:3:21",
									"nodeType": "YulTypedName",
									"src": "4889:3:21",
									"type": ""
								}
							],
							"src": "4829:118:21"
						},
						{
							"body": {
								"nativeSrc": "5051:124:21",
								"nodeType": "YulBlock",
								"src": "5051:124:21",
								"statements": [
									{
										"nativeSrc": "5061:26:21",
										"nodeType": "YulAssignment",
										"src": "5061:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5073:9:21",
													"nodeType": "YulIdentifier",
													"src": "5073:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "5084:2:21",
													"nodeType": "YulLiteral",
													"src": "5084:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5069:3:21",
												"nodeType": "YulIdentifier",
												"src": "5069:3:21"
											},
											"nativeSrc": "5069:18:21",
											"nodeType": "YulFunctionCall",
											"src": "5069:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5061:4:21",
												"nodeType": "YulIdentifier",
												"src": "5061:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "5141:6:21",
													"nodeType": "YulIdentifier",
													"src": "5141:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5154:9:21",
															"nodeType": "YulIdentifier",
															"src": "5154:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "5165:1:21",
															"nodeType": "YulLiteral",
															"src": "5165:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5150:3:21",
														"nodeType": "YulIdentifier",
														"src": "5150:3:21"
													},
													"nativeSrc": "5150:17:21",
													"nodeType": "YulFunctionCall",
													"src": "5150:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "5097:43:21",
												"nodeType": "YulIdentifier",
												"src": "5097:43:21"
											},
											"nativeSrc": "5097:71:21",
											"nodeType": "YulFunctionCall",
											"src": "5097:71:21"
										},
										"nativeSrc": "5097:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "5097:71:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
							"nativeSrc": "4953:222:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5023:9:21",
									"nodeType": "YulTypedName",
									"src": "5023:9:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5035:6:21",
									"nodeType": "YulTypedName",
									"src": "5035:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5046:4:21",
									"nodeType": "YulTypedName",
									"src": "5046:4:21",
									"type": ""
								}
							],
							"src": "4953:222:21"
						},
						{
							"body": {
								"nativeSrc": "5247:263:21",
								"nodeType": "YulBlock",
								"src": "5247:263:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "5293:83:21",
											"nodeType": "YulBlock",
											"src": "5293:83:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "5295:77:21",
															"nodeType": "YulIdentifier",
															"src": "5295:77:21"
														},
														"nativeSrc": "5295:79:21",
														"nodeType": "YulFunctionCall",
														"src": "5295:79:21"
													},
													"nativeSrc": "5295:79:21",
													"nodeType": "YulExpressionStatement",
													"src": "5295:79:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5268:7:21",
															"nodeType": "YulIdentifier",
															"src": "5268:7:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "5277:9:21",
															"nodeType": "YulIdentifier",
															"src": "5277:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5264:3:21",
														"nodeType": "YulIdentifier",
														"src": "5264:3:21"
													},
													"nativeSrc": "5264:23:21",
													"nodeType": "YulFunctionCall",
													"src": "5264:23:21"
												},
												{
													"kind": "number",
													"nativeSrc": "5289:2:21",
													"nodeType": "YulLiteral",
													"src": "5289:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5260:3:21",
												"nodeType": "YulIdentifier",
												"src": "5260:3:21"
											},
											"nativeSrc": "5260:32:21",
											"nodeType": "YulFunctionCall",
											"src": "5260:32:21"
										},
										"nativeSrc": "5257:119:21",
										"nodeType": "YulIf",
										"src": "5257:119:21"
									},
									{
										"nativeSrc": "5386:117:21",
										"nodeType": "YulBlock",
										"src": "5386:117:21",
										"statements": [
											{
												"nativeSrc": "5401:15:21",
												"nodeType": "YulVariableDeclaration",
												"src": "5401:15:21",
												"value": {
													"kind": "number",
													"nativeSrc": "5415:1:21",
													"nodeType": "YulLiteral",
													"src": "5415:1:21",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5405:6:21",
														"nodeType": "YulTypedName",
														"src": "5405:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5430:63:21",
												"nodeType": "YulAssignment",
												"src": "5430:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5465:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "5465:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5476:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "5476:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5461:3:21",
																"nodeType": "YulIdentifier",
																"src": "5461:3:21"
															},
															"nativeSrc": "5461:22:21",
															"nodeType": "YulFunctionCall",
															"src": "5461:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5485:7:21",
															"nodeType": "YulIdentifier",
															"src": "5485:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "5440:20:21",
														"nodeType": "YulIdentifier",
														"src": "5440:20:21"
													},
													"nativeSrc": "5440:53:21",
													"nodeType": "YulFunctionCall",
													"src": "5440:53:21"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "5430:6:21",
														"nodeType": "YulIdentifier",
														"src": "5430:6:21"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256",
							"nativeSrc": "5181:329:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5217:9:21",
									"nodeType": "YulTypedName",
									"src": "5217:9:21",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "5228:7:21",
									"nodeType": "YulTypedName",
									"src": "5228:7:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "5240:6:21",
									"nodeType": "YulTypedName",
									"src": "5240:6:21",
									"type": ""
								}
							],
							"src": "5181:329:21"
						},
						{
							"body": {
								"nativeSrc": "5582:263:21",
								"nodeType": "YulBlock",
								"src": "5582:263:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "5628:83:21",
											"nodeType": "YulBlock",
											"src": "5628:83:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "5630:77:21",
															"nodeType": "YulIdentifier",
															"src": "5630:77:21"
														},
														"nativeSrc": "5630:79:21",
														"nodeType": "YulFunctionCall",
														"src": "5630:79:21"
													},
													"nativeSrc": "5630:79:21",
													"nodeType": "YulExpressionStatement",
													"src": "5630:79:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5603:7:21",
															"nodeType": "YulIdentifier",
															"src": "5603:7:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "5612:9:21",
															"nodeType": "YulIdentifier",
															"src": "5612:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5599:3:21",
														"nodeType": "YulIdentifier",
														"src": "5599:3:21"
													},
													"nativeSrc": "5599:23:21",
													"nodeType": "YulFunctionCall",
													"src": "5599:23:21"
												},
												{
													"kind": "number",
													"nativeSrc": "5624:2:21",
													"nodeType": "YulLiteral",
													"src": "5624:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5595:3:21",
												"nodeType": "YulIdentifier",
												"src": "5595:3:21"
											},
											"nativeSrc": "5595:32:21",
											"nodeType": "YulFunctionCall",
											"src": "5595:32:21"
										},
										"nativeSrc": "5592:119:21",
										"nodeType": "YulIf",
										"src": "5592:119:21"
									},
									{
										"nativeSrc": "5721:117:21",
										"nodeType": "YulBlock",
										"src": "5721:117:21",
										"statements": [
											{
												"nativeSrc": "5736:15:21",
												"nodeType": "YulVariableDeclaration",
												"src": "5736:15:21",
												"value": {
													"kind": "number",
													"nativeSrc": "5750:1:21",
													"nodeType": "YulLiteral",
													"src": "5750:1:21",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5740:6:21",
														"nodeType": "YulTypedName",
														"src": "5740:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5765:63:21",
												"nodeType": "YulAssignment",
												"src": "5765:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5800:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "5800:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5811:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "5811:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5796:3:21",
																"nodeType": "YulIdentifier",
																"src": "5796:3:21"
															},
															"nativeSrc": "5796:22:21",
															"nodeType": "YulFunctionCall",
															"src": "5796:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5820:7:21",
															"nodeType": "YulIdentifier",
															"src": "5820:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "5775:20:21",
														"nodeType": "YulIdentifier",
														"src": "5775:20:21"
													},
													"nativeSrc": "5775:53:21",
													"nodeType": "YulFunctionCall",
													"src": "5775:53:21"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "5765:6:21",
														"nodeType": "YulIdentifier",
														"src": "5765:6:21"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nativeSrc": "5516:329:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5552:9:21",
									"nodeType": "YulTypedName",
									"src": "5552:9:21",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "5563:7:21",
									"nodeType": "YulTypedName",
									"src": "5563:7:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "5575:6:21",
									"nodeType": "YulTypedName",
									"src": "5575:6:21",
									"type": ""
								}
							],
							"src": "5516:329:21"
						},
						{
							"body": {
								"nativeSrc": "5895:105:21",
								"nodeType": "YulBlock",
								"src": "5895:105:21",
								"statements": [
									{
										"nativeSrc": "5905:89:21",
										"nodeType": "YulAssignment",
										"src": "5905:89:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "5920:5:21",
													"nodeType": "YulIdentifier",
													"src": "5920:5:21"
												},
												{
													"kind": "number",
													"nativeSrc": "5927:66:21",
													"nodeType": "YulLiteral",
													"src": "5927:66:21",
													"type": "",
													"value": "0xff00000000000000000000000000000000000000000000000000000000000000"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "5916:3:21",
												"nodeType": "YulIdentifier",
												"src": "5916:3:21"
											},
											"nativeSrc": "5916:78:21",
											"nodeType": "YulFunctionCall",
											"src": "5916:78:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "5905:7:21",
												"nodeType": "YulIdentifier",
												"src": "5905:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bytes1",
							"nativeSrc": "5851:149:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5877:5:21",
									"nodeType": "YulTypedName",
									"src": "5877:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "5887:7:21",
									"nodeType": "YulTypedName",
									"src": "5887:7:21",
									"type": ""
								}
							],
							"src": "5851:149:21"
						},
						{
							"body": {
								"nativeSrc": "6069:52:21",
								"nodeType": "YulBlock",
								"src": "6069:52:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6086:3:21",
													"nodeType": "YulIdentifier",
													"src": "6086:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "6108:5:21",
															"nodeType": "YulIdentifier",
															"src": "6108:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_bytes1",
														"nativeSrc": "6091:16:21",
														"nodeType": "YulIdentifier",
														"src": "6091:16:21"
													},
													"nativeSrc": "6091:23:21",
													"nodeType": "YulFunctionCall",
													"src": "6091:23:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6079:6:21",
												"nodeType": "YulIdentifier",
												"src": "6079:6:21"
											},
											"nativeSrc": "6079:36:21",
											"nodeType": "YulFunctionCall",
											"src": "6079:36:21"
										},
										"nativeSrc": "6079:36:21",
										"nodeType": "YulExpressionStatement",
										"src": "6079:36:21"
									}
								]
							},
							"name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
							"nativeSrc": "6006:115:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "6057:5:21",
									"nodeType": "YulTypedName",
									"src": "6057:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "6064:3:21",
									"nodeType": "YulTypedName",
									"src": "6064:3:21",
									"type": ""
								}
							],
							"src": "6006:115:21"
						},
						{
							"body": {
								"nativeSrc": "6192:53:21",
								"nodeType": "YulBlock",
								"src": "6192:53:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6209:3:21",
													"nodeType": "YulIdentifier",
													"src": "6209:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "6232:5:21",
															"nodeType": "YulIdentifier",
															"src": "6232:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nativeSrc": "6214:17:21",
														"nodeType": "YulIdentifier",
														"src": "6214:17:21"
													},
													"nativeSrc": "6214:24:21",
													"nodeType": "YulFunctionCall",
													"src": "6214:24:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6202:6:21",
												"nodeType": "YulIdentifier",
												"src": "6202:6:21"
											},
											"nativeSrc": "6202:37:21",
											"nodeType": "YulFunctionCall",
											"src": "6202:37:21"
										},
										"nativeSrc": "6202:37:21",
										"nodeType": "YulExpressionStatement",
										"src": "6202:37:21"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nativeSrc": "6127:118:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "6180:5:21",
									"nodeType": "YulTypedName",
									"src": "6180:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "6187:3:21",
									"nodeType": "YulTypedName",
									"src": "6187:3:21",
									"type": ""
								}
							],
							"src": "6127:118:21"
						},
						{
							"body": {
								"nativeSrc": "6325:40:21",
								"nodeType": "YulBlock",
								"src": "6325:40:21",
								"statements": [
									{
										"nativeSrc": "6336:22:21",
										"nodeType": "YulAssignment",
										"src": "6336:22:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "6352:5:21",
													"nodeType": "YulIdentifier",
													"src": "6352:5:21"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "6346:5:21",
												"nodeType": "YulIdentifier",
												"src": "6346:5:21"
											},
											"nativeSrc": "6346:12:21",
											"nodeType": "YulFunctionCall",
											"src": "6346:12:21"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "6336:6:21",
												"nodeType": "YulIdentifier",
												"src": "6336:6:21"
											}
										]
									}
								]
							},
							"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
							"nativeSrc": "6251:114:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "6308:5:21",
									"nodeType": "YulTypedName",
									"src": "6308:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "6318:6:21",
									"nodeType": "YulTypedName",
									"src": "6318:6:21",
									"type": ""
								}
							],
							"src": "6251:114:21"
						},
						{
							"body": {
								"nativeSrc": "6482:73:21",
								"nodeType": "YulBlock",
								"src": "6482:73:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6499:3:21",
													"nodeType": "YulIdentifier",
													"src": "6499:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "6504:6:21",
													"nodeType": "YulIdentifier",
													"src": "6504:6:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6492:6:21",
												"nodeType": "YulIdentifier",
												"src": "6492:6:21"
											},
											"nativeSrc": "6492:19:21",
											"nodeType": "YulFunctionCall",
											"src": "6492:19:21"
										},
										"nativeSrc": "6492:19:21",
										"nodeType": "YulExpressionStatement",
										"src": "6492:19:21"
									},
									{
										"nativeSrc": "6520:29:21",
										"nodeType": "YulAssignment",
										"src": "6520:29:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6539:3:21",
													"nodeType": "YulIdentifier",
													"src": "6539:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "6544:4:21",
													"nodeType": "YulLiteral",
													"src": "6544:4:21",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6535:3:21",
												"nodeType": "YulIdentifier",
												"src": "6535:3:21"
											},
											"nativeSrc": "6535:14:21",
											"nodeType": "YulFunctionCall",
											"src": "6535:14:21"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "6520:11:21",
												"nodeType": "YulIdentifier",
												"src": "6520:11:21"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
							"nativeSrc": "6371:184:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "6454:3:21",
									"nodeType": "YulTypedName",
									"src": "6454:3:21",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "6459:6:21",
									"nodeType": "YulTypedName",
									"src": "6459:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "6470:11:21",
									"nodeType": "YulTypedName",
									"src": "6470:11:21",
									"type": ""
								}
							],
							"src": "6371:184:21"
						},
						{
							"body": {
								"nativeSrc": "6633:60:21",
								"nodeType": "YulBlock",
								"src": "6633:60:21",
								"statements": [
									{
										"nativeSrc": "6643:11:21",
										"nodeType": "YulAssignment",
										"src": "6643:11:21",
										"value": {
											"name": "ptr",
											"nativeSrc": "6651:3:21",
											"nodeType": "YulIdentifier",
											"src": "6651:3:21"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "6643:4:21",
												"nodeType": "YulIdentifier",
												"src": "6643:4:21"
											}
										]
									},
									{
										"nativeSrc": "6664:22:21",
										"nodeType": "YulAssignment",
										"src": "6664:22:21",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nativeSrc": "6676:3:21",
													"nodeType": "YulIdentifier",
													"src": "6676:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "6681:4:21",
													"nodeType": "YulLiteral",
													"src": "6681:4:21",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6672:3:21",
												"nodeType": "YulIdentifier",
												"src": "6672:3:21"
											},
											"nativeSrc": "6672:14:21",
											"nodeType": "YulFunctionCall",
											"src": "6672:14:21"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "6664:4:21",
												"nodeType": "YulIdentifier",
												"src": "6664:4:21"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
							"nativeSrc": "6561:132:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "6620:3:21",
									"nodeType": "YulTypedName",
									"src": "6620:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "6628:4:21",
									"nodeType": "YulTypedName",
									"src": "6628:4:21",
									"type": ""
								}
							],
							"src": "6561:132:21"
						},
						{
							"body": {
								"nativeSrc": "6754:53:21",
								"nodeType": "YulBlock",
								"src": "6754:53:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6771:3:21",
													"nodeType": "YulIdentifier",
													"src": "6771:3:21"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "6794:5:21",
															"nodeType": "YulIdentifier",
															"src": "6794:5:21"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nativeSrc": "6776:17:21",
														"nodeType": "YulIdentifier",
														"src": "6776:17:21"
													},
													"nativeSrc": "6776:24:21",
													"nodeType": "YulFunctionCall",
													"src": "6776:24:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6764:6:21",
												"nodeType": "YulIdentifier",
												"src": "6764:6:21"
											},
											"nativeSrc": "6764:37:21",
											"nodeType": "YulFunctionCall",
											"src": "6764:37:21"
										},
										"nativeSrc": "6764:37:21",
										"nodeType": "YulExpressionStatement",
										"src": "6764:37:21"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256",
							"nativeSrc": "6699:108:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "6742:5:21",
									"nodeType": "YulTypedName",
									"src": "6742:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "6749:3:21",
									"nodeType": "YulTypedName",
									"src": "6749:3:21",
									"type": ""
								}
							],
							"src": "6699:108:21"
						},
						{
							"body": {
								"nativeSrc": "6893:99:21",
								"nodeType": "YulBlock",
								"src": "6893:99:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "6937:6:21",
													"nodeType": "YulIdentifier",
													"src": "6937:6:21"
												},
												{
													"name": "pos",
													"nativeSrc": "6945:3:21",
													"nodeType": "YulIdentifier",
													"src": "6945:3:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nativeSrc": "6903:33:21",
												"nodeType": "YulIdentifier",
												"src": "6903:33:21"
											},
											"nativeSrc": "6903:46:21",
											"nodeType": "YulFunctionCall",
											"src": "6903:46:21"
										},
										"nativeSrc": "6903:46:21",
										"nodeType": "YulExpressionStatement",
										"src": "6903:46:21"
									},
									{
										"nativeSrc": "6958:28:21",
										"nodeType": "YulAssignment",
										"src": "6958:28:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6976:3:21",
													"nodeType": "YulIdentifier",
													"src": "6976:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "6981:4:21",
													"nodeType": "YulLiteral",
													"src": "6981:4:21",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6972:3:21",
												"nodeType": "YulIdentifier",
												"src": "6972:3:21"
											},
											"nativeSrc": "6972:14:21",
											"nodeType": "YulFunctionCall",
											"src": "6972:14:21"
										},
										"variableNames": [
											{
												"name": "updatedPos",
												"nativeSrc": "6958:10:21",
												"nodeType": "YulIdentifier",
												"src": "6958:10:21"
											}
										]
									}
								]
							},
							"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
							"nativeSrc": "6813:179:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value0",
									"nativeSrc": "6866:6:21",
									"nodeType": "YulTypedName",
									"src": "6866:6:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "6874:3:21",
									"nodeType": "YulTypedName",
									"src": "6874:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updatedPos",
									"nativeSrc": "6882:10:21",
									"nodeType": "YulTypedName",
									"src": "6882:10:21",
									"type": ""
								}
							],
							"src": "6813:179:21"
						},
						{
							"body": {
								"nativeSrc": "7073:38:21",
								"nodeType": "YulBlock",
								"src": "7073:38:21",
								"statements": [
									{
										"nativeSrc": "7083:22:21",
										"nodeType": "YulAssignment",
										"src": "7083:22:21",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nativeSrc": "7095:3:21",
													"nodeType": "YulIdentifier",
													"src": "7095:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "7100:4:21",
													"nodeType": "YulLiteral",
													"src": "7100:4:21",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7091:3:21",
												"nodeType": "YulIdentifier",
												"src": "7091:3:21"
											},
											"nativeSrc": "7091:14:21",
											"nodeType": "YulFunctionCall",
											"src": "7091:14:21"
										},
										"variableNames": [
											{
												"name": "next",
												"nativeSrc": "7083:4:21",
												"nodeType": "YulIdentifier",
												"src": "7083:4:21"
											}
										]
									}
								]
							},
							"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
							"nativeSrc": "6998:113:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "7060:3:21",
									"nodeType": "YulTypedName",
									"src": "7060:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "next",
									"nativeSrc": "7068:4:21",
									"nodeType": "YulTypedName",
									"src": "7068:4:21",
									"type": ""
								}
							],
							"src": "6998:113:21"
						},
						{
							"body": {
								"nativeSrc": "7271:608:21",
								"nodeType": "YulBlock",
								"src": "7271:608:21",
								"statements": [
									{
										"nativeSrc": "7281:68:21",
										"nodeType": "YulVariableDeclaration",
										"src": "7281:68:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "7343:5:21",
													"nodeType": "YulIdentifier",
													"src": "7343:5:21"
												}
											],
											"functionName": {
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "7295:47:21",
												"nodeType": "YulIdentifier",
												"src": "7295:47:21"
											},
											"nativeSrc": "7295:54:21",
											"nodeType": "YulFunctionCall",
											"src": "7295:54:21"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "7285:6:21",
												"nodeType": "YulTypedName",
												"src": "7285:6:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "7358:93:21",
										"nodeType": "YulAssignment",
										"src": "7358:93:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "7439:3:21",
													"nodeType": "YulIdentifier",
													"src": "7439:3:21"
												},
												{
													"name": "length",
													"nativeSrc": "7444:6:21",
													"nodeType": "YulIdentifier",
													"src": "7444:6:21"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nativeSrc": "7365:73:21",
												"nodeType": "YulIdentifier",
												"src": "7365:73:21"
											},
											"nativeSrc": "7365:86:21",
											"nodeType": "YulFunctionCall",
											"src": "7365:86:21"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "7358:3:21",
												"nodeType": "YulIdentifier",
												"src": "7358:3:21"
											}
										]
									},
									{
										"nativeSrc": "7460:71:21",
										"nodeType": "YulVariableDeclaration",
										"src": "7460:71:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "7525:5:21",
													"nodeType": "YulIdentifier",
													"src": "7525:5:21"
												}
											],
											"functionName": {
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "7475:49:21",
												"nodeType": "YulIdentifier",
												"src": "7475:49:21"
											},
											"nativeSrc": "7475:56:21",
											"nodeType": "YulFunctionCall",
											"src": "7475:56:21"
										},
										"variables": [
											{
												"name": "baseRef",
												"nativeSrc": "7464:7:21",
												"nodeType": "YulTypedName",
												"src": "7464:7:21",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "7540:21:21",
										"nodeType": "YulVariableDeclaration",
										"src": "7540:21:21",
										"value": {
											"name": "baseRef",
											"nativeSrc": "7554:7:21",
											"nodeType": "YulIdentifier",
											"src": "7554:7:21"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nativeSrc": "7544:6:21",
												"nodeType": "YulTypedName",
												"src": "7544:6:21",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "7630:224:21",
											"nodeType": "YulBlock",
											"src": "7630:224:21",
											"statements": [
												{
													"nativeSrc": "7644:34:21",
													"nodeType": "YulVariableDeclaration",
													"src": "7644:34:21",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nativeSrc": "7671:6:21",
																"nodeType": "YulIdentifier",
																"src": "7671:6:21"
															}
														],
														"functionName": {
															"name": "mload",
															"nativeSrc": "7665:5:21",
															"nodeType": "YulIdentifier",
															"src": "7665:5:21"
														},
														"nativeSrc": "7665:13:21",
														"nodeType": "YulFunctionCall",
														"src": "7665:13:21"
													},
													"variables": [
														{
															"name": "elementValue0",
															"nativeSrc": "7648:13:21",
															"nodeType": "YulTypedName",
															"src": "7648:13:21",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "7691:70:21",
													"nodeType": "YulAssignment",
													"src": "7691:70:21",
													"value": {
														"arguments": [
															{
																"name": "elementValue0",
																"nativeSrc": "7742:13:21",
																"nodeType": "YulIdentifier",
																"src": "7742:13:21"
															},
															{
																"name": "pos",
																"nativeSrc": "7757:3:21",
																"nodeType": "YulIdentifier",
																"src": "7757:3:21"
															}
														],
														"functionName": {
															"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
															"nativeSrc": "7698:43:21",
															"nodeType": "YulIdentifier",
															"src": "7698:43:21"
														},
														"nativeSrc": "7698:63:21",
														"nodeType": "YulFunctionCall",
														"src": "7698:63:21"
													},
													"variableNames": [
														{
															"name": "pos",
															"nativeSrc": "7691:3:21",
															"nodeType": "YulIdentifier",
															"src": "7691:3:21"
														}
													]
												},
												{
													"nativeSrc": "7774:70:21",
													"nodeType": "YulAssignment",
													"src": "7774:70:21",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nativeSrc": "7837:6:21",
																"nodeType": "YulIdentifier",
																"src": "7837:6:21"
															}
														],
														"functionName": {
															"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
															"nativeSrc": "7784:52:21",
															"nodeType": "YulIdentifier",
															"src": "7784:52:21"
														},
														"nativeSrc": "7784:60:21",
														"nodeType": "YulFunctionCall",
														"src": "7784:60:21"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nativeSrc": "7774:6:21",
															"nodeType": "YulIdentifier",
															"src": "7774:6:21"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "7592:1:21",
													"nodeType": "YulIdentifier",
													"src": "7592:1:21"
												},
												{
													"name": "length",
													"nativeSrc": "7595:6:21",
													"nodeType": "YulIdentifier",
													"src": "7595:6:21"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "7589:2:21",
												"nodeType": "YulIdentifier",
												"src": "7589:2:21"
											},
											"nativeSrc": "7589:13:21",
											"nodeType": "YulFunctionCall",
											"src": "7589:13:21"
										},
										"nativeSrc": "7570:284:21",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "7603:18:21",
											"nodeType": "YulBlock",
											"src": "7603:18:21",
											"statements": [
												{
													"nativeSrc": "7605:14:21",
													"nodeType": "YulAssignment",
													"src": "7605:14:21",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "7614:1:21",
																"nodeType": "YulIdentifier",
																"src": "7614:1:21"
															},
															{
																"kind": "number",
																"nativeSrc": "7617:1:21",
																"nodeType": "YulLiteral",
																"src": "7617:1:21",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "7610:3:21",
															"nodeType": "YulIdentifier",
															"src": "7610:3:21"
														},
														"nativeSrc": "7610:9:21",
														"nodeType": "YulFunctionCall",
														"src": "7610:9:21"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "7605:1:21",
															"nodeType": "YulIdentifier",
															"src": "7605:1:21"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "7574:14:21",
											"nodeType": "YulBlock",
											"src": "7574:14:21",
											"statements": [
												{
													"nativeSrc": "7576:10:21",
													"nodeType": "YulVariableDeclaration",
													"src": "7576:10:21",
													"value": {
														"kind": "number",
														"nativeSrc": "7585:1:21",
														"nodeType": "YulLiteral",
														"src": "7585:1:21",
														"type": "",
														"value": "0"
													},
													"variables": [
														{
															"name": "i",
															"nativeSrc": "7580:1:21",
															"nodeType": "YulTypedName",
															"src": "7580:1:21",
															"type": ""
														}
													]
												}
											]
										},
										"src": "7570:284:21"
									},
									{
										"nativeSrc": "7863:10:21",
										"nodeType": "YulAssignment",
										"src": "7863:10:21",
										"value": {
											"name": "pos",
											"nativeSrc": "7870:3:21",
											"nodeType": "YulIdentifier",
											"src": "7870:3:21"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "7863:3:21",
												"nodeType": "YulIdentifier",
												"src": "7863:3:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
							"nativeSrc": "7147:732:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "7250:5:21",
									"nodeType": "YulTypedName",
									"src": "7250:5:21",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "7257:3:21",
									"nodeType": "YulTypedName",
									"src": "7257:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "7266:3:21",
									"nodeType": "YulTypedName",
									"src": "7266:3:21",
									"type": ""
								}
							],
							"src": "7147:732:21"
						},
						{
							"body": {
								"nativeSrc": "8239:861:21",
								"nodeType": "YulBlock",
								"src": "8239:861:21",
								"statements": [
									{
										"nativeSrc": "8249:27:21",
										"nodeType": "YulAssignment",
										"src": "8249:27:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8261:9:21",
													"nodeType": "YulIdentifier",
													"src": "8261:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "8272:3:21",
													"nodeType": "YulLiteral",
													"src": "8272:3:21",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8257:3:21",
												"nodeType": "YulIdentifier",
												"src": "8257:3:21"
											},
											"nativeSrc": "8257:19:21",
											"nodeType": "YulFunctionCall",
											"src": "8257:19:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8249:4:21",
												"nodeType": "YulIdentifier",
												"src": "8249:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "8328:6:21",
													"nodeType": "YulIdentifier",
													"src": "8328:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8341:9:21",
															"nodeType": "YulIdentifier",
															"src": "8341:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "8352:1:21",
															"nodeType": "YulLiteral",
															"src": "8352:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8337:3:21",
														"nodeType": "YulIdentifier",
														"src": "8337:3:21"
													},
													"nativeSrc": "8337:17:21",
													"nodeType": "YulFunctionCall",
													"src": "8337:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
												"nativeSrc": "8286:41:21",
												"nodeType": "YulIdentifier",
												"src": "8286:41:21"
											},
											"nativeSrc": "8286:69:21",
											"nodeType": "YulFunctionCall",
											"src": "8286:69:21"
										},
										"nativeSrc": "8286:69:21",
										"nodeType": "YulExpressionStatement",
										"src": "8286:69:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8376:9:21",
															"nodeType": "YulIdentifier",
															"src": "8376:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "8387:2:21",
															"nodeType": "YulLiteral",
															"src": "8387:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8372:3:21",
														"nodeType": "YulIdentifier",
														"src": "8372:3:21"
													},
													"nativeSrc": "8372:18:21",
													"nodeType": "YulFunctionCall",
													"src": "8372:18:21"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "8396:4:21",
															"nodeType": "YulIdentifier",
															"src": "8396:4:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "8402:9:21",
															"nodeType": "YulIdentifier",
															"src": "8402:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "8392:3:21",
														"nodeType": "YulIdentifier",
														"src": "8392:3:21"
													},
													"nativeSrc": "8392:20:21",
													"nodeType": "YulFunctionCall",
													"src": "8392:20:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8365:6:21",
												"nodeType": "YulIdentifier",
												"src": "8365:6:21"
											},
											"nativeSrc": "8365:48:21",
											"nodeType": "YulFunctionCall",
											"src": "8365:48:21"
										},
										"nativeSrc": "8365:48:21",
										"nodeType": "YulExpressionStatement",
										"src": "8365:48:21"
									},
									{
										"nativeSrc": "8422:86:21",
										"nodeType": "YulAssignment",
										"src": "8422:86:21",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "8494:6:21",
													"nodeType": "YulIdentifier",
													"src": "8494:6:21"
												},
												{
													"name": "tail",
													"nativeSrc": "8503:4:21",
													"nodeType": "YulIdentifier",
													"src": "8503:4:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "8430:63:21",
												"nodeType": "YulIdentifier",
												"src": "8430:63:21"
											},
											"nativeSrc": "8430:78:21",
											"nodeType": "YulFunctionCall",
											"src": "8430:78:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8422:4:21",
												"nodeType": "YulIdentifier",
												"src": "8422:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8529:9:21",
															"nodeType": "YulIdentifier",
															"src": "8529:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "8540:2:21",
															"nodeType": "YulLiteral",
															"src": "8540:2:21",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8525:3:21",
														"nodeType": "YulIdentifier",
														"src": "8525:3:21"
													},
													"nativeSrc": "8525:18:21",
													"nodeType": "YulFunctionCall",
													"src": "8525:18:21"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "8549:4:21",
															"nodeType": "YulIdentifier",
															"src": "8549:4:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "8555:9:21",
															"nodeType": "YulIdentifier",
															"src": "8555:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "8545:3:21",
														"nodeType": "YulIdentifier",
														"src": "8545:3:21"
													},
													"nativeSrc": "8545:20:21",
													"nodeType": "YulFunctionCall",
													"src": "8545:20:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8518:6:21",
												"nodeType": "YulIdentifier",
												"src": "8518:6:21"
											},
											"nativeSrc": "8518:48:21",
											"nodeType": "YulFunctionCall",
											"src": "8518:48:21"
										},
										"nativeSrc": "8518:48:21",
										"nodeType": "YulExpressionStatement",
										"src": "8518:48:21"
									},
									{
										"nativeSrc": "8575:86:21",
										"nodeType": "YulAssignment",
										"src": "8575:86:21",
										"value": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "8647:6:21",
													"nodeType": "YulIdentifier",
													"src": "8647:6:21"
												},
												{
													"name": "tail",
													"nativeSrc": "8656:4:21",
													"nodeType": "YulIdentifier",
													"src": "8656:4:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "8583:63:21",
												"nodeType": "YulIdentifier",
												"src": "8583:63:21"
											},
											"nativeSrc": "8583:78:21",
											"nodeType": "YulFunctionCall",
											"src": "8583:78:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8575:4:21",
												"nodeType": "YulIdentifier",
												"src": "8575:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value3",
													"nativeSrc": "8715:6:21",
													"nodeType": "YulIdentifier",
													"src": "8715:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8728:9:21",
															"nodeType": "YulIdentifier",
															"src": "8728:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "8739:2:21",
															"nodeType": "YulLiteral",
															"src": "8739:2:21",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8724:3:21",
														"nodeType": "YulIdentifier",
														"src": "8724:3:21"
													},
													"nativeSrc": "8724:18:21",
													"nodeType": "YulFunctionCall",
													"src": "8724:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "8671:43:21",
												"nodeType": "YulIdentifier",
												"src": "8671:43:21"
											},
											"nativeSrc": "8671:72:21",
											"nodeType": "YulFunctionCall",
											"src": "8671:72:21"
										},
										"nativeSrc": "8671:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "8671:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value4",
													"nativeSrc": "8797:6:21",
													"nodeType": "YulIdentifier",
													"src": "8797:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8810:9:21",
															"nodeType": "YulIdentifier",
															"src": "8810:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "8821:3:21",
															"nodeType": "YulLiteral",
															"src": "8821:3:21",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8806:3:21",
														"nodeType": "YulIdentifier",
														"src": "8806:3:21"
													},
													"nativeSrc": "8806:19:21",
													"nodeType": "YulFunctionCall",
													"src": "8806:19:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "8753:43:21",
												"nodeType": "YulIdentifier",
												"src": "8753:43:21"
											},
											"nativeSrc": "8753:73:21",
											"nodeType": "YulFunctionCall",
											"src": "8753:73:21"
										},
										"nativeSrc": "8753:73:21",
										"nodeType": "YulExpressionStatement",
										"src": "8753:73:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value5",
													"nativeSrc": "8880:6:21",
													"nodeType": "YulIdentifier",
													"src": "8880:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8893:9:21",
															"nodeType": "YulIdentifier",
															"src": "8893:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "8904:3:21",
															"nodeType": "YulLiteral",
															"src": "8904:3:21",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8889:3:21",
														"nodeType": "YulIdentifier",
														"src": "8889:3:21"
													},
													"nativeSrc": "8889:19:21",
													"nodeType": "YulFunctionCall",
													"src": "8889:19:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "8836:43:21",
												"nodeType": "YulIdentifier",
												"src": "8836:43:21"
											},
											"nativeSrc": "8836:73:21",
											"nodeType": "YulFunctionCall",
											"src": "8836:73:21"
										},
										"nativeSrc": "8836:73:21",
										"nodeType": "YulExpressionStatement",
										"src": "8836:73:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8930:9:21",
															"nodeType": "YulIdentifier",
															"src": "8930:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "8941:3:21",
															"nodeType": "YulLiteral",
															"src": "8941:3:21",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8926:3:21",
														"nodeType": "YulIdentifier",
														"src": "8926:3:21"
													},
													"nativeSrc": "8926:19:21",
													"nodeType": "YulFunctionCall",
													"src": "8926:19:21"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "8951:4:21",
															"nodeType": "YulIdentifier",
															"src": "8951:4:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "8957:9:21",
															"nodeType": "YulIdentifier",
															"src": "8957:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "8947:3:21",
														"nodeType": "YulIdentifier",
														"src": "8947:3:21"
													},
													"nativeSrc": "8947:20:21",
													"nodeType": "YulFunctionCall",
													"src": "8947:20:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8919:6:21",
												"nodeType": "YulIdentifier",
												"src": "8919:6:21"
											},
											"nativeSrc": "8919:49:21",
											"nodeType": "YulFunctionCall",
											"src": "8919:49:21"
										},
										"nativeSrc": "8919:49:21",
										"nodeType": "YulExpressionStatement",
										"src": "8919:49:21"
									},
									{
										"nativeSrc": "8977:116:21",
										"nodeType": "YulAssignment",
										"src": "8977:116:21",
										"value": {
											"arguments": [
												{
													"name": "value6",
													"nativeSrc": "9079:6:21",
													"nodeType": "YulIdentifier",
													"src": "9079:6:21"
												},
												{
													"name": "tail",
													"nativeSrc": "9088:4:21",
													"nodeType": "YulIdentifier",
													"src": "9088:4:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nativeSrc": "8985:93:21",
												"nodeType": "YulIdentifier",
												"src": "8985:93:21"
											},
											"nativeSrc": "8985:108:21",
											"nodeType": "YulFunctionCall",
											"src": "8985:108:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8977:4:21",
												"nodeType": "YulIdentifier",
												"src": "8977:4:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
							"nativeSrc": "7885:1215:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "8163:9:21",
									"nodeType": "YulTypedName",
									"src": "8163:9:21",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "8175:6:21",
									"nodeType": "YulTypedName",
									"src": "8175:6:21",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "8183:6:21",
									"nodeType": "YulTypedName",
									"src": "8183:6:21",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "8191:6:21",
									"nodeType": "YulTypedName",
									"src": "8191:6:21",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "8199:6:21",
									"nodeType": "YulTypedName",
									"src": "8199:6:21",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "8207:6:21",
									"nodeType": "YulTypedName",
									"src": "8207:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "8215:6:21",
									"nodeType": "YulTypedName",
									"src": "8215:6:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "8223:6:21",
									"nodeType": "YulTypedName",
									"src": "8223:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "8234:4:21",
									"nodeType": "YulTypedName",
									"src": "8234:4:21",
									"type": ""
								}
							],
							"src": "7885:1215:21"
						},
						{
							"body": {
								"nativeSrc": "9204:124:21",
								"nodeType": "YulBlock",
								"src": "9204:124:21",
								"statements": [
									{
										"nativeSrc": "9214:26:21",
										"nodeType": "YulAssignment",
										"src": "9214:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "9226:9:21",
													"nodeType": "YulIdentifier",
													"src": "9226:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "9237:2:21",
													"nodeType": "YulLiteral",
													"src": "9237:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "9222:3:21",
												"nodeType": "YulIdentifier",
												"src": "9222:3:21"
											},
											"nativeSrc": "9222:18:21",
											"nodeType": "YulFunctionCall",
											"src": "9222:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "9214:4:21",
												"nodeType": "YulIdentifier",
												"src": "9214:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "9294:6:21",
													"nodeType": "YulIdentifier",
													"src": "9294:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9307:9:21",
															"nodeType": "YulIdentifier",
															"src": "9307:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "9318:1:21",
															"nodeType": "YulLiteral",
															"src": "9318:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9303:3:21",
														"nodeType": "YulIdentifier",
														"src": "9303:3:21"
													},
													"nativeSrc": "9303:17:21",
													"nodeType": "YulFunctionCall",
													"src": "9303:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "9250:43:21",
												"nodeType": "YulIdentifier",
												"src": "9250:43:21"
											},
											"nativeSrc": "9250:71:21",
											"nodeType": "YulFunctionCall",
											"src": "9250:71:21"
										},
										"nativeSrc": "9250:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "9250:71:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "9106:222:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "9176:9:21",
									"nodeType": "YulTypedName",
									"src": "9176:9:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "9188:6:21",
									"nodeType": "YulTypedName",
									"src": "9188:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "9199:4:21",
									"nodeType": "YulTypedName",
									"src": "9199:4:21",
									"type": ""
								}
							],
							"src": "9106:222:21"
						},
						{
							"body": {
								"nativeSrc": "9375:77:21",
								"nodeType": "YulBlock",
								"src": "9375:77:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "9430:16:21",
											"nodeType": "YulBlock",
											"src": "9430:16:21",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "9439:1:21",
																"nodeType": "YulLiteral",
																"src": "9439:1:21",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "9442:1:21",
																"nodeType": "YulLiteral",
																"src": "9442:1:21",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "9432:6:21",
															"nodeType": "YulIdentifier",
															"src": "9432:6:21"
														},
														"nativeSrc": "9432:12:21",
														"nodeType": "YulFunctionCall",
														"src": "9432:12:21"
													},
													"nativeSrc": "9432:12:21",
													"nodeType": "YulExpressionStatement",
													"src": "9432:12:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "9398:5:21",
															"nodeType": "YulIdentifier",
															"src": "9398:5:21"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "9421:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "9421:5:21"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint8",
																"nativeSrc": "9405:15:21",
																"nodeType": "YulIdentifier",
																"src": "9405:15:21"
															},
															"nativeSrc": "9405:22:21",
															"nodeType": "YulFunctionCall",
															"src": "9405:22:21"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "9395:2:21",
														"nodeType": "YulIdentifier",
														"src": "9395:2:21"
													},
													"nativeSrc": "9395:33:21",
													"nodeType": "YulFunctionCall",
													"src": "9395:33:21"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "9388:6:21",
												"nodeType": "YulIdentifier",
												"src": "9388:6:21"
											},
											"nativeSrc": "9388:41:21",
											"nodeType": "YulFunctionCall",
											"src": "9388:41:21"
										},
										"nativeSrc": "9385:61:21",
										"nodeType": "YulIf",
										"src": "9385:61:21"
									}
								]
							},
							"name": "validator_revert_t_uint8",
							"nativeSrc": "9334:118:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "9368:5:21",
									"nodeType": "YulTypedName",
									"src": "9368:5:21",
									"type": ""
								}
							],
							"src": "9334:118:21"
						},
						{
							"body": {
								"nativeSrc": "9508:85:21",
								"nodeType": "YulBlock",
								"src": "9508:85:21",
								"statements": [
									{
										"nativeSrc": "9518:29:21",
										"nodeType": "YulAssignment",
										"src": "9518:29:21",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "9540:6:21",
													"nodeType": "YulIdentifier",
													"src": "9540:6:21"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "9527:12:21",
												"nodeType": "YulIdentifier",
												"src": "9527:12:21"
											},
											"nativeSrc": "9527:20:21",
											"nodeType": "YulFunctionCall",
											"src": "9527:20:21"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "9518:5:21",
												"nodeType": "YulIdentifier",
												"src": "9518:5:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "9581:5:21",
													"nodeType": "YulIdentifier",
													"src": "9581:5:21"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint8",
												"nativeSrc": "9556:24:21",
												"nodeType": "YulIdentifier",
												"src": "9556:24:21"
											},
											"nativeSrc": "9556:31:21",
											"nodeType": "YulFunctionCall",
											"src": "9556:31:21"
										},
										"nativeSrc": "9556:31:21",
										"nodeType": "YulExpressionStatement",
										"src": "9556:31:21"
									}
								]
							},
							"name": "abi_decode_t_uint8",
							"nativeSrc": "9458:135:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "9486:6:21",
									"nodeType": "YulTypedName",
									"src": "9486:6:21",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "9494:3:21",
									"nodeType": "YulTypedName",
									"src": "9494:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "9502:5:21",
									"nodeType": "YulTypedName",
									"src": "9502:5:21",
									"type": ""
								}
							],
							"src": "9458:135:21"
						},
						{
							"body": {
								"nativeSrc": "9642:79:21",
								"nodeType": "YulBlock",
								"src": "9642:79:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "9699:16:21",
											"nodeType": "YulBlock",
											"src": "9699:16:21",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "9708:1:21",
																"nodeType": "YulLiteral",
																"src": "9708:1:21",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "9711:1:21",
																"nodeType": "YulLiteral",
																"src": "9711:1:21",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "9701:6:21",
															"nodeType": "YulIdentifier",
															"src": "9701:6:21"
														},
														"nativeSrc": "9701:12:21",
														"nodeType": "YulFunctionCall",
														"src": "9701:12:21"
													},
													"nativeSrc": "9701:12:21",
													"nodeType": "YulExpressionStatement",
													"src": "9701:12:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "9665:5:21",
															"nodeType": "YulIdentifier",
															"src": "9665:5:21"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "9690:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "9690:5:21"
																}
															],
															"functionName": {
																"name": "cleanup_t_bytes32",
																"nativeSrc": "9672:17:21",
																"nodeType": "YulIdentifier",
																"src": "9672:17:21"
															},
															"nativeSrc": "9672:24:21",
															"nodeType": "YulFunctionCall",
															"src": "9672:24:21"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "9662:2:21",
														"nodeType": "YulIdentifier",
														"src": "9662:2:21"
													},
													"nativeSrc": "9662:35:21",
													"nodeType": "YulFunctionCall",
													"src": "9662:35:21"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "9655:6:21",
												"nodeType": "YulIdentifier",
												"src": "9655:6:21"
											},
											"nativeSrc": "9655:43:21",
											"nodeType": "YulFunctionCall",
											"src": "9655:43:21"
										},
										"nativeSrc": "9652:63:21",
										"nodeType": "YulIf",
										"src": "9652:63:21"
									}
								]
							},
							"name": "validator_revert_t_bytes32",
							"nativeSrc": "9599:122:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "9635:5:21",
									"nodeType": "YulTypedName",
									"src": "9635:5:21",
									"type": ""
								}
							],
							"src": "9599:122:21"
						},
						{
							"body": {
								"nativeSrc": "9779:87:21",
								"nodeType": "YulBlock",
								"src": "9779:87:21",
								"statements": [
									{
										"nativeSrc": "9789:29:21",
										"nodeType": "YulAssignment",
										"src": "9789:29:21",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "9811:6:21",
													"nodeType": "YulIdentifier",
													"src": "9811:6:21"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "9798:12:21",
												"nodeType": "YulIdentifier",
												"src": "9798:12:21"
											},
											"nativeSrc": "9798:20:21",
											"nodeType": "YulFunctionCall",
											"src": "9798:20:21"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "9789:5:21",
												"nodeType": "YulIdentifier",
												"src": "9789:5:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "9854:5:21",
													"nodeType": "YulIdentifier",
													"src": "9854:5:21"
												}
											],
											"functionName": {
												"name": "validator_revert_t_bytes32",
												"nativeSrc": "9827:26:21",
												"nodeType": "YulIdentifier",
												"src": "9827:26:21"
											},
											"nativeSrc": "9827:33:21",
											"nodeType": "YulFunctionCall",
											"src": "9827:33:21"
										},
										"nativeSrc": "9827:33:21",
										"nodeType": "YulExpressionStatement",
										"src": "9827:33:21"
									}
								]
							},
							"name": "abi_decode_t_bytes32",
							"nativeSrc": "9727:139:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "9757:6:21",
									"nodeType": "YulTypedName",
									"src": "9757:6:21",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "9765:3:21",
									"nodeType": "YulTypedName",
									"src": "9765:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "9773:5:21",
									"nodeType": "YulTypedName",
									"src": "9773:5:21",
									"type": ""
								}
							],
							"src": "9727:139:21"
						},
						{
							"body": {
								"nativeSrc": "10038:1033:21",
								"nodeType": "YulBlock",
								"src": "10038:1033:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "10085:83:21",
											"nodeType": "YulBlock",
											"src": "10085:83:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "10087:77:21",
															"nodeType": "YulIdentifier",
															"src": "10087:77:21"
														},
														"nativeSrc": "10087:79:21",
														"nodeType": "YulFunctionCall",
														"src": "10087:79:21"
													},
													"nativeSrc": "10087:79:21",
													"nodeType": "YulExpressionStatement",
													"src": "10087:79:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "10059:7:21",
															"nodeType": "YulIdentifier",
															"src": "10059:7:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "10068:9:21",
															"nodeType": "YulIdentifier",
															"src": "10068:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "10055:3:21",
														"nodeType": "YulIdentifier",
														"src": "10055:3:21"
													},
													"nativeSrc": "10055:23:21",
													"nodeType": "YulFunctionCall",
													"src": "10055:23:21"
												},
												{
													"kind": "number",
													"nativeSrc": "10080:3:21",
													"nodeType": "YulLiteral",
													"src": "10080:3:21",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "10051:3:21",
												"nodeType": "YulIdentifier",
												"src": "10051:3:21"
											},
											"nativeSrc": "10051:33:21",
											"nodeType": "YulFunctionCall",
											"src": "10051:33:21"
										},
										"nativeSrc": "10048:120:21",
										"nodeType": "YulIf",
										"src": "10048:120:21"
									},
									{
										"nativeSrc": "10178:117:21",
										"nodeType": "YulBlock",
										"src": "10178:117:21",
										"statements": [
											{
												"nativeSrc": "10193:15:21",
												"nodeType": "YulVariableDeclaration",
												"src": "10193:15:21",
												"value": {
													"kind": "number",
													"nativeSrc": "10207:1:21",
													"nodeType": "YulLiteral",
													"src": "10207:1:21",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "10197:6:21",
														"nodeType": "YulTypedName",
														"src": "10197:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "10222:63:21",
												"nodeType": "YulAssignment",
												"src": "10222:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "10257:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "10257:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "10268:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "10268:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "10253:3:21",
																"nodeType": "YulIdentifier",
																"src": "10253:3:21"
															},
															"nativeSrc": "10253:22:21",
															"nodeType": "YulFunctionCall",
															"src": "10253:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "10277:7:21",
															"nodeType": "YulIdentifier",
															"src": "10277:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "10232:20:21",
														"nodeType": "YulIdentifier",
														"src": "10232:20:21"
													},
													"nativeSrc": "10232:53:21",
													"nodeType": "YulFunctionCall",
													"src": "10232:53:21"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "10222:6:21",
														"nodeType": "YulIdentifier",
														"src": "10222:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "10305:118:21",
										"nodeType": "YulBlock",
										"src": "10305:118:21",
										"statements": [
											{
												"nativeSrc": "10320:16:21",
												"nodeType": "YulVariableDeclaration",
												"src": "10320:16:21",
												"value": {
													"kind": "number",
													"nativeSrc": "10334:2:21",
													"nodeType": "YulLiteral",
													"src": "10334:2:21",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "10324:6:21",
														"nodeType": "YulTypedName",
														"src": "10324:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "10350:63:21",
												"nodeType": "YulAssignment",
												"src": "10350:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "10385:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "10385:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "10396:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "10396:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "10381:3:21",
																"nodeType": "YulIdentifier",
																"src": "10381:3:21"
															},
															"nativeSrc": "10381:22:21",
															"nodeType": "YulFunctionCall",
															"src": "10381:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "10405:7:21",
															"nodeType": "YulIdentifier",
															"src": "10405:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "10360:20:21",
														"nodeType": "YulIdentifier",
														"src": "10360:20:21"
													},
													"nativeSrc": "10360:53:21",
													"nodeType": "YulFunctionCall",
													"src": "10360:53:21"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "10350:6:21",
														"nodeType": "YulIdentifier",
														"src": "10350:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "10433:118:21",
										"nodeType": "YulBlock",
										"src": "10433:118:21",
										"statements": [
											{
												"nativeSrc": "10448:16:21",
												"nodeType": "YulVariableDeclaration",
												"src": "10448:16:21",
												"value": {
													"kind": "number",
													"nativeSrc": "10462:2:21",
													"nodeType": "YulLiteral",
													"src": "10462:2:21",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "10452:6:21",
														"nodeType": "YulTypedName",
														"src": "10452:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "10478:63:21",
												"nodeType": "YulAssignment",
												"src": "10478:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "10513:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "10513:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "10524:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "10524:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "10509:3:21",
																"nodeType": "YulIdentifier",
																"src": "10509:3:21"
															},
															"nativeSrc": "10509:22:21",
															"nodeType": "YulFunctionCall",
															"src": "10509:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "10533:7:21",
															"nodeType": "YulIdentifier",
															"src": "10533:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "10488:20:21",
														"nodeType": "YulIdentifier",
														"src": "10488:20:21"
													},
													"nativeSrc": "10488:53:21",
													"nodeType": "YulFunctionCall",
													"src": "10488:53:21"
												},
												"variableNames": [
													{
														"name": "value2",
														"nativeSrc": "10478:6:21",
														"nodeType": "YulIdentifier",
														"src": "10478:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "10561:118:21",
										"nodeType": "YulBlock",
										"src": "10561:118:21",
										"statements": [
											{
												"nativeSrc": "10576:16:21",
												"nodeType": "YulVariableDeclaration",
												"src": "10576:16:21",
												"value": {
													"kind": "number",
													"nativeSrc": "10590:2:21",
													"nodeType": "YulLiteral",
													"src": "10590:2:21",
													"type": "",
													"value": "96"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "10580:6:21",
														"nodeType": "YulTypedName",
														"src": "10580:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "10606:63:21",
												"nodeType": "YulAssignment",
												"src": "10606:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "10641:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "10641:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "10652:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "10652:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "10637:3:21",
																"nodeType": "YulIdentifier",
																"src": "10637:3:21"
															},
															"nativeSrc": "10637:22:21",
															"nodeType": "YulFunctionCall",
															"src": "10637:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "10661:7:21",
															"nodeType": "YulIdentifier",
															"src": "10661:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "10616:20:21",
														"nodeType": "YulIdentifier",
														"src": "10616:20:21"
													},
													"nativeSrc": "10616:53:21",
													"nodeType": "YulFunctionCall",
													"src": "10616:53:21"
												},
												"variableNames": [
													{
														"name": "value3",
														"nativeSrc": "10606:6:21",
														"nodeType": "YulIdentifier",
														"src": "10606:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "10689:117:21",
										"nodeType": "YulBlock",
										"src": "10689:117:21",
										"statements": [
											{
												"nativeSrc": "10704:17:21",
												"nodeType": "YulVariableDeclaration",
												"src": "10704:17:21",
												"value": {
													"kind": "number",
													"nativeSrc": "10718:3:21",
													"nodeType": "YulLiteral",
													"src": "10718:3:21",
													"type": "",
													"value": "128"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "10708:6:21",
														"nodeType": "YulTypedName",
														"src": "10708:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "10735:61:21",
												"nodeType": "YulAssignment",
												"src": "10735:61:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "10768:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "10768:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "10779:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "10779:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "10764:3:21",
																"nodeType": "YulIdentifier",
																"src": "10764:3:21"
															},
															"nativeSrc": "10764:22:21",
															"nodeType": "YulFunctionCall",
															"src": "10764:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "10788:7:21",
															"nodeType": "YulIdentifier",
															"src": "10788:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint8",
														"nativeSrc": "10745:18:21",
														"nodeType": "YulIdentifier",
														"src": "10745:18:21"
													},
													"nativeSrc": "10745:51:21",
													"nodeType": "YulFunctionCall",
													"src": "10745:51:21"
												},
												"variableNames": [
													{
														"name": "value4",
														"nativeSrc": "10735:6:21",
														"nodeType": "YulIdentifier",
														"src": "10735:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "10816:119:21",
										"nodeType": "YulBlock",
										"src": "10816:119:21",
										"statements": [
											{
												"nativeSrc": "10831:17:21",
												"nodeType": "YulVariableDeclaration",
												"src": "10831:17:21",
												"value": {
													"kind": "number",
													"nativeSrc": "10845:3:21",
													"nodeType": "YulLiteral",
													"src": "10845:3:21",
													"type": "",
													"value": "160"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "10835:6:21",
														"nodeType": "YulTypedName",
														"src": "10835:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "10862:63:21",
												"nodeType": "YulAssignment",
												"src": "10862:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "10897:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "10897:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "10908:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "10908:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "10893:3:21",
																"nodeType": "YulIdentifier",
																"src": "10893:3:21"
															},
															"nativeSrc": "10893:22:21",
															"nodeType": "YulFunctionCall",
															"src": "10893:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "10917:7:21",
															"nodeType": "YulIdentifier",
															"src": "10917:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_bytes32",
														"nativeSrc": "10872:20:21",
														"nodeType": "YulIdentifier",
														"src": "10872:20:21"
													},
													"nativeSrc": "10872:53:21",
													"nodeType": "YulFunctionCall",
													"src": "10872:53:21"
												},
												"variableNames": [
													{
														"name": "value5",
														"nativeSrc": "10862:6:21",
														"nodeType": "YulIdentifier",
														"src": "10862:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "10945:119:21",
										"nodeType": "YulBlock",
										"src": "10945:119:21",
										"statements": [
											{
												"nativeSrc": "10960:17:21",
												"nodeType": "YulVariableDeclaration",
												"src": "10960:17:21",
												"value": {
													"kind": "number",
													"nativeSrc": "10974:3:21",
													"nodeType": "YulLiteral",
													"src": "10974:3:21",
													"type": "",
													"value": "192"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "10964:6:21",
														"nodeType": "YulTypedName",
														"src": "10964:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "10991:63:21",
												"nodeType": "YulAssignment",
												"src": "10991:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "11026:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "11026:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "11037:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "11037:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "11022:3:21",
																"nodeType": "YulIdentifier",
																"src": "11022:3:21"
															},
															"nativeSrc": "11022:22:21",
															"nodeType": "YulFunctionCall",
															"src": "11022:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "11046:7:21",
															"nodeType": "YulIdentifier",
															"src": "11046:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_bytes32",
														"nativeSrc": "11001:20:21",
														"nodeType": "YulIdentifier",
														"src": "11001:20:21"
													},
													"nativeSrc": "11001:53:21",
													"nodeType": "YulFunctionCall",
													"src": "11001:53:21"
												},
												"variableNames": [
													{
														"name": "value6",
														"nativeSrc": "10991:6:21",
														"nodeType": "YulIdentifier",
														"src": "10991:6:21"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
							"nativeSrc": "9872:1199:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "9960:9:21",
									"nodeType": "YulTypedName",
									"src": "9960:9:21",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "9971:7:21",
									"nodeType": "YulTypedName",
									"src": "9971:7:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "9983:6:21",
									"nodeType": "YulTypedName",
									"src": "9983:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "9991:6:21",
									"nodeType": "YulTypedName",
									"src": "9991:6:21",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "9999:6:21",
									"nodeType": "YulTypedName",
									"src": "9999:6:21",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "10007:6:21",
									"nodeType": "YulTypedName",
									"src": "10007:6:21",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "10015:6:21",
									"nodeType": "YulTypedName",
									"src": "10015:6:21",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "10023:6:21",
									"nodeType": "YulTypedName",
									"src": "10023:6:21",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "10031:6:21",
									"nodeType": "YulTypedName",
									"src": "10031:6:21",
									"type": ""
								}
							],
							"src": "9872:1199:21"
						},
						{
							"body": {
								"nativeSrc": "11160:391:21",
								"nodeType": "YulBlock",
								"src": "11160:391:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "11206:83:21",
											"nodeType": "YulBlock",
											"src": "11206:83:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "11208:77:21",
															"nodeType": "YulIdentifier",
															"src": "11208:77:21"
														},
														"nativeSrc": "11208:79:21",
														"nodeType": "YulFunctionCall",
														"src": "11208:79:21"
													},
													"nativeSrc": "11208:79:21",
													"nodeType": "YulExpressionStatement",
													"src": "11208:79:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "11181:7:21",
															"nodeType": "YulIdentifier",
															"src": "11181:7:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "11190:9:21",
															"nodeType": "YulIdentifier",
															"src": "11190:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "11177:3:21",
														"nodeType": "YulIdentifier",
														"src": "11177:3:21"
													},
													"nativeSrc": "11177:23:21",
													"nodeType": "YulFunctionCall",
													"src": "11177:23:21"
												},
												{
													"kind": "number",
													"nativeSrc": "11202:2:21",
													"nodeType": "YulLiteral",
													"src": "11202:2:21",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "11173:3:21",
												"nodeType": "YulIdentifier",
												"src": "11173:3:21"
											},
											"nativeSrc": "11173:32:21",
											"nodeType": "YulFunctionCall",
											"src": "11173:32:21"
										},
										"nativeSrc": "11170:119:21",
										"nodeType": "YulIf",
										"src": "11170:119:21"
									},
									{
										"nativeSrc": "11299:117:21",
										"nodeType": "YulBlock",
										"src": "11299:117:21",
										"statements": [
											{
												"nativeSrc": "11314:15:21",
												"nodeType": "YulVariableDeclaration",
												"src": "11314:15:21",
												"value": {
													"kind": "number",
													"nativeSrc": "11328:1:21",
													"nodeType": "YulLiteral",
													"src": "11328:1:21",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "11318:6:21",
														"nodeType": "YulTypedName",
														"src": "11318:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "11343:63:21",
												"nodeType": "YulAssignment",
												"src": "11343:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "11378:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "11378:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "11389:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "11389:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "11374:3:21",
																"nodeType": "YulIdentifier",
																"src": "11374:3:21"
															},
															"nativeSrc": "11374:22:21",
															"nodeType": "YulFunctionCall",
															"src": "11374:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "11398:7:21",
															"nodeType": "YulIdentifier",
															"src": "11398:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "11353:20:21",
														"nodeType": "YulIdentifier",
														"src": "11353:20:21"
													},
													"nativeSrc": "11353:53:21",
													"nodeType": "YulFunctionCall",
													"src": "11353:53:21"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "11343:6:21",
														"nodeType": "YulIdentifier",
														"src": "11343:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "11426:118:21",
										"nodeType": "YulBlock",
										"src": "11426:118:21",
										"statements": [
											{
												"nativeSrc": "11441:16:21",
												"nodeType": "YulVariableDeclaration",
												"src": "11441:16:21",
												"value": {
													"kind": "number",
													"nativeSrc": "11455:2:21",
													"nodeType": "YulLiteral",
													"src": "11455:2:21",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "11445:6:21",
														"nodeType": "YulTypedName",
														"src": "11445:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "11471:63:21",
												"nodeType": "YulAssignment",
												"src": "11471:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "11506:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "11506:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "11517:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "11517:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "11502:3:21",
																"nodeType": "YulIdentifier",
																"src": "11502:3:21"
															},
															"nativeSrc": "11502:22:21",
															"nodeType": "YulFunctionCall",
															"src": "11502:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "11526:7:21",
															"nodeType": "YulIdentifier",
															"src": "11526:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "11481:20:21",
														"nodeType": "YulIdentifier",
														"src": "11481:20:21"
													},
													"nativeSrc": "11481:53:21",
													"nodeType": "YulFunctionCall",
													"src": "11481:53:21"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "11471:6:21",
														"nodeType": "YulIdentifier",
														"src": "11471:6:21"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_address",
							"nativeSrc": "11077:474:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "11122:9:21",
									"nodeType": "YulTypedName",
									"src": "11122:9:21",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "11133:7:21",
									"nodeType": "YulTypedName",
									"src": "11133:7:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "11145:6:21",
									"nodeType": "YulTypedName",
									"src": "11145:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "11153:6:21",
									"nodeType": "YulTypedName",
									"src": "11153:6:21",
									"type": ""
								}
							],
							"src": "11077:474:21"
						},
						{
							"body": {
								"nativeSrc": "11616:51:21",
								"nodeType": "YulBlock",
								"src": "11616:51:21",
								"statements": [
									{
										"nativeSrc": "11626:35:21",
										"nodeType": "YulAssignment",
										"src": "11626:35:21",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "11655:5:21",
													"nodeType": "YulIdentifier",
													"src": "11655:5:21"
												}
											],
											"functionName": {
												"name": "cleanup_t_address",
												"nativeSrc": "11637:17:21",
												"nodeType": "YulIdentifier",
												"src": "11637:17:21"
											},
											"nativeSrc": "11637:24:21",
											"nodeType": "YulFunctionCall",
											"src": "11637:24:21"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "11626:7:21",
												"nodeType": "YulIdentifier",
												"src": "11626:7:21"
											}
										]
									}
								]
							},
							"name": "cleanup_t_contract$_IERC20_$967",
							"nativeSrc": "11557:110:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "11598:5:21",
									"nodeType": "YulTypedName",
									"src": "11598:5:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "11608:7:21",
									"nodeType": "YulTypedName",
									"src": "11608:7:21",
									"type": ""
								}
							],
							"src": "11557:110:21"
						},
						{
							"body": {
								"nativeSrc": "11730:93:21",
								"nodeType": "YulBlock",
								"src": "11730:93:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "11801:16:21",
											"nodeType": "YulBlock",
											"src": "11801:16:21",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "11810:1:21",
																"nodeType": "YulLiteral",
																"src": "11810:1:21",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "11813:1:21",
																"nodeType": "YulLiteral",
																"src": "11813:1:21",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "11803:6:21",
															"nodeType": "YulIdentifier",
															"src": "11803:6:21"
														},
														"nativeSrc": "11803:12:21",
														"nodeType": "YulFunctionCall",
														"src": "11803:12:21"
													},
													"nativeSrc": "11803:12:21",
													"nodeType": "YulExpressionStatement",
													"src": "11803:12:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "11753:5:21",
															"nodeType": "YulIdentifier",
															"src": "11753:5:21"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "11792:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "11792:5:21"
																}
															],
															"functionName": {
																"name": "cleanup_t_contract$_IERC20_$967",
																"nativeSrc": "11760:31:21",
																"nodeType": "YulIdentifier",
																"src": "11760:31:21"
															},
															"nativeSrc": "11760:38:21",
															"nodeType": "YulFunctionCall",
															"src": "11760:38:21"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "11750:2:21",
														"nodeType": "YulIdentifier",
														"src": "11750:2:21"
													},
													"nativeSrc": "11750:49:21",
													"nodeType": "YulFunctionCall",
													"src": "11750:49:21"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "11743:6:21",
												"nodeType": "YulIdentifier",
												"src": "11743:6:21"
											},
											"nativeSrc": "11743:57:21",
											"nodeType": "YulFunctionCall",
											"src": "11743:57:21"
										},
										"nativeSrc": "11740:77:21",
										"nodeType": "YulIf",
										"src": "11740:77:21"
									}
								]
							},
							"name": "validator_revert_t_contract$_IERC20_$967",
							"nativeSrc": "11673:150:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "11723:5:21",
									"nodeType": "YulTypedName",
									"src": "11723:5:21",
									"type": ""
								}
							],
							"src": "11673:150:21"
						},
						{
							"body": {
								"nativeSrc": "11895:101:21",
								"nodeType": "YulBlock",
								"src": "11895:101:21",
								"statements": [
									{
										"nativeSrc": "11905:29:21",
										"nodeType": "YulAssignment",
										"src": "11905:29:21",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "11927:6:21",
													"nodeType": "YulIdentifier",
													"src": "11927:6:21"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "11914:12:21",
												"nodeType": "YulIdentifier",
												"src": "11914:12:21"
											},
											"nativeSrc": "11914:20:21",
											"nodeType": "YulFunctionCall",
											"src": "11914:20:21"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "11905:5:21",
												"nodeType": "YulIdentifier",
												"src": "11905:5:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "11984:5:21",
													"nodeType": "YulIdentifier",
													"src": "11984:5:21"
												}
											],
											"functionName": {
												"name": "validator_revert_t_contract$_IERC20_$967",
												"nativeSrc": "11943:40:21",
												"nodeType": "YulIdentifier",
												"src": "11943:40:21"
											},
											"nativeSrc": "11943:47:21",
											"nodeType": "YulFunctionCall",
											"src": "11943:47:21"
										},
										"nativeSrc": "11943:47:21",
										"nodeType": "YulExpressionStatement",
										"src": "11943:47:21"
									}
								]
							},
							"name": "abi_decode_t_contract$_IERC20_$967",
							"nativeSrc": "11829:167:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "11873:6:21",
									"nodeType": "YulTypedName",
									"src": "11873:6:21",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "11881:3:21",
									"nodeType": "YulTypedName",
									"src": "11881:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "11889:5:21",
									"nodeType": "YulTypedName",
									"src": "11889:5:21",
									"type": ""
								}
							],
							"src": "11829:167:21"
						},
						{
							"body": {
								"nativeSrc": "12116:533:21",
								"nodeType": "YulBlock",
								"src": "12116:533:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "12162:83:21",
											"nodeType": "YulBlock",
											"src": "12162:83:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "12164:77:21",
															"nodeType": "YulIdentifier",
															"src": "12164:77:21"
														},
														"nativeSrc": "12164:79:21",
														"nodeType": "YulFunctionCall",
														"src": "12164:79:21"
													},
													"nativeSrc": "12164:79:21",
													"nodeType": "YulExpressionStatement",
													"src": "12164:79:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "12137:7:21",
															"nodeType": "YulIdentifier",
															"src": "12137:7:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "12146:9:21",
															"nodeType": "YulIdentifier",
															"src": "12146:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "12133:3:21",
														"nodeType": "YulIdentifier",
														"src": "12133:3:21"
													},
													"nativeSrc": "12133:23:21",
													"nodeType": "YulFunctionCall",
													"src": "12133:23:21"
												},
												{
													"kind": "number",
													"nativeSrc": "12158:2:21",
													"nodeType": "YulLiteral",
													"src": "12158:2:21",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "12129:3:21",
												"nodeType": "YulIdentifier",
												"src": "12129:3:21"
											},
											"nativeSrc": "12129:32:21",
											"nodeType": "YulFunctionCall",
											"src": "12129:32:21"
										},
										"nativeSrc": "12126:119:21",
										"nodeType": "YulIf",
										"src": "12126:119:21"
									},
									{
										"nativeSrc": "12255:131:21",
										"nodeType": "YulBlock",
										"src": "12255:131:21",
										"statements": [
											{
												"nativeSrc": "12270:15:21",
												"nodeType": "YulVariableDeclaration",
												"src": "12270:15:21",
												"value": {
													"kind": "number",
													"nativeSrc": "12284:1:21",
													"nodeType": "YulLiteral",
													"src": "12284:1:21",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "12274:6:21",
														"nodeType": "YulTypedName",
														"src": "12274:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "12299:77:21",
												"nodeType": "YulAssignment",
												"src": "12299:77:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "12348:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "12348:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "12359:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "12359:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "12344:3:21",
																"nodeType": "YulIdentifier",
																"src": "12344:3:21"
															},
															"nativeSrc": "12344:22:21",
															"nodeType": "YulFunctionCall",
															"src": "12344:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "12368:7:21",
															"nodeType": "YulIdentifier",
															"src": "12368:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_contract$_IERC20_$967",
														"nativeSrc": "12309:34:21",
														"nodeType": "YulIdentifier",
														"src": "12309:34:21"
													},
													"nativeSrc": "12309:67:21",
													"nodeType": "YulFunctionCall",
													"src": "12309:67:21"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "12299:6:21",
														"nodeType": "YulIdentifier",
														"src": "12299:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "12396:118:21",
										"nodeType": "YulBlock",
										"src": "12396:118:21",
										"statements": [
											{
												"nativeSrc": "12411:16:21",
												"nodeType": "YulVariableDeclaration",
												"src": "12411:16:21",
												"value": {
													"kind": "number",
													"nativeSrc": "12425:2:21",
													"nodeType": "YulLiteral",
													"src": "12425:2:21",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "12415:6:21",
														"nodeType": "YulTypedName",
														"src": "12415:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "12441:63:21",
												"nodeType": "YulAssignment",
												"src": "12441:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "12476:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "12476:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "12487:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "12487:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "12472:3:21",
																"nodeType": "YulIdentifier",
																"src": "12472:3:21"
															},
															"nativeSrc": "12472:22:21",
															"nodeType": "YulFunctionCall",
															"src": "12472:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "12496:7:21",
															"nodeType": "YulIdentifier",
															"src": "12496:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "12451:20:21",
														"nodeType": "YulIdentifier",
														"src": "12451:20:21"
													},
													"nativeSrc": "12451:53:21",
													"nodeType": "YulFunctionCall",
													"src": "12451:53:21"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "12441:6:21",
														"nodeType": "YulIdentifier",
														"src": "12441:6:21"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "12524:118:21",
										"nodeType": "YulBlock",
										"src": "12524:118:21",
										"statements": [
											{
												"nativeSrc": "12539:16:21",
												"nodeType": "YulVariableDeclaration",
												"src": "12539:16:21",
												"value": {
													"kind": "number",
													"nativeSrc": "12553:2:21",
													"nodeType": "YulLiteral",
													"src": "12553:2:21",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "12543:6:21",
														"nodeType": "YulTypedName",
														"src": "12543:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "12569:63:21",
												"nodeType": "YulAssignment",
												"src": "12569:63:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "12604:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "12604:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "12615:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "12615:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "12600:3:21",
																"nodeType": "YulIdentifier",
																"src": "12600:3:21"
															},
															"nativeSrc": "12600:22:21",
															"nodeType": "YulFunctionCall",
															"src": "12600:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "12624:7:21",
															"nodeType": "YulIdentifier",
															"src": "12624:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "12579:20:21",
														"nodeType": "YulIdentifier",
														"src": "12579:20:21"
													},
													"nativeSrc": "12579:53:21",
													"nodeType": "YulFunctionCall",
													"src": "12579:53:21"
												},
												"variableNames": [
													{
														"name": "value2",
														"nativeSrc": "12569:6:21",
														"nodeType": "YulIdentifier",
														"src": "12569:6:21"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_contract$_IERC20_$967t_addresst_uint256",
							"nativeSrc": "12002:647:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "12070:9:21",
									"nodeType": "YulTypedName",
									"src": "12070:9:21",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "12081:7:21",
									"nodeType": "YulTypedName",
									"src": "12081:7:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "12093:6:21",
									"nodeType": "YulTypedName",
									"src": "12093:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "12101:6:21",
									"nodeType": "YulTypedName",
									"src": "12101:6:21",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "12109:6:21",
									"nodeType": "YulTypedName",
									"src": "12109:6:21",
									"type": ""
								}
							],
							"src": "12002:647:21"
						},
						{
							"body": {
								"nativeSrc": "12683:152:21",
								"nodeType": "YulBlock",
								"src": "12683:152:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "12700:1:21",
													"nodeType": "YulLiteral",
													"src": "12700:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "12703:77:21",
													"nodeType": "YulLiteral",
													"src": "12703:77:21",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12693:6:21",
												"nodeType": "YulIdentifier",
												"src": "12693:6:21"
											},
											"nativeSrc": "12693:88:21",
											"nodeType": "YulFunctionCall",
											"src": "12693:88:21"
										},
										"nativeSrc": "12693:88:21",
										"nodeType": "YulExpressionStatement",
										"src": "12693:88:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "12797:1:21",
													"nodeType": "YulLiteral",
													"src": "12797:1:21",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "12800:4:21",
													"nodeType": "YulLiteral",
													"src": "12800:4:21",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12790:6:21",
												"nodeType": "YulIdentifier",
												"src": "12790:6:21"
											},
											"nativeSrc": "12790:15:21",
											"nodeType": "YulFunctionCall",
											"src": "12790:15:21"
										},
										"nativeSrc": "12790:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "12790:15:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "12821:1:21",
													"nodeType": "YulLiteral",
													"src": "12821:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "12824:4:21",
													"nodeType": "YulLiteral",
													"src": "12824:4:21",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "12814:6:21",
												"nodeType": "YulIdentifier",
												"src": "12814:6:21"
											},
											"nativeSrc": "12814:15:21",
											"nodeType": "YulFunctionCall",
											"src": "12814:15:21"
										},
										"nativeSrc": "12814:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "12814:15:21"
									}
								]
							},
							"name": "panic_error_0x22",
							"nativeSrc": "12655:180:21",
							"nodeType": "YulFunctionDefinition",
							"src": "12655:180:21"
						},
						{
							"body": {
								"nativeSrc": "12892:269:21",
								"nodeType": "YulBlock",
								"src": "12892:269:21",
								"statements": [
									{
										"nativeSrc": "12902:22:21",
										"nodeType": "YulAssignment",
										"src": "12902:22:21",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "12916:4:21",
													"nodeType": "YulIdentifier",
													"src": "12916:4:21"
												},
												{
													"kind": "number",
													"nativeSrc": "12922:1:21",
													"nodeType": "YulLiteral",
													"src": "12922:1:21",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "12912:3:21",
												"nodeType": "YulIdentifier",
												"src": "12912:3:21"
											},
											"nativeSrc": "12912:12:21",
											"nodeType": "YulFunctionCall",
											"src": "12912:12:21"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "12902:6:21",
												"nodeType": "YulIdentifier",
												"src": "12902:6:21"
											}
										]
									},
									{
										"nativeSrc": "12933:38:21",
										"nodeType": "YulVariableDeclaration",
										"src": "12933:38:21",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "12963:4:21",
													"nodeType": "YulIdentifier",
													"src": "12963:4:21"
												},
												{
													"kind": "number",
													"nativeSrc": "12969:1:21",
													"nodeType": "YulLiteral",
													"src": "12969:1:21",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "12959:3:21",
												"nodeType": "YulIdentifier",
												"src": "12959:3:21"
											},
											"nativeSrc": "12959:12:21",
											"nodeType": "YulFunctionCall",
											"src": "12959:12:21"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "12937:18:21",
												"nodeType": "YulTypedName",
												"src": "12937:18:21",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "13010:51:21",
											"nodeType": "YulBlock",
											"src": "13010:51:21",
											"statements": [
												{
													"nativeSrc": "13024:27:21",
													"nodeType": "YulAssignment",
													"src": "13024:27:21",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "13038:6:21",
																"nodeType": "YulIdentifier",
																"src": "13038:6:21"
															},
															{
																"kind": "number",
																"nativeSrc": "13046:4:21",
																"nodeType": "YulLiteral",
																"src": "13046:4:21",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "13034:3:21",
															"nodeType": "YulIdentifier",
															"src": "13034:3:21"
														},
														"nativeSrc": "13034:17:21",
														"nodeType": "YulFunctionCall",
														"src": "13034:17:21"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "13024:6:21",
															"nodeType": "YulIdentifier",
															"src": "13024:6:21"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "12990:18:21",
													"nodeType": "YulIdentifier",
													"src": "12990:18:21"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "12983:6:21",
												"nodeType": "YulIdentifier",
												"src": "12983:6:21"
											},
											"nativeSrc": "12983:26:21",
											"nodeType": "YulFunctionCall",
											"src": "12983:26:21"
										},
										"nativeSrc": "12980:81:21",
										"nodeType": "YulIf",
										"src": "12980:81:21"
									},
									{
										"body": {
											"nativeSrc": "13113:42:21",
											"nodeType": "YulBlock",
											"src": "13113:42:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nativeSrc": "13127:16:21",
															"nodeType": "YulIdentifier",
															"src": "13127:16:21"
														},
														"nativeSrc": "13127:18:21",
														"nodeType": "YulFunctionCall",
														"src": "13127:18:21"
													},
													"nativeSrc": "13127:18:21",
													"nodeType": "YulExpressionStatement",
													"src": "13127:18:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "13077:18:21",
													"nodeType": "YulIdentifier",
													"src": "13077:18:21"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "13100:6:21",
															"nodeType": "YulIdentifier",
															"src": "13100:6:21"
														},
														{
															"kind": "number",
															"nativeSrc": "13108:2:21",
															"nodeType": "YulLiteral",
															"src": "13108:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "13097:2:21",
														"nodeType": "YulIdentifier",
														"src": "13097:2:21"
													},
													"nativeSrc": "13097:14:21",
													"nodeType": "YulFunctionCall",
													"src": "13097:14:21"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "13074:2:21",
												"nodeType": "YulIdentifier",
												"src": "13074:2:21"
											},
											"nativeSrc": "13074:38:21",
											"nodeType": "YulFunctionCall",
											"src": "13074:38:21"
										},
										"nativeSrc": "13071:84:21",
										"nodeType": "YulIf",
										"src": "13071:84:21"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "12841:320:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "12876:4:21",
									"nodeType": "YulTypedName",
									"src": "12876:4:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "12885:6:21",
									"nodeType": "YulTypedName",
									"src": "12885:6:21",
									"type": ""
								}
							],
							"src": "12841:320:21"
						},
						{
							"body": {
								"nativeSrc": "13195:152:21",
								"nodeType": "YulBlock",
								"src": "13195:152:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "13212:1:21",
													"nodeType": "YulLiteral",
													"src": "13212:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "13215:77:21",
													"nodeType": "YulLiteral",
													"src": "13215:77:21",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13205:6:21",
												"nodeType": "YulIdentifier",
												"src": "13205:6:21"
											},
											"nativeSrc": "13205:88:21",
											"nodeType": "YulFunctionCall",
											"src": "13205:88:21"
										},
										"nativeSrc": "13205:88:21",
										"nodeType": "YulExpressionStatement",
										"src": "13205:88:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "13309:1:21",
													"nodeType": "YulLiteral",
													"src": "13309:1:21",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "13312:4:21",
													"nodeType": "YulLiteral",
													"src": "13312:4:21",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13302:6:21",
												"nodeType": "YulIdentifier",
												"src": "13302:6:21"
											},
											"nativeSrc": "13302:15:21",
											"nodeType": "YulFunctionCall",
											"src": "13302:15:21"
										},
										"nativeSrc": "13302:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "13302:15:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "13333:1:21",
													"nodeType": "YulLiteral",
													"src": "13333:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "13336:4:21",
													"nodeType": "YulLiteral",
													"src": "13336:4:21",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "13326:6:21",
												"nodeType": "YulIdentifier",
												"src": "13326:6:21"
											},
											"nativeSrc": "13326:15:21",
											"nodeType": "YulFunctionCall",
											"src": "13326:15:21"
										},
										"nativeSrc": "13326:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "13326:15:21"
									}
								]
							},
							"name": "panic_error_0x11",
							"nativeSrc": "13167:180:21",
							"nodeType": "YulFunctionDefinition",
							"src": "13167:180:21"
						},
						{
							"body": {
								"nativeSrc": "13397:147:21",
								"nodeType": "YulBlock",
								"src": "13397:147:21",
								"statements": [
									{
										"nativeSrc": "13407:25:21",
										"nodeType": "YulAssignment",
										"src": "13407:25:21",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "13430:1:21",
													"nodeType": "YulIdentifier",
													"src": "13430:1:21"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "13412:17:21",
												"nodeType": "YulIdentifier",
												"src": "13412:17:21"
											},
											"nativeSrc": "13412:20:21",
											"nodeType": "YulFunctionCall",
											"src": "13412:20:21"
										},
										"variableNames": [
											{
												"name": "x",
												"nativeSrc": "13407:1:21",
												"nodeType": "YulIdentifier",
												"src": "13407:1:21"
											}
										]
									},
									{
										"nativeSrc": "13441:25:21",
										"nodeType": "YulAssignment",
										"src": "13441:25:21",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "13464:1:21",
													"nodeType": "YulIdentifier",
													"src": "13464:1:21"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "13446:17:21",
												"nodeType": "YulIdentifier",
												"src": "13446:17:21"
											},
											"nativeSrc": "13446:20:21",
											"nodeType": "YulFunctionCall",
											"src": "13446:20:21"
										},
										"variableNames": [
											{
												"name": "y",
												"nativeSrc": "13441:1:21",
												"nodeType": "YulIdentifier",
												"src": "13441:1:21"
											}
										]
									},
									{
										"nativeSrc": "13475:16:21",
										"nodeType": "YulAssignment",
										"src": "13475:16:21",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "13486:1:21",
													"nodeType": "YulIdentifier",
													"src": "13486:1:21"
												},
												{
													"name": "y",
													"nativeSrc": "13489:1:21",
													"nodeType": "YulIdentifier",
													"src": "13489:1:21"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "13482:3:21",
												"nodeType": "YulIdentifier",
												"src": "13482:3:21"
											},
											"nativeSrc": "13482:9:21",
											"nodeType": "YulFunctionCall",
											"src": "13482:9:21"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "13475:3:21",
												"nodeType": "YulIdentifier",
												"src": "13475:3:21"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "13515:22:21",
											"nodeType": "YulBlock",
											"src": "13515:22:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "13517:16:21",
															"nodeType": "YulIdentifier",
															"src": "13517:16:21"
														},
														"nativeSrc": "13517:18:21",
														"nodeType": "YulFunctionCall",
														"src": "13517:18:21"
													},
													"nativeSrc": "13517:18:21",
													"nodeType": "YulExpressionStatement",
													"src": "13517:18:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "13507:1:21",
													"nodeType": "YulIdentifier",
													"src": "13507:1:21"
												},
												{
													"name": "sum",
													"nativeSrc": "13510:3:21",
													"nodeType": "YulIdentifier",
													"src": "13510:3:21"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "13504:2:21",
												"nodeType": "YulIdentifier",
												"src": "13504:2:21"
											},
											"nativeSrc": "13504:10:21",
											"nodeType": "YulFunctionCall",
											"src": "13504:10:21"
										},
										"nativeSrc": "13501:36:21",
										"nodeType": "YulIf",
										"src": "13501:36:21"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "13353:191:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "13384:1:21",
									"nodeType": "YulTypedName",
									"src": "13384:1:21",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "13387:1:21",
									"nodeType": "YulTypedName",
									"src": "13387:1:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "13393:3:21",
									"nodeType": "YulTypedName",
									"src": "13393:3:21",
									"type": ""
								}
							],
							"src": "13353:191:21"
						},
						{
							"body": {
								"nativeSrc": "13656:67:21",
								"nodeType": "YulBlock",
								"src": "13656:67:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "13678:6:21",
															"nodeType": "YulIdentifier",
															"src": "13678:6:21"
														},
														{
															"kind": "number",
															"nativeSrc": "13686:1:21",
															"nodeType": "YulLiteral",
															"src": "13686:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13674:3:21",
														"nodeType": "YulIdentifier",
														"src": "13674:3:21"
													},
													"nativeSrc": "13674:14:21",
													"nodeType": "YulFunctionCall",
													"src": "13674:14:21"
												},
												{
													"hexValue": "5772617070656452353a20636170206578636565646564",
													"kind": "string",
													"nativeSrc": "13690:25:21",
													"nodeType": "YulLiteral",
													"src": "13690:25:21",
													"type": "",
													"value": "WrappedR5: cap exceeded"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13667:6:21",
												"nodeType": "YulIdentifier",
												"src": "13667:6:21"
											},
											"nativeSrc": "13667:49:21",
											"nodeType": "YulFunctionCall",
											"src": "13667:49:21"
										},
										"nativeSrc": "13667:49:21",
										"nodeType": "YulExpressionStatement",
										"src": "13667:49:21"
									}
								]
							},
							"name": "store_literal_in_memory_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a",
							"nativeSrc": "13550:173:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "13648:6:21",
									"nodeType": "YulTypedName",
									"src": "13648:6:21",
									"type": ""
								}
							],
							"src": "13550:173:21"
						},
						{
							"body": {
								"nativeSrc": "13875:220:21",
								"nodeType": "YulBlock",
								"src": "13875:220:21",
								"statements": [
									{
										"nativeSrc": "13885:74:21",
										"nodeType": "YulAssignment",
										"src": "13885:74:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "13951:3:21",
													"nodeType": "YulIdentifier",
													"src": "13951:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "13956:2:21",
													"nodeType": "YulLiteral",
													"src": "13956:2:21",
													"type": "",
													"value": "23"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "13892:58:21",
												"nodeType": "YulIdentifier",
												"src": "13892:58:21"
											},
											"nativeSrc": "13892:67:21",
											"nodeType": "YulFunctionCall",
											"src": "13892:67:21"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "13885:3:21",
												"nodeType": "YulIdentifier",
												"src": "13885:3:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "14057:3:21",
													"nodeType": "YulIdentifier",
													"src": "14057:3:21"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a",
												"nativeSrc": "13968:88:21",
												"nodeType": "YulIdentifier",
												"src": "13968:88:21"
											},
											"nativeSrc": "13968:93:21",
											"nodeType": "YulFunctionCall",
											"src": "13968:93:21"
										},
										"nativeSrc": "13968:93:21",
										"nodeType": "YulExpressionStatement",
										"src": "13968:93:21"
									},
									{
										"nativeSrc": "14070:19:21",
										"nodeType": "YulAssignment",
										"src": "14070:19:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "14081:3:21",
													"nodeType": "YulIdentifier",
													"src": "14081:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "14086:2:21",
													"nodeType": "YulLiteral",
													"src": "14086:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "14077:3:21",
												"nodeType": "YulIdentifier",
												"src": "14077:3:21"
											},
											"nativeSrc": "14077:12:21",
											"nodeType": "YulFunctionCall",
											"src": "14077:12:21"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "14070:3:21",
												"nodeType": "YulIdentifier",
												"src": "14070:3:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "13729:366:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "13863:3:21",
									"nodeType": "YulTypedName",
									"src": "13863:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "13871:3:21",
									"nodeType": "YulTypedName",
									"src": "13871:3:21",
									"type": ""
								}
							],
							"src": "13729:366:21"
						},
						{
							"body": {
								"nativeSrc": "14272:248:21",
								"nodeType": "YulBlock",
								"src": "14272:248:21",
								"statements": [
									{
										"nativeSrc": "14282:26:21",
										"nodeType": "YulAssignment",
										"src": "14282:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "14294:9:21",
													"nodeType": "YulIdentifier",
													"src": "14294:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "14305:2:21",
													"nodeType": "YulLiteral",
													"src": "14305:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "14290:3:21",
												"nodeType": "YulIdentifier",
												"src": "14290:3:21"
											},
											"nativeSrc": "14290:18:21",
											"nodeType": "YulFunctionCall",
											"src": "14290:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "14282:4:21",
												"nodeType": "YulIdentifier",
												"src": "14282:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "14329:9:21",
															"nodeType": "YulIdentifier",
															"src": "14329:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "14340:1:21",
															"nodeType": "YulLiteral",
															"src": "14340:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "14325:3:21",
														"nodeType": "YulIdentifier",
														"src": "14325:3:21"
													},
													"nativeSrc": "14325:17:21",
													"nodeType": "YulFunctionCall",
													"src": "14325:17:21"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "14348:4:21",
															"nodeType": "YulIdentifier",
															"src": "14348:4:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "14354:9:21",
															"nodeType": "YulIdentifier",
															"src": "14354:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "14344:3:21",
														"nodeType": "YulIdentifier",
														"src": "14344:3:21"
													},
													"nativeSrc": "14344:20:21",
													"nodeType": "YulFunctionCall",
													"src": "14344:20:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14318:6:21",
												"nodeType": "YulIdentifier",
												"src": "14318:6:21"
											},
											"nativeSrc": "14318:47:21",
											"nodeType": "YulFunctionCall",
											"src": "14318:47:21"
										},
										"nativeSrc": "14318:47:21",
										"nodeType": "YulExpressionStatement",
										"src": "14318:47:21"
									},
									{
										"nativeSrc": "14374:139:21",
										"nodeType": "YulAssignment",
										"src": "14374:139:21",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "14508:4:21",
													"nodeType": "YulIdentifier",
													"src": "14508:4:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "14382:124:21",
												"nodeType": "YulIdentifier",
												"src": "14382:124:21"
											},
											"nativeSrc": "14382:131:21",
											"nodeType": "YulFunctionCall",
											"src": "14382:131:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "14374:4:21",
												"nodeType": "YulIdentifier",
												"src": "14374:4:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "14101:419:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "14252:9:21",
									"nodeType": "YulTypedName",
									"src": "14252:9:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "14267:4:21",
									"nodeType": "YulTypedName",
									"src": "14267:4:21",
									"type": ""
								}
							],
							"src": "14101:419:21"
						},
						{
							"body": {
								"nativeSrc": "14632:123:21",
								"nodeType": "YulBlock",
								"src": "14632:123:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "14654:6:21",
															"nodeType": "YulIdentifier",
															"src": "14654:6:21"
														},
														{
															"kind": "number",
															"nativeSrc": "14662:1:21",
															"nodeType": "YulLiteral",
															"src": "14662:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "14650:3:21",
														"nodeType": "YulIdentifier",
														"src": "14650:3:21"
													},
													"nativeSrc": "14650:14:21",
													"nodeType": "YulFunctionCall",
													"src": "14650:14:21"
												},
												{
													"hexValue": "5772617070656452353a2063616c6c6572206973206e6f74207468652070656e",
													"kind": "string",
													"nativeSrc": "14666:34:21",
													"nodeType": "YulLiteral",
													"src": "14666:34:21",
													"type": "",
													"value": "WrappedR5: caller is not the pen"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14643:6:21",
												"nodeType": "YulIdentifier",
												"src": "14643:6:21"
											},
											"nativeSrc": "14643:58:21",
											"nodeType": "YulFunctionCall",
											"src": "14643:58:21"
										},
										"nativeSrc": "14643:58:21",
										"nodeType": "YulExpressionStatement",
										"src": "14643:58:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "14722:6:21",
															"nodeType": "YulIdentifier",
															"src": "14722:6:21"
														},
														{
															"kind": "number",
															"nativeSrc": "14730:2:21",
															"nodeType": "YulLiteral",
															"src": "14730:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "14718:3:21",
														"nodeType": "YulIdentifier",
														"src": "14718:3:21"
													},
													"nativeSrc": "14718:15:21",
													"nodeType": "YulFunctionCall",
													"src": "14718:15:21"
												},
												{
													"hexValue": "64696e67206f776e6572",
													"kind": "string",
													"nativeSrc": "14735:12:21",
													"nodeType": "YulLiteral",
													"src": "14735:12:21",
													"type": "",
													"value": "ding owner"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14711:6:21",
												"nodeType": "YulIdentifier",
												"src": "14711:6:21"
											},
											"nativeSrc": "14711:37:21",
											"nodeType": "YulFunctionCall",
											"src": "14711:37:21"
										},
										"nativeSrc": "14711:37:21",
										"nodeType": "YulExpressionStatement",
										"src": "14711:37:21"
									}
								]
							},
							"name": "store_literal_in_memory_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4",
							"nativeSrc": "14526:229:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "14624:6:21",
									"nodeType": "YulTypedName",
									"src": "14624:6:21",
									"type": ""
								}
							],
							"src": "14526:229:21"
						},
						{
							"body": {
								"nativeSrc": "14907:220:21",
								"nodeType": "YulBlock",
								"src": "14907:220:21",
								"statements": [
									{
										"nativeSrc": "14917:74:21",
										"nodeType": "YulAssignment",
										"src": "14917:74:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "14983:3:21",
													"nodeType": "YulIdentifier",
													"src": "14983:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "14988:2:21",
													"nodeType": "YulLiteral",
													"src": "14988:2:21",
													"type": "",
													"value": "42"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "14924:58:21",
												"nodeType": "YulIdentifier",
												"src": "14924:58:21"
											},
											"nativeSrc": "14924:67:21",
											"nodeType": "YulFunctionCall",
											"src": "14924:67:21"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "14917:3:21",
												"nodeType": "YulIdentifier",
												"src": "14917:3:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "15089:3:21",
													"nodeType": "YulIdentifier",
													"src": "15089:3:21"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4",
												"nativeSrc": "15000:88:21",
												"nodeType": "YulIdentifier",
												"src": "15000:88:21"
											},
											"nativeSrc": "15000:93:21",
											"nodeType": "YulFunctionCall",
											"src": "15000:93:21"
										},
										"nativeSrc": "15000:93:21",
										"nodeType": "YulExpressionStatement",
										"src": "15000:93:21"
									},
									{
										"nativeSrc": "15102:19:21",
										"nodeType": "YulAssignment",
										"src": "15102:19:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "15113:3:21",
													"nodeType": "YulIdentifier",
													"src": "15113:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "15118:2:21",
													"nodeType": "YulLiteral",
													"src": "15118:2:21",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "15109:3:21",
												"nodeType": "YulIdentifier",
												"src": "15109:3:21"
											},
											"nativeSrc": "15109:12:21",
											"nodeType": "YulFunctionCall",
											"src": "15109:12:21"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "15102:3:21",
												"nodeType": "YulIdentifier",
												"src": "15102:3:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "14761:366:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "14895:3:21",
									"nodeType": "YulTypedName",
									"src": "14895:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "14903:3:21",
									"nodeType": "YulTypedName",
									"src": "14903:3:21",
									"type": ""
								}
							],
							"src": "14761:366:21"
						},
						{
							"body": {
								"nativeSrc": "15304:248:21",
								"nodeType": "YulBlock",
								"src": "15304:248:21",
								"statements": [
									{
										"nativeSrc": "15314:26:21",
										"nodeType": "YulAssignment",
										"src": "15314:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "15326:9:21",
													"nodeType": "YulIdentifier",
													"src": "15326:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "15337:2:21",
													"nodeType": "YulLiteral",
													"src": "15337:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "15322:3:21",
												"nodeType": "YulIdentifier",
												"src": "15322:3:21"
											},
											"nativeSrc": "15322:18:21",
											"nodeType": "YulFunctionCall",
											"src": "15322:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "15314:4:21",
												"nodeType": "YulIdentifier",
												"src": "15314:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "15361:9:21",
															"nodeType": "YulIdentifier",
															"src": "15361:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "15372:1:21",
															"nodeType": "YulLiteral",
															"src": "15372:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "15357:3:21",
														"nodeType": "YulIdentifier",
														"src": "15357:3:21"
													},
													"nativeSrc": "15357:17:21",
													"nodeType": "YulFunctionCall",
													"src": "15357:17:21"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "15380:4:21",
															"nodeType": "YulIdentifier",
															"src": "15380:4:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "15386:9:21",
															"nodeType": "YulIdentifier",
															"src": "15386:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "15376:3:21",
														"nodeType": "YulIdentifier",
														"src": "15376:3:21"
													},
													"nativeSrc": "15376:20:21",
													"nodeType": "YulFunctionCall",
													"src": "15376:20:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "15350:6:21",
												"nodeType": "YulIdentifier",
												"src": "15350:6:21"
											},
											"nativeSrc": "15350:47:21",
											"nodeType": "YulFunctionCall",
											"src": "15350:47:21"
										},
										"nativeSrc": "15350:47:21",
										"nodeType": "YulExpressionStatement",
										"src": "15350:47:21"
									},
									{
										"nativeSrc": "15406:139:21",
										"nodeType": "YulAssignment",
										"src": "15406:139:21",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "15540:4:21",
													"nodeType": "YulIdentifier",
													"src": "15540:4:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "15414:124:21",
												"nodeType": "YulIdentifier",
												"src": "15414:124:21"
											},
											"nativeSrc": "15414:131:21",
											"nodeType": "YulFunctionCall",
											"src": "15414:131:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "15406:4:21",
												"nodeType": "YulIdentifier",
												"src": "15406:4:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "15133:419:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "15284:9:21",
									"nodeType": "YulTypedName",
									"src": "15284:9:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "15299:4:21",
									"nodeType": "YulTypedName",
									"src": "15299:4:21",
									"type": ""
								}
							],
							"src": "15133:419:21"
						},
						{
							"body": {
								"nativeSrc": "15586:152:21",
								"nodeType": "YulBlock",
								"src": "15586:152:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "15603:1:21",
													"nodeType": "YulLiteral",
													"src": "15603:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "15606:77:21",
													"nodeType": "YulLiteral",
													"src": "15606:77:21",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "15596:6:21",
												"nodeType": "YulIdentifier",
												"src": "15596:6:21"
											},
											"nativeSrc": "15596:88:21",
											"nodeType": "YulFunctionCall",
											"src": "15596:88:21"
										},
										"nativeSrc": "15596:88:21",
										"nodeType": "YulExpressionStatement",
										"src": "15596:88:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "15700:1:21",
													"nodeType": "YulLiteral",
													"src": "15700:1:21",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "15703:4:21",
													"nodeType": "YulLiteral",
													"src": "15703:4:21",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "15693:6:21",
												"nodeType": "YulIdentifier",
												"src": "15693:6:21"
											},
											"nativeSrc": "15693:15:21",
											"nodeType": "YulFunctionCall",
											"src": "15693:15:21"
										},
										"nativeSrc": "15693:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "15693:15:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "15724:1:21",
													"nodeType": "YulLiteral",
													"src": "15724:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "15727:4:21",
													"nodeType": "YulLiteral",
													"src": "15727:4:21",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "15717:6:21",
												"nodeType": "YulIdentifier",
												"src": "15717:6:21"
											},
											"nativeSrc": "15717:15:21",
											"nodeType": "YulFunctionCall",
											"src": "15717:15:21"
										},
										"nativeSrc": "15717:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "15717:15:21"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "15558:180:21",
							"nodeType": "YulFunctionDefinition",
							"src": "15558:180:21"
						},
						{
							"body": {
								"nativeSrc": "15850:117:21",
								"nodeType": "YulBlock",
								"src": "15850:117:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "15872:6:21",
															"nodeType": "YulIdentifier",
															"src": "15872:6:21"
														},
														{
															"kind": "number",
															"nativeSrc": "15880:1:21",
															"nodeType": "YulLiteral",
															"src": "15880:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "15868:3:21",
														"nodeType": "YulIdentifier",
														"src": "15868:3:21"
													},
													"nativeSrc": "15868:14:21",
													"nodeType": "YulFunctionCall",
													"src": "15868:14:21"
												},
												{
													"hexValue": "5772617070656452353a206e6577206f776e6572206973207a65726f20616464",
													"kind": "string",
													"nativeSrc": "15884:34:21",
													"nodeType": "YulLiteral",
													"src": "15884:34:21",
													"type": "",
													"value": "WrappedR5: new owner is zero add"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "15861:6:21",
												"nodeType": "YulIdentifier",
												"src": "15861:6:21"
											},
											"nativeSrc": "15861:58:21",
											"nodeType": "YulFunctionCall",
											"src": "15861:58:21"
										},
										"nativeSrc": "15861:58:21",
										"nodeType": "YulExpressionStatement",
										"src": "15861:58:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "15940:6:21",
															"nodeType": "YulIdentifier",
															"src": "15940:6:21"
														},
														{
															"kind": "number",
															"nativeSrc": "15948:2:21",
															"nodeType": "YulLiteral",
															"src": "15948:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "15936:3:21",
														"nodeType": "YulIdentifier",
														"src": "15936:3:21"
													},
													"nativeSrc": "15936:15:21",
													"nodeType": "YulFunctionCall",
													"src": "15936:15:21"
												},
												{
													"hexValue": "72657373",
													"kind": "string",
													"nativeSrc": "15953:6:21",
													"nodeType": "YulLiteral",
													"src": "15953:6:21",
													"type": "",
													"value": "ress"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "15929:6:21",
												"nodeType": "YulIdentifier",
												"src": "15929:6:21"
											},
											"nativeSrc": "15929:31:21",
											"nodeType": "YulFunctionCall",
											"src": "15929:31:21"
										},
										"nativeSrc": "15929:31:21",
										"nodeType": "YulExpressionStatement",
										"src": "15929:31:21"
									}
								]
							},
							"name": "store_literal_in_memory_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15",
							"nativeSrc": "15744:223:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "15842:6:21",
									"nodeType": "YulTypedName",
									"src": "15842:6:21",
									"type": ""
								}
							],
							"src": "15744:223:21"
						},
						{
							"body": {
								"nativeSrc": "16119:220:21",
								"nodeType": "YulBlock",
								"src": "16119:220:21",
								"statements": [
									{
										"nativeSrc": "16129:74:21",
										"nodeType": "YulAssignment",
										"src": "16129:74:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "16195:3:21",
													"nodeType": "YulIdentifier",
													"src": "16195:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "16200:2:21",
													"nodeType": "YulLiteral",
													"src": "16200:2:21",
													"type": "",
													"value": "36"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "16136:58:21",
												"nodeType": "YulIdentifier",
												"src": "16136:58:21"
											},
											"nativeSrc": "16136:67:21",
											"nodeType": "YulFunctionCall",
											"src": "16136:67:21"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "16129:3:21",
												"nodeType": "YulIdentifier",
												"src": "16129:3:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "16301:3:21",
													"nodeType": "YulIdentifier",
													"src": "16301:3:21"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15",
												"nativeSrc": "16212:88:21",
												"nodeType": "YulIdentifier",
												"src": "16212:88:21"
											},
											"nativeSrc": "16212:93:21",
											"nodeType": "YulFunctionCall",
											"src": "16212:93:21"
										},
										"nativeSrc": "16212:93:21",
										"nodeType": "YulExpressionStatement",
										"src": "16212:93:21"
									},
									{
										"nativeSrc": "16314:19:21",
										"nodeType": "YulAssignment",
										"src": "16314:19:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "16325:3:21",
													"nodeType": "YulIdentifier",
													"src": "16325:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "16330:2:21",
													"nodeType": "YulLiteral",
													"src": "16330:2:21",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "16321:3:21",
												"nodeType": "YulIdentifier",
												"src": "16321:3:21"
											},
											"nativeSrc": "16321:12:21",
											"nodeType": "YulFunctionCall",
											"src": "16321:12:21"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "16314:3:21",
												"nodeType": "YulIdentifier",
												"src": "16314:3:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "15973:366:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "16107:3:21",
									"nodeType": "YulTypedName",
									"src": "16107:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "16115:3:21",
									"nodeType": "YulTypedName",
									"src": "16115:3:21",
									"type": ""
								}
							],
							"src": "15973:366:21"
						},
						{
							"body": {
								"nativeSrc": "16516:248:21",
								"nodeType": "YulBlock",
								"src": "16516:248:21",
								"statements": [
									{
										"nativeSrc": "16526:26:21",
										"nodeType": "YulAssignment",
										"src": "16526:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "16538:9:21",
													"nodeType": "YulIdentifier",
													"src": "16538:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "16549:2:21",
													"nodeType": "YulLiteral",
													"src": "16549:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "16534:3:21",
												"nodeType": "YulIdentifier",
												"src": "16534:3:21"
											},
											"nativeSrc": "16534:18:21",
											"nodeType": "YulFunctionCall",
											"src": "16534:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "16526:4:21",
												"nodeType": "YulIdentifier",
												"src": "16526:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "16573:9:21",
															"nodeType": "YulIdentifier",
															"src": "16573:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "16584:1:21",
															"nodeType": "YulLiteral",
															"src": "16584:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "16569:3:21",
														"nodeType": "YulIdentifier",
														"src": "16569:3:21"
													},
													"nativeSrc": "16569:17:21",
													"nodeType": "YulFunctionCall",
													"src": "16569:17:21"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "16592:4:21",
															"nodeType": "YulIdentifier",
															"src": "16592:4:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "16598:9:21",
															"nodeType": "YulIdentifier",
															"src": "16598:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "16588:3:21",
														"nodeType": "YulIdentifier",
														"src": "16588:3:21"
													},
													"nativeSrc": "16588:20:21",
													"nodeType": "YulFunctionCall",
													"src": "16588:20:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "16562:6:21",
												"nodeType": "YulIdentifier",
												"src": "16562:6:21"
											},
											"nativeSrc": "16562:47:21",
											"nodeType": "YulFunctionCall",
											"src": "16562:47:21"
										},
										"nativeSrc": "16562:47:21",
										"nodeType": "YulExpressionStatement",
										"src": "16562:47:21"
									},
									{
										"nativeSrc": "16618:139:21",
										"nodeType": "YulAssignment",
										"src": "16618:139:21",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "16752:4:21",
													"nodeType": "YulIdentifier",
													"src": "16752:4:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "16626:124:21",
												"nodeType": "YulIdentifier",
												"src": "16626:124:21"
											},
											"nativeSrc": "16626:131:21",
											"nodeType": "YulFunctionCall",
											"src": "16626:131:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "16618:4:21",
												"nodeType": "YulIdentifier",
												"src": "16618:4:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "16345:419:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "16496:9:21",
									"nodeType": "YulTypedName",
									"src": "16496:9:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "16511:4:21",
									"nodeType": "YulTypedName",
									"src": "16511:4:21",
									"type": ""
								}
							],
							"src": "16345:419:21"
						},
						{
							"body": {
								"nativeSrc": "17008:537:21",
								"nodeType": "YulBlock",
								"src": "17008:537:21",
								"statements": [
									{
										"nativeSrc": "17018:27:21",
										"nodeType": "YulAssignment",
										"src": "17018:27:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "17030:9:21",
													"nodeType": "YulIdentifier",
													"src": "17030:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "17041:3:21",
													"nodeType": "YulLiteral",
													"src": "17041:3:21",
													"type": "",
													"value": "192"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "17026:3:21",
												"nodeType": "YulIdentifier",
												"src": "17026:3:21"
											},
											"nativeSrc": "17026:19:21",
											"nodeType": "YulFunctionCall",
											"src": "17026:19:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "17018:4:21",
												"nodeType": "YulIdentifier",
												"src": "17018:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "17099:6:21",
													"nodeType": "YulIdentifier",
													"src": "17099:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17112:9:21",
															"nodeType": "YulIdentifier",
															"src": "17112:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "17123:1:21",
															"nodeType": "YulLiteral",
															"src": "17123:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17108:3:21",
														"nodeType": "YulIdentifier",
														"src": "17108:3:21"
													},
													"nativeSrc": "17108:17:21",
													"nodeType": "YulFunctionCall",
													"src": "17108:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "17055:43:21",
												"nodeType": "YulIdentifier",
												"src": "17055:43:21"
											},
											"nativeSrc": "17055:71:21",
											"nodeType": "YulFunctionCall",
											"src": "17055:71:21"
										},
										"nativeSrc": "17055:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "17055:71:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "17180:6:21",
													"nodeType": "YulIdentifier",
													"src": "17180:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17193:9:21",
															"nodeType": "YulIdentifier",
															"src": "17193:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "17204:2:21",
															"nodeType": "YulLiteral",
															"src": "17204:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17189:3:21",
														"nodeType": "YulIdentifier",
														"src": "17189:3:21"
													},
													"nativeSrc": "17189:18:21",
													"nodeType": "YulFunctionCall",
													"src": "17189:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "17136:43:21",
												"nodeType": "YulIdentifier",
												"src": "17136:43:21"
											},
											"nativeSrc": "17136:72:21",
											"nodeType": "YulFunctionCall",
											"src": "17136:72:21"
										},
										"nativeSrc": "17136:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "17136:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "17262:6:21",
													"nodeType": "YulIdentifier",
													"src": "17262:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17275:9:21",
															"nodeType": "YulIdentifier",
															"src": "17275:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "17286:2:21",
															"nodeType": "YulLiteral",
															"src": "17286:2:21",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17271:3:21",
														"nodeType": "YulIdentifier",
														"src": "17271:3:21"
													},
													"nativeSrc": "17271:18:21",
													"nodeType": "YulFunctionCall",
													"src": "17271:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "17218:43:21",
												"nodeType": "YulIdentifier",
												"src": "17218:43:21"
											},
											"nativeSrc": "17218:72:21",
											"nodeType": "YulFunctionCall",
											"src": "17218:72:21"
										},
										"nativeSrc": "17218:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "17218:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value3",
													"nativeSrc": "17344:6:21",
													"nodeType": "YulIdentifier",
													"src": "17344:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17357:9:21",
															"nodeType": "YulIdentifier",
															"src": "17357:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "17368:2:21",
															"nodeType": "YulLiteral",
															"src": "17368:2:21",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17353:3:21",
														"nodeType": "YulIdentifier",
														"src": "17353:3:21"
													},
													"nativeSrc": "17353:18:21",
													"nodeType": "YulFunctionCall",
													"src": "17353:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "17300:43:21",
												"nodeType": "YulIdentifier",
												"src": "17300:43:21"
											},
											"nativeSrc": "17300:72:21",
											"nodeType": "YulFunctionCall",
											"src": "17300:72:21"
										},
										"nativeSrc": "17300:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "17300:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value4",
													"nativeSrc": "17426:6:21",
													"nodeType": "YulIdentifier",
													"src": "17426:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17439:9:21",
															"nodeType": "YulIdentifier",
															"src": "17439:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "17450:3:21",
															"nodeType": "YulLiteral",
															"src": "17450:3:21",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17435:3:21",
														"nodeType": "YulIdentifier",
														"src": "17435:3:21"
													},
													"nativeSrc": "17435:19:21",
													"nodeType": "YulFunctionCall",
													"src": "17435:19:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "17382:43:21",
												"nodeType": "YulIdentifier",
												"src": "17382:43:21"
											},
											"nativeSrc": "17382:73:21",
											"nodeType": "YulFunctionCall",
											"src": "17382:73:21"
										},
										"nativeSrc": "17382:73:21",
										"nodeType": "YulExpressionStatement",
										"src": "17382:73:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value5",
													"nativeSrc": "17509:6:21",
													"nodeType": "YulIdentifier",
													"src": "17509:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17522:9:21",
															"nodeType": "YulIdentifier",
															"src": "17522:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "17533:3:21",
															"nodeType": "YulLiteral",
															"src": "17533:3:21",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17518:3:21",
														"nodeType": "YulIdentifier",
														"src": "17518:3:21"
													},
													"nativeSrc": "17518:19:21",
													"nodeType": "YulFunctionCall",
													"src": "17518:19:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "17465:43:21",
												"nodeType": "YulIdentifier",
												"src": "17465:43:21"
											},
											"nativeSrc": "17465:73:21",
											"nodeType": "YulFunctionCall",
											"src": "17465:73:21"
										},
										"nativeSrc": "17465:73:21",
										"nodeType": "YulExpressionStatement",
										"src": "17465:73:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "16770:775:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "16940:9:21",
									"nodeType": "YulTypedName",
									"src": "16940:9:21",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "16952:6:21",
									"nodeType": "YulTypedName",
									"src": "16952:6:21",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "16960:6:21",
									"nodeType": "YulTypedName",
									"src": "16960:6:21",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "16968:6:21",
									"nodeType": "YulTypedName",
									"src": "16968:6:21",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "16976:6:21",
									"nodeType": "YulTypedName",
									"src": "16976:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "16984:6:21",
									"nodeType": "YulTypedName",
									"src": "16984:6:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "16992:6:21",
									"nodeType": "YulTypedName",
									"src": "16992:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "17003:4:21",
									"nodeType": "YulTypedName",
									"src": "17003:4:21",
									"type": ""
								}
							],
							"src": "16770:775:21"
						},
						{
							"body": {
								"nativeSrc": "17677:206:21",
								"nodeType": "YulBlock",
								"src": "17677:206:21",
								"statements": [
									{
										"nativeSrc": "17687:26:21",
										"nodeType": "YulAssignment",
										"src": "17687:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "17699:9:21",
													"nodeType": "YulIdentifier",
													"src": "17699:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "17710:2:21",
													"nodeType": "YulLiteral",
													"src": "17710:2:21",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "17695:3:21",
												"nodeType": "YulIdentifier",
												"src": "17695:3:21"
											},
											"nativeSrc": "17695:18:21",
											"nodeType": "YulFunctionCall",
											"src": "17695:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "17687:4:21",
												"nodeType": "YulIdentifier",
												"src": "17687:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "17767:6:21",
													"nodeType": "YulIdentifier",
													"src": "17767:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17780:9:21",
															"nodeType": "YulIdentifier",
															"src": "17780:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "17791:1:21",
															"nodeType": "YulLiteral",
															"src": "17791:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17776:3:21",
														"nodeType": "YulIdentifier",
														"src": "17776:3:21"
													},
													"nativeSrc": "17776:17:21",
													"nodeType": "YulFunctionCall",
													"src": "17776:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "17723:43:21",
												"nodeType": "YulIdentifier",
												"src": "17723:43:21"
											},
											"nativeSrc": "17723:71:21",
											"nodeType": "YulFunctionCall",
											"src": "17723:71:21"
										},
										"nativeSrc": "17723:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "17723:71:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "17848:6:21",
													"nodeType": "YulIdentifier",
													"src": "17848:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17861:9:21",
															"nodeType": "YulIdentifier",
															"src": "17861:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "17872:2:21",
															"nodeType": "YulLiteral",
															"src": "17872:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17857:3:21",
														"nodeType": "YulIdentifier",
														"src": "17857:3:21"
													},
													"nativeSrc": "17857:18:21",
													"nodeType": "YulFunctionCall",
													"src": "17857:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "17804:43:21",
												"nodeType": "YulIdentifier",
												"src": "17804:43:21"
											},
											"nativeSrc": "17804:72:21",
											"nodeType": "YulFunctionCall",
											"src": "17804:72:21"
										},
										"nativeSrc": "17804:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "17804:72:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
							"nativeSrc": "17551:332:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "17641:9:21",
									"nodeType": "YulTypedName",
									"src": "17641:9:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "17653:6:21",
									"nodeType": "YulTypedName",
									"src": "17653:6:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "17661:6:21",
									"nodeType": "YulTypedName",
									"src": "17661:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "17672:4:21",
									"nodeType": "YulTypedName",
									"src": "17672:4:21",
									"type": ""
								}
							],
							"src": "17551:332:21"
						},
						{
							"body": {
								"nativeSrc": "18015:206:21",
								"nodeType": "YulBlock",
								"src": "18015:206:21",
								"statements": [
									{
										"nativeSrc": "18025:26:21",
										"nodeType": "YulAssignment",
										"src": "18025:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "18037:9:21",
													"nodeType": "YulIdentifier",
													"src": "18037:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "18048:2:21",
													"nodeType": "YulLiteral",
													"src": "18048:2:21",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "18033:3:21",
												"nodeType": "YulIdentifier",
												"src": "18033:3:21"
											},
											"nativeSrc": "18033:18:21",
											"nodeType": "YulFunctionCall",
											"src": "18033:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "18025:4:21",
												"nodeType": "YulIdentifier",
												"src": "18025:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "18105:6:21",
													"nodeType": "YulIdentifier",
													"src": "18105:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "18118:9:21",
															"nodeType": "YulIdentifier",
															"src": "18118:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "18129:1:21",
															"nodeType": "YulLiteral",
															"src": "18129:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "18114:3:21",
														"nodeType": "YulIdentifier",
														"src": "18114:3:21"
													},
													"nativeSrc": "18114:17:21",
													"nodeType": "YulFunctionCall",
													"src": "18114:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "18061:43:21",
												"nodeType": "YulIdentifier",
												"src": "18061:43:21"
											},
											"nativeSrc": "18061:71:21",
											"nodeType": "YulFunctionCall",
											"src": "18061:71:21"
										},
										"nativeSrc": "18061:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "18061:71:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "18186:6:21",
													"nodeType": "YulIdentifier",
													"src": "18186:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "18199:9:21",
															"nodeType": "YulIdentifier",
															"src": "18199:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "18210:2:21",
															"nodeType": "YulLiteral",
															"src": "18210:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "18195:3:21",
														"nodeType": "YulIdentifier",
														"src": "18195:3:21"
													},
													"nativeSrc": "18195:18:21",
													"nodeType": "YulFunctionCall",
													"src": "18195:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "18142:43:21",
												"nodeType": "YulIdentifier",
												"src": "18142:43:21"
											},
											"nativeSrc": "18142:72:21",
											"nodeType": "YulFunctionCall",
											"src": "18142:72:21"
										},
										"nativeSrc": "18142:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "18142:72:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
							"nativeSrc": "17889:332:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "17979:9:21",
									"nodeType": "YulTypedName",
									"src": "17979:9:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "17991:6:21",
									"nodeType": "YulTypedName",
									"src": "17991:6:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "17999:6:21",
									"nodeType": "YulTypedName",
									"src": "17999:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "18010:4:21",
									"nodeType": "YulTypedName",
									"src": "18010:4:21",
									"type": ""
								}
							],
							"src": "17889:332:21"
						},
						{
							"body": {
								"nativeSrc": "18267:76:21",
								"nodeType": "YulBlock",
								"src": "18267:76:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "18321:16:21",
											"nodeType": "YulBlock",
											"src": "18321:16:21",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "18330:1:21",
																"nodeType": "YulLiteral",
																"src": "18330:1:21",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "18333:1:21",
																"nodeType": "YulLiteral",
																"src": "18333:1:21",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "18323:6:21",
															"nodeType": "YulIdentifier",
															"src": "18323:6:21"
														},
														"nativeSrc": "18323:12:21",
														"nodeType": "YulFunctionCall",
														"src": "18323:12:21"
													},
													"nativeSrc": "18323:12:21",
													"nodeType": "YulExpressionStatement",
													"src": "18323:12:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "18290:5:21",
															"nodeType": "YulIdentifier",
															"src": "18290:5:21"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "18312:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "18312:5:21"
																}
															],
															"functionName": {
																"name": "cleanup_t_bool",
																"nativeSrc": "18297:14:21",
																"nodeType": "YulIdentifier",
																"src": "18297:14:21"
															},
															"nativeSrc": "18297:21:21",
															"nodeType": "YulFunctionCall",
															"src": "18297:21:21"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "18287:2:21",
														"nodeType": "YulIdentifier",
														"src": "18287:2:21"
													},
													"nativeSrc": "18287:32:21",
													"nodeType": "YulFunctionCall",
													"src": "18287:32:21"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "18280:6:21",
												"nodeType": "YulIdentifier",
												"src": "18280:6:21"
											},
											"nativeSrc": "18280:40:21",
											"nodeType": "YulFunctionCall",
											"src": "18280:40:21"
										},
										"nativeSrc": "18277:60:21",
										"nodeType": "YulIf",
										"src": "18277:60:21"
									}
								]
							},
							"name": "validator_revert_t_bool",
							"nativeSrc": "18227:116:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "18260:5:21",
									"nodeType": "YulTypedName",
									"src": "18260:5:21",
									"type": ""
								}
							],
							"src": "18227:116:21"
						},
						{
							"body": {
								"nativeSrc": "18409:77:21",
								"nodeType": "YulBlock",
								"src": "18409:77:21",
								"statements": [
									{
										"nativeSrc": "18419:22:21",
										"nodeType": "YulAssignment",
										"src": "18419:22:21",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "18434:6:21",
													"nodeType": "YulIdentifier",
													"src": "18434:6:21"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "18428:5:21",
												"nodeType": "YulIdentifier",
												"src": "18428:5:21"
											},
											"nativeSrc": "18428:13:21",
											"nodeType": "YulFunctionCall",
											"src": "18428:13:21"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "18419:5:21",
												"nodeType": "YulIdentifier",
												"src": "18419:5:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "18474:5:21",
													"nodeType": "YulIdentifier",
													"src": "18474:5:21"
												}
											],
											"functionName": {
												"name": "validator_revert_t_bool",
												"nativeSrc": "18450:23:21",
												"nodeType": "YulIdentifier",
												"src": "18450:23:21"
											},
											"nativeSrc": "18450:30:21",
											"nodeType": "YulFunctionCall",
											"src": "18450:30:21"
										},
										"nativeSrc": "18450:30:21",
										"nodeType": "YulExpressionStatement",
										"src": "18450:30:21"
									}
								]
							},
							"name": "abi_decode_t_bool_fromMemory",
							"nativeSrc": "18349:137:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "18387:6:21",
									"nodeType": "YulTypedName",
									"src": "18387:6:21",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "18395:3:21",
									"nodeType": "YulTypedName",
									"src": "18395:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "18403:5:21",
									"nodeType": "YulTypedName",
									"src": "18403:5:21",
									"type": ""
								}
							],
							"src": "18349:137:21"
						},
						{
							"body": {
								"nativeSrc": "18566:271:21",
								"nodeType": "YulBlock",
								"src": "18566:271:21",
								"statements": [
									{
										"body": {
											"nativeSrc": "18612:83:21",
											"nodeType": "YulBlock",
											"src": "18612:83:21",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "18614:77:21",
															"nodeType": "YulIdentifier",
															"src": "18614:77:21"
														},
														"nativeSrc": "18614:79:21",
														"nodeType": "YulFunctionCall",
														"src": "18614:79:21"
													},
													"nativeSrc": "18614:79:21",
													"nodeType": "YulExpressionStatement",
													"src": "18614:79:21"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "18587:7:21",
															"nodeType": "YulIdentifier",
															"src": "18587:7:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "18596:9:21",
															"nodeType": "YulIdentifier",
															"src": "18596:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "18583:3:21",
														"nodeType": "YulIdentifier",
														"src": "18583:3:21"
													},
													"nativeSrc": "18583:23:21",
													"nodeType": "YulFunctionCall",
													"src": "18583:23:21"
												},
												{
													"kind": "number",
													"nativeSrc": "18608:2:21",
													"nodeType": "YulLiteral",
													"src": "18608:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "18579:3:21",
												"nodeType": "YulIdentifier",
												"src": "18579:3:21"
											},
											"nativeSrc": "18579:32:21",
											"nodeType": "YulFunctionCall",
											"src": "18579:32:21"
										},
										"nativeSrc": "18576:119:21",
										"nodeType": "YulIf",
										"src": "18576:119:21"
									},
									{
										"nativeSrc": "18705:125:21",
										"nodeType": "YulBlock",
										"src": "18705:125:21",
										"statements": [
											{
												"nativeSrc": "18720:15:21",
												"nodeType": "YulVariableDeclaration",
												"src": "18720:15:21",
												"value": {
													"kind": "number",
													"nativeSrc": "18734:1:21",
													"nodeType": "YulLiteral",
													"src": "18734:1:21",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "18724:6:21",
														"nodeType": "YulTypedName",
														"src": "18724:6:21",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "18749:71:21",
												"nodeType": "YulAssignment",
												"src": "18749:71:21",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "18792:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "18792:9:21"
																},
																{
																	"name": "offset",
																	"nativeSrc": "18803:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "18803:6:21"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "18788:3:21",
																"nodeType": "YulIdentifier",
																"src": "18788:3:21"
															},
															"nativeSrc": "18788:22:21",
															"nodeType": "YulFunctionCall",
															"src": "18788:22:21"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "18812:7:21",
															"nodeType": "YulIdentifier",
															"src": "18812:7:21"
														}
													],
													"functionName": {
														"name": "abi_decode_t_bool_fromMemory",
														"nativeSrc": "18759:28:21",
														"nodeType": "YulIdentifier",
														"src": "18759:28:21"
													},
													"nativeSrc": "18759:61:21",
													"nodeType": "YulFunctionCall",
													"src": "18759:61:21"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "18749:6:21",
														"nodeType": "YulIdentifier",
														"src": "18749:6:21"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_bool_fromMemory",
							"nativeSrc": "18492:345:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "18536:9:21",
									"nodeType": "YulTypedName",
									"src": "18536:9:21",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "18547:7:21",
									"nodeType": "YulTypedName",
									"src": "18547:7:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "18559:6:21",
									"nodeType": "YulTypedName",
									"src": "18559:6:21",
									"type": ""
								}
							],
							"src": "18492:345:21"
						},
						{
							"body": {
								"nativeSrc": "18997:288:21",
								"nodeType": "YulBlock",
								"src": "18997:288:21",
								"statements": [
									{
										"nativeSrc": "19007:26:21",
										"nodeType": "YulAssignment",
										"src": "19007:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "19019:9:21",
													"nodeType": "YulIdentifier",
													"src": "19019:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "19030:2:21",
													"nodeType": "YulLiteral",
													"src": "19030:2:21",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "19015:3:21",
												"nodeType": "YulIdentifier",
												"src": "19015:3:21"
											},
											"nativeSrc": "19015:18:21",
											"nodeType": "YulFunctionCall",
											"src": "19015:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "19007:4:21",
												"nodeType": "YulIdentifier",
												"src": "19007:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "19087:6:21",
													"nodeType": "YulIdentifier",
													"src": "19087:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "19100:9:21",
															"nodeType": "YulIdentifier",
															"src": "19100:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "19111:1:21",
															"nodeType": "YulLiteral",
															"src": "19111:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "19096:3:21",
														"nodeType": "YulIdentifier",
														"src": "19096:3:21"
													},
													"nativeSrc": "19096:17:21",
													"nodeType": "YulFunctionCall",
													"src": "19096:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "19043:43:21",
												"nodeType": "YulIdentifier",
												"src": "19043:43:21"
											},
											"nativeSrc": "19043:71:21",
											"nodeType": "YulFunctionCall",
											"src": "19043:71:21"
										},
										"nativeSrc": "19043:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "19043:71:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "19168:6:21",
													"nodeType": "YulIdentifier",
													"src": "19168:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "19181:9:21",
															"nodeType": "YulIdentifier",
															"src": "19181:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "19192:2:21",
															"nodeType": "YulLiteral",
															"src": "19192:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "19177:3:21",
														"nodeType": "YulIdentifier",
														"src": "19177:3:21"
													},
													"nativeSrc": "19177:18:21",
													"nodeType": "YulFunctionCall",
													"src": "19177:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "19124:43:21",
												"nodeType": "YulIdentifier",
												"src": "19124:43:21"
											},
											"nativeSrc": "19124:72:21",
											"nodeType": "YulFunctionCall",
											"src": "19124:72:21"
										},
										"nativeSrc": "19124:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "19124:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "19250:6:21",
													"nodeType": "YulIdentifier",
													"src": "19250:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "19263:9:21",
															"nodeType": "YulIdentifier",
															"src": "19263:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "19274:2:21",
															"nodeType": "YulLiteral",
															"src": "19274:2:21",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "19259:3:21",
														"nodeType": "YulIdentifier",
														"src": "19259:3:21"
													},
													"nativeSrc": "19259:18:21",
													"nodeType": "YulFunctionCall",
													"src": "19259:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "19206:43:21",
												"nodeType": "YulIdentifier",
												"src": "19206:43:21"
											},
											"nativeSrc": "19206:72:21",
											"nodeType": "YulFunctionCall",
											"src": "19206:72:21"
										},
										"nativeSrc": "19206:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "19206:72:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "18843:442:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "18953:9:21",
									"nodeType": "YulTypedName",
									"src": "18953:9:21",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "18965:6:21",
									"nodeType": "YulTypedName",
									"src": "18965:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "18973:6:21",
									"nodeType": "YulTypedName",
									"src": "18973:6:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "18981:6:21",
									"nodeType": "YulTypedName",
									"src": "18981:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "18992:4:21",
									"nodeType": "YulTypedName",
									"src": "18992:4:21",
									"type": ""
								}
							],
							"src": "18843:442:21"
						},
						{
							"body": {
								"nativeSrc": "19397:75:21",
								"nodeType": "YulBlock",
								"src": "19397:75:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "19419:6:21",
															"nodeType": "YulIdentifier",
															"src": "19419:6:21"
														},
														{
															"kind": "number",
															"nativeSrc": "19427:1:21",
															"nodeType": "YulLiteral",
															"src": "19427:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "19415:3:21",
														"nodeType": "YulIdentifier",
														"src": "19415:3:21"
													},
													"nativeSrc": "19415:14:21",
													"nodeType": "YulFunctionCall",
													"src": "19415:14:21"
												},
												{
													"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
													"kind": "string",
													"nativeSrc": "19431:33:21",
													"nodeType": "YulLiteral",
													"src": "19431:33:21",
													"type": "",
													"value": "ReentrancyGuard: reentrant call"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "19408:6:21",
												"nodeType": "YulIdentifier",
												"src": "19408:6:21"
											},
											"nativeSrc": "19408:57:21",
											"nodeType": "YulFunctionCall",
											"src": "19408:57:21"
										},
										"nativeSrc": "19408:57:21",
										"nodeType": "YulExpressionStatement",
										"src": "19408:57:21"
									}
								]
							},
							"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
							"nativeSrc": "19291:181:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "19389:6:21",
									"nodeType": "YulTypedName",
									"src": "19389:6:21",
									"type": ""
								}
							],
							"src": "19291:181:21"
						},
						{
							"body": {
								"nativeSrc": "19624:220:21",
								"nodeType": "YulBlock",
								"src": "19624:220:21",
								"statements": [
									{
										"nativeSrc": "19634:74:21",
										"nodeType": "YulAssignment",
										"src": "19634:74:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "19700:3:21",
													"nodeType": "YulIdentifier",
													"src": "19700:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "19705:2:21",
													"nodeType": "YulLiteral",
													"src": "19705:2:21",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "19641:58:21",
												"nodeType": "YulIdentifier",
												"src": "19641:58:21"
											},
											"nativeSrc": "19641:67:21",
											"nodeType": "YulFunctionCall",
											"src": "19641:67:21"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "19634:3:21",
												"nodeType": "YulIdentifier",
												"src": "19634:3:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "19806:3:21",
													"nodeType": "YulIdentifier",
													"src": "19806:3:21"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
												"nativeSrc": "19717:88:21",
												"nodeType": "YulIdentifier",
												"src": "19717:88:21"
											},
											"nativeSrc": "19717:93:21",
											"nodeType": "YulFunctionCall",
											"src": "19717:93:21"
										},
										"nativeSrc": "19717:93:21",
										"nodeType": "YulExpressionStatement",
										"src": "19717:93:21"
									},
									{
										"nativeSrc": "19819:19:21",
										"nodeType": "YulAssignment",
										"src": "19819:19:21",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "19830:3:21",
													"nodeType": "YulIdentifier",
													"src": "19830:3:21"
												},
												{
													"kind": "number",
													"nativeSrc": "19835:2:21",
													"nodeType": "YulLiteral",
													"src": "19835:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "19826:3:21",
												"nodeType": "YulIdentifier",
												"src": "19826:3:21"
											},
											"nativeSrc": "19826:12:21",
											"nodeType": "YulFunctionCall",
											"src": "19826:12:21"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "19819:3:21",
												"nodeType": "YulIdentifier",
												"src": "19819:3:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "19478:366:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "19612:3:21",
									"nodeType": "YulTypedName",
									"src": "19612:3:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "19620:3:21",
									"nodeType": "YulTypedName",
									"src": "19620:3:21",
									"type": ""
								}
							],
							"src": "19478:366:21"
						},
						{
							"body": {
								"nativeSrc": "20021:248:21",
								"nodeType": "YulBlock",
								"src": "20021:248:21",
								"statements": [
									{
										"nativeSrc": "20031:26:21",
										"nodeType": "YulAssignment",
										"src": "20031:26:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "20043:9:21",
													"nodeType": "YulIdentifier",
													"src": "20043:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "20054:2:21",
													"nodeType": "YulLiteral",
													"src": "20054:2:21",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "20039:3:21",
												"nodeType": "YulIdentifier",
												"src": "20039:3:21"
											},
											"nativeSrc": "20039:18:21",
											"nodeType": "YulFunctionCall",
											"src": "20039:18:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "20031:4:21",
												"nodeType": "YulIdentifier",
												"src": "20031:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "20078:9:21",
															"nodeType": "YulIdentifier",
															"src": "20078:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "20089:1:21",
															"nodeType": "YulLiteral",
															"src": "20089:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "20074:3:21",
														"nodeType": "YulIdentifier",
														"src": "20074:3:21"
													},
													"nativeSrc": "20074:17:21",
													"nodeType": "YulFunctionCall",
													"src": "20074:17:21"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "20097:4:21",
															"nodeType": "YulIdentifier",
															"src": "20097:4:21"
														},
														{
															"name": "headStart",
															"nativeSrc": "20103:9:21",
															"nodeType": "YulIdentifier",
															"src": "20103:9:21"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "20093:3:21",
														"nodeType": "YulIdentifier",
														"src": "20093:3:21"
													},
													"nativeSrc": "20093:20:21",
													"nodeType": "YulFunctionCall",
													"src": "20093:20:21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "20067:6:21",
												"nodeType": "YulIdentifier",
												"src": "20067:6:21"
											},
											"nativeSrc": "20067:47:21",
											"nodeType": "YulFunctionCall",
											"src": "20067:47:21"
										},
										"nativeSrc": "20067:47:21",
										"nodeType": "YulExpressionStatement",
										"src": "20067:47:21"
									},
									{
										"nativeSrc": "20123:139:21",
										"nodeType": "YulAssignment",
										"src": "20123:139:21",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "20257:4:21",
													"nodeType": "YulIdentifier",
													"src": "20257:4:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "20131:124:21",
												"nodeType": "YulIdentifier",
												"src": "20131:124:21"
											},
											"nativeSrc": "20131:131:21",
											"nodeType": "YulFunctionCall",
											"src": "20131:131:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "20123:4:21",
												"nodeType": "YulIdentifier",
												"src": "20123:4:21"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "19850:419:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "20001:9:21",
									"nodeType": "YulTypedName",
									"src": "20001:9:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "20016:4:21",
									"nodeType": "YulTypedName",
									"src": "20016:4:21",
									"type": ""
								}
							],
							"src": "19850:419:21"
						},
						{
							"body": {
								"nativeSrc": "20485:454:21",
								"nodeType": "YulBlock",
								"src": "20485:454:21",
								"statements": [
									{
										"nativeSrc": "20495:27:21",
										"nodeType": "YulAssignment",
										"src": "20495:27:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "20507:9:21",
													"nodeType": "YulIdentifier",
													"src": "20507:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "20518:3:21",
													"nodeType": "YulLiteral",
													"src": "20518:3:21",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "20503:3:21",
												"nodeType": "YulIdentifier",
												"src": "20503:3:21"
											},
											"nativeSrc": "20503:19:21",
											"nodeType": "YulFunctionCall",
											"src": "20503:19:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "20495:4:21",
												"nodeType": "YulIdentifier",
												"src": "20495:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "20576:6:21",
													"nodeType": "YulIdentifier",
													"src": "20576:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "20589:9:21",
															"nodeType": "YulIdentifier",
															"src": "20589:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "20600:1:21",
															"nodeType": "YulLiteral",
															"src": "20600:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "20585:3:21",
														"nodeType": "YulIdentifier",
														"src": "20585:3:21"
													},
													"nativeSrc": "20585:17:21",
													"nodeType": "YulFunctionCall",
													"src": "20585:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "20532:43:21",
												"nodeType": "YulIdentifier",
												"src": "20532:43:21"
											},
											"nativeSrc": "20532:71:21",
											"nodeType": "YulFunctionCall",
											"src": "20532:71:21"
										},
										"nativeSrc": "20532:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "20532:71:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "20657:6:21",
													"nodeType": "YulIdentifier",
													"src": "20657:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "20670:9:21",
															"nodeType": "YulIdentifier",
															"src": "20670:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "20681:2:21",
															"nodeType": "YulLiteral",
															"src": "20681:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "20666:3:21",
														"nodeType": "YulIdentifier",
														"src": "20666:3:21"
													},
													"nativeSrc": "20666:18:21",
													"nodeType": "YulFunctionCall",
													"src": "20666:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "20613:43:21",
												"nodeType": "YulIdentifier",
												"src": "20613:43:21"
											},
											"nativeSrc": "20613:72:21",
											"nodeType": "YulFunctionCall",
											"src": "20613:72:21"
										},
										"nativeSrc": "20613:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "20613:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "20739:6:21",
													"nodeType": "YulIdentifier",
													"src": "20739:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "20752:9:21",
															"nodeType": "YulIdentifier",
															"src": "20752:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "20763:2:21",
															"nodeType": "YulLiteral",
															"src": "20763:2:21",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "20748:3:21",
														"nodeType": "YulIdentifier",
														"src": "20748:3:21"
													},
													"nativeSrc": "20748:18:21",
													"nodeType": "YulFunctionCall",
													"src": "20748:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "20695:43:21",
												"nodeType": "YulIdentifier",
												"src": "20695:43:21"
											},
											"nativeSrc": "20695:72:21",
											"nodeType": "YulFunctionCall",
											"src": "20695:72:21"
										},
										"nativeSrc": "20695:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "20695:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value3",
													"nativeSrc": "20821:6:21",
													"nodeType": "YulIdentifier",
													"src": "20821:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "20834:9:21",
															"nodeType": "YulIdentifier",
															"src": "20834:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "20845:2:21",
															"nodeType": "YulLiteral",
															"src": "20845:2:21",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "20830:3:21",
														"nodeType": "YulIdentifier",
														"src": "20830:3:21"
													},
													"nativeSrc": "20830:18:21",
													"nodeType": "YulFunctionCall",
													"src": "20830:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "20777:43:21",
												"nodeType": "YulIdentifier",
												"src": "20777:43:21"
											},
											"nativeSrc": "20777:72:21",
											"nodeType": "YulFunctionCall",
											"src": "20777:72:21"
										},
										"nativeSrc": "20777:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "20777:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value4",
													"nativeSrc": "20903:6:21",
													"nodeType": "YulIdentifier",
													"src": "20903:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "20916:9:21",
															"nodeType": "YulIdentifier",
															"src": "20916:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "20927:3:21",
															"nodeType": "YulLiteral",
															"src": "20927:3:21",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "20912:3:21",
														"nodeType": "YulIdentifier",
														"src": "20912:3:21"
													},
													"nativeSrc": "20912:19:21",
													"nodeType": "YulFunctionCall",
													"src": "20912:19:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "20859:43:21",
												"nodeType": "YulIdentifier",
												"src": "20859:43:21"
											},
											"nativeSrc": "20859:73:21",
											"nodeType": "YulFunctionCall",
											"src": "20859:73:21"
										},
										"nativeSrc": "20859:73:21",
										"nodeType": "YulExpressionStatement",
										"src": "20859:73:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "20275:664:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "20425:9:21",
									"nodeType": "YulTypedName",
									"src": "20425:9:21",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "20437:6:21",
									"nodeType": "YulTypedName",
									"src": "20437:6:21",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "20445:6:21",
									"nodeType": "YulTypedName",
									"src": "20445:6:21",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "20453:6:21",
									"nodeType": "YulTypedName",
									"src": "20453:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "20461:6:21",
									"nodeType": "YulTypedName",
									"src": "20461:6:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "20469:6:21",
									"nodeType": "YulTypedName",
									"src": "20469:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "20480:4:21",
									"nodeType": "YulTypedName",
									"src": "20480:4:21",
									"type": ""
								}
							],
							"src": "20275:664:21"
						},
						{
							"body": {
								"nativeSrc": "21123:367:21",
								"nodeType": "YulBlock",
								"src": "21123:367:21",
								"statements": [
									{
										"nativeSrc": "21133:27:21",
										"nodeType": "YulAssignment",
										"src": "21133:27:21",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "21145:9:21",
													"nodeType": "YulIdentifier",
													"src": "21145:9:21"
												},
												{
													"kind": "number",
													"nativeSrc": "21156:3:21",
													"nodeType": "YulLiteral",
													"src": "21156:3:21",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "21141:3:21",
												"nodeType": "YulIdentifier",
												"src": "21141:3:21"
											},
											"nativeSrc": "21141:19:21",
											"nodeType": "YulFunctionCall",
											"src": "21141:19:21"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "21133:4:21",
												"nodeType": "YulIdentifier",
												"src": "21133:4:21"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "21214:6:21",
													"nodeType": "YulIdentifier",
													"src": "21214:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "21227:9:21",
															"nodeType": "YulIdentifier",
															"src": "21227:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "21238:1:21",
															"nodeType": "YulLiteral",
															"src": "21238:1:21",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "21223:3:21",
														"nodeType": "YulIdentifier",
														"src": "21223:3:21"
													},
													"nativeSrc": "21223:17:21",
													"nodeType": "YulFunctionCall",
													"src": "21223:17:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "21170:43:21",
												"nodeType": "YulIdentifier",
												"src": "21170:43:21"
											},
											"nativeSrc": "21170:71:21",
											"nodeType": "YulFunctionCall",
											"src": "21170:71:21"
										},
										"nativeSrc": "21170:71:21",
										"nodeType": "YulExpressionStatement",
										"src": "21170:71:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "21291:6:21",
													"nodeType": "YulIdentifier",
													"src": "21291:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "21304:9:21",
															"nodeType": "YulIdentifier",
															"src": "21304:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "21315:2:21",
															"nodeType": "YulLiteral",
															"src": "21315:2:21",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "21300:3:21",
														"nodeType": "YulIdentifier",
														"src": "21300:3:21"
													},
													"nativeSrc": "21300:18:21",
													"nodeType": "YulFunctionCall",
													"src": "21300:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "21251:39:21",
												"nodeType": "YulIdentifier",
												"src": "21251:39:21"
											},
											"nativeSrc": "21251:68:21",
											"nodeType": "YulFunctionCall",
											"src": "21251:68:21"
										},
										"nativeSrc": "21251:68:21",
										"nodeType": "YulExpressionStatement",
										"src": "21251:68:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "21373:6:21",
													"nodeType": "YulIdentifier",
													"src": "21373:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "21386:9:21",
															"nodeType": "YulIdentifier",
															"src": "21386:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "21397:2:21",
															"nodeType": "YulLiteral",
															"src": "21397:2:21",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "21382:3:21",
														"nodeType": "YulIdentifier",
														"src": "21382:3:21"
													},
													"nativeSrc": "21382:18:21",
													"nodeType": "YulFunctionCall",
													"src": "21382:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "21329:43:21",
												"nodeType": "YulIdentifier",
												"src": "21329:43:21"
											},
											"nativeSrc": "21329:72:21",
											"nodeType": "YulFunctionCall",
											"src": "21329:72:21"
										},
										"nativeSrc": "21329:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "21329:72:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value3",
													"nativeSrc": "21455:6:21",
													"nodeType": "YulIdentifier",
													"src": "21455:6:21"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "21468:9:21",
															"nodeType": "YulIdentifier",
															"src": "21468:9:21"
														},
														{
															"kind": "number",
															"nativeSrc": "21479:2:21",
															"nodeType": "YulLiteral",
															"src": "21479:2:21",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "21464:3:21",
														"nodeType": "YulIdentifier",
														"src": "21464:3:21"
													},
													"nativeSrc": "21464:18:21",
													"nodeType": "YulFunctionCall",
													"src": "21464:18:21"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "21411:43:21",
												"nodeType": "YulIdentifier",
												"src": "21411:43:21"
											},
											"nativeSrc": "21411:72:21",
											"nodeType": "YulFunctionCall",
											"src": "21411:72:21"
										},
										"nativeSrc": "21411:72:21",
										"nodeType": "YulExpressionStatement",
										"src": "21411:72:21"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
							"nativeSrc": "20945:545:21",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "21071:9:21",
									"nodeType": "YulTypedName",
									"src": "21071:9:21",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "21083:6:21",
									"nodeType": "YulTypedName",
									"src": "21083:6:21",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "21091:6:21",
									"nodeType": "YulTypedName",
									"src": "21091:6:21",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "21099:6:21",
									"nodeType": "YulTypedName",
									"src": "21099:6:21",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "21107:6:21",
									"nodeType": "YulTypedName",
									"src": "21107:6:21",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "21118:4:21",
									"nodeType": "YulTypedName",
									"src": "21118:4:21",
									"type": ""
								}
							],
							"src": "20945:545:21"
						},
						{
							"body": {
								"nativeSrc": "21524:152:21",
								"nodeType": "YulBlock",
								"src": "21524:152:21",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "21541:1:21",
													"nodeType": "YulLiteral",
													"src": "21541:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "21544:77:21",
													"nodeType": "YulLiteral",
													"src": "21544:77:21",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "21534:6:21",
												"nodeType": "YulIdentifier",
												"src": "21534:6:21"
											},
											"nativeSrc": "21534:88:21",
											"nodeType": "YulFunctionCall",
											"src": "21534:88:21"
										},
										"nativeSrc": "21534:88:21",
										"nodeType": "YulExpressionStatement",
										"src": "21534:88:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "21638:1:21",
													"nodeType": "YulLiteral",
													"src": "21638:1:21",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "21641:4:21",
													"nodeType": "YulLiteral",
													"src": "21641:4:21",
													"type": "",
													"value": "0x21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "21631:6:21",
												"nodeType": "YulIdentifier",
												"src": "21631:6:21"
											},
											"nativeSrc": "21631:15:21",
											"nodeType": "YulFunctionCall",
											"src": "21631:15:21"
										},
										"nativeSrc": "21631:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "21631:15:21"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "21662:1:21",
													"nodeType": "YulLiteral",
													"src": "21662:1:21",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "21665:4:21",
													"nodeType": "YulLiteral",
													"src": "21665:4:21",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "21655:6:21",
												"nodeType": "YulIdentifier",
												"src": "21655:6:21"
											},
											"nativeSrc": "21655:15:21",
											"nodeType": "YulFunctionCall",
											"src": "21655:15:21"
										},
										"nativeSrc": "21655:15:21",
										"nodeType": "YulExpressionStatement",
										"src": "21655:15:21"
									}
								]
							},
							"name": "panic_error_0x21",
							"nativeSrc": "21496:180:21",
							"nodeType": "YulFunctionDefinition",
							"src": "21496:180:21"
						}
					]
				},
				"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes1(value) -> cleaned {\n        cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)\n    }\n\n    function abi_encode_t_bytes1_to_t_bytes1_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes1(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_bytes1_to_t_bytes1_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        mstore(add(headStart, 192), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value6,  tail)\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_contract$_IERC20_$967(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function validator_revert_t_contract$_IERC20_$967(value) {\n        if iszero(eq(value, cleanup_t_contract$_IERC20_$967(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_IERC20_$967(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_contract$_IERC20_$967(value)\n    }\n\n    function abi_decode_tuple_t_contract$_IERC20_$967t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_IERC20_$967(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a(memPtr) {\n\n        mstore(add(memPtr, 0), \"WrappedR5: cap exceeded\")\n\n    }\n\n    function abi_encode_t_stringliteral_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_02551212d7c1e7604fb5d7ac12891e503002cf2b3655a1d717270050b295393a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4(memPtr) {\n\n        mstore(add(memPtr, 0), \"WrappedR5: caller is not the pen\")\n\n        mstore(add(memPtr, 32), \"ding owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_85f6aab7197828f759c11bda88960fa7286c6e68ae4747b3aefdb0b8ad8002a4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15(memPtr) {\n\n        mstore(add(memPtr, 0), \"WrappedR5: new owner is zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d676629d19d3b4659ba95bcd045189bfa4c44ab3680091c7a8967c606a03c15_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n}\n",
				"id": 21,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {
			"2292": [
				{
					"length": 32,
					"start": 4204
				}
			],
			"2294": [
				{
					"length": 32,
					"start": 4163
				}
			],
			"2296": [
				{
					"length": 32,
					"start": 4077
				}
			],
			"2298": [
				{
					"length": 32,
					"start": 6232
				}
			],
			"2300": [
				{
					"length": 32,
					"start": 6265
				}
			],
			"2303": [
				{
					"length": 32,
					"start": 4933
				}
			],
			"2306": [
				{
					"length": 32,
					"start": 4992
				}
			]
		},
		"linkReferences": {},
		"object": "608060405234801561000f575f80fd5b5060043610610156575f3560e01c80637ecebe00116100c1578063d505accf1161007a578063d505accf146103a6578063dd62ed3e146103c2578063e30c3978146103f2578063eb8f4c4a14610410578063ec81b4831461042c578063f2fde38b1461044a57610156565b80637ecebe00146102ca57806384b0196e146102fa5780638da5cb5b1461031e57806395d89b411461033c578063a9059cbb1461035a578063c0b6f5611461038a57610156565b806340c10f191161011357806340c10f191461023257806342966c681461024e57806370a082311461026a578063715018a61461029a57806379ba5097146102a457806379cc6790146102ae57610156565b806306fdde031461015a578063095ea7b31461017857806318160ddd146101a857806323b872dd146101c6578063313ce567146101f65780633644e51514610214575b5f80fd5b610162610466565b60405161016f9190611dae565b60405180910390f35b610192600480360381019061018d9190611e5f565b6104f6565b60405161019f9190611eb7565b60405180910390f35b6101b0610518565b6040516101bd9190611edf565b60405180910390f35b6101e060048036038101906101db9190611ef8565b610521565b6040516101ed9190611eb7565b60405180910390f35b6101fe61054f565b60405161020b9190611f63565b60405180910390f35b61021c610557565b6040516102299190611f94565b60405180910390f35b61024c60048036038101906102479190611e5f565b610565565b005b61026860048036038101906102639190611fad565b610639565b005b610284600480360381019061027f9190611fd8565b61069a565b6040516102919190611edf565b60405180910390f35b6102a26106df565b005b6102ac6106f2565b005b6102c860048036038101906102c39190611e5f565b6107d8565b005b6102e460048036038101906102df9190611fd8565b610834565b6040516102f19190611edf565b60405180910390f35b610302610845565b6040516103159796959493929190612103565b60405180910390f35b6103266108ea565b6040516103339190612185565b60405180910390f35b610344610912565b6040516103519190611dae565b60405180910390f35b610374600480360381019061036f9190611e5f565b6109a2565b6040516103819190611eb7565b60405180910390f35b6103a4600480360381019061039f9190611fd8565b6109c4565b005b6103c060048036038101906103bb91906121f2565b610ade565b005b6103dc60048036038101906103d7919061228f565b610c23565b6040516103e99190611edf565b60405180910390f35b6103fa610ca5565b6040516104079190612185565b60405180910390f35b61042a60048036038101906104259190612308565b610ccd565b005b610434610dbb565b6040516104419190611edf565b60405180910390f35b610464600480360381019061045f9190611fd8565b610dca565b005b60606003805461047590612385565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190612385565b80156104ec5780601f106104c3576101008083540402835291602001916104ec565b820191905f5260205f20905b8154815290600101906020018083116104cf57829003601f168201915b5050505050905090565b5f80610500610e4e565b905061050d818585610e55565b600191505092915050565b5f600254905090565b5f8061052b610e4e565b9050610538858285610e67565b610543858585610efa565b60019150509392505050565b5f6012905090565b5f610560610fea565b905090565b61056d6110a0565b610575611127565b6a36df8dec4229fb481000008161058a610518565b61059491906123e2565b11156105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc9061245f565b60405180910390fd5b6105df8282611176565b8173ffffffffffffffffffffffffffffffffffffffff167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a4273826040516106259190611edf565b60405180910390a26106356111f5565b5050565b610642816111ff565b61064a610e4e565b73ffffffffffffffffffffffffffffffffffffffff167ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb68260405161068f9190611edf565b60405180910390a250565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6106e76110a0565b6106f05f611213565b565b5f6106fb610e4e565b9050600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610783906124ed565b60405180910390fd5b5f600a5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107d581611213565b50565b6107e282826112d6565b8173ffffffffffffffffffffffffffffffffffffffff167ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb6826040516108289190611edf565b60405180910390a25050565b5f61083e826112f6565b9050919050565b5f6060805f805f606061085661133c565b61085e611377565b46305f801b5f67ffffffffffffffff81111561087d5761087c61250b565b5b6040519080825280602002602001820160405280156108ab5781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461092190612385565b80601f016020809104026020016040519081016040528092919081815260200182805461094d90612385565b80156109985780601f1061096f57610100808354040283529160200191610998565b820191905f5260205f20905b81548152906001019060200180831161097b57829003601f168201915b5050505050905090565b5f806109ac610e4e565b90506109b9818585610efa565b600191505092915050565b6109cc6110a0565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a31906125a8565b60405180910390fd5b80600a5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16610a996108ea565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b83421115610b2357836040517f62791302000000000000000000000000000000000000000000000000000000008152600401610b1a9190611edf565b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b518c6113b2565b89604051602001610b67969594939291906125c6565b6040516020818303038152906040528051906020012090505f610b8982611405565b90505f610b988287878761141e565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c0c57808a6040517f4b800e46000000000000000000000000000000000000000000000000000000008152600401610c03929190612625565b60405180910390fd5b610c178a8a8a610e55565b50505050505050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cd56110a0565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610d1092919061264c565b6020604051808303815f875af1158015610d2c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d50919061269d565b508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f401f439d865a766757ec78675925bd67198d5e78805aa41691b34b5d6a6cbbe683604051610dae9190611edf565b60405180910390a3505050565b6a36df8dec4229fb4810000081565b610dd26110a0565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e42575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610e399190612185565b60405180910390fd5b610e4b81611213565b50565b5f33905090565b610e62838383600161144c565b505050565b5f610e728484610c23565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610ef45781811015610ee5578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610edc939291906126c8565b60405180910390fd5b610ef384848484035f61144c565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f6a575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610f619190612185565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fda575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610fd19190612185565b60405180910390fd5b610fe583838361161b565b505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561106557507f000000000000000000000000000000000000000000000000000000000000000046145b15611092577f0000000000000000000000000000000000000000000000000000000000000000905061109d565b61109a611834565b90505b90565b6110a8610e4e565b73ffffffffffffffffffffffffffffffffffffffff166110c66108ea565b73ffffffffffffffffffffffffffffffffffffffff1614611125576110e9610e4e565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161111c9190612185565b60405180910390fd5b565b60026009540361116c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116390612747565b60405180910390fd5b6002600981905550565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111e6575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016111dd9190612185565b60405180910390fd5b6111f15f838361161b565b5050565b6001600981905550565b61121061120a610e4e565b826118c9565b50565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112e8826112e2610e4e565b83610e67565b6112f282826118c9565b5050565b5f60075f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b606061137260057f000000000000000000000000000000000000000000000000000000000000000061194890919063ffffffff16565b905090565b60606113ad60067f000000000000000000000000000000000000000000000000000000000000000061194890919063ffffffff16565b905090565b5f60075f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190600101919050559050919050565b5f611417611411610fea565b836119f5565b9050919050565b5f805f8061142e88888888611a35565b92509250925061143e8282611b1c565b829350505050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114bc575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016114b39190612185565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361152c575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016115239190612185565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611615578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161160c9190611edf565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361166b578060025f82825461165f91906123e2565b92505081905550611739565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156116f4578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016116eb939291906126c8565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611780578060025f82825403925050819055506117ca565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516118279190611edf565b60405180910390a3505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016118ae959493929190612765565b60405160208183030381529060405280519060200120905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611939575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016119309190612185565b60405180910390fd5b611944825f8361161b565b5050565b606060ff5f1b83146119645761195d83611c7e565b90506119ef565b81805461197090612385565b80601f016020809104026020016040519081016040528092919081815260200182805461199c90612385565b80156119e75780601f106119be576101008083540402835291602001916119e7565b820191905f5260205f20905b8154815290600101906020018083116119ca57829003601f168201915b505050505090505b92915050565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f805f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c1115611a71575f600385925092509250611b12565b5f6001888888886040515f8152602001604052604051611a9494939291906127b6565b6020604051602081039080840390855afa158015611ab4573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b05575f60015f801b93509350935050611b12565b805f805f1b935093509350505b9450945094915050565b5f6003811115611b2f57611b2e6127f9565b5b826003811115611b4257611b416127f9565b5b0315611c7a5760016003811115611b5c57611b5b6127f9565b5b826003811115611b6f57611b6e6127f9565b5b03611ba6576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115611bba57611bb96127f9565b5b826003811115611bcd57611bcc6127f9565b5b03611c1157805f1c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401611c089190611edf565b60405180910390fd5b600380811115611c2457611c236127f9565b5b826003811115611c3757611c366127f9565b5b03611c7957806040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600401611c709190611f94565b60405180910390fd5b5b5050565b60605f611c8a83611cf0565b90505f602067ffffffffffffffff811115611ca857611ca761250b565b5b6040519080825280601f01601f191660200182016040528015611cda5781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f8060ff835f1c169050601f811115611d35576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611d8082611d3e565b611d8a8185611d48565b9350611d9a818560208601611d58565b611da381611d66565b840191505092915050565b5f6020820190508181035f830152611dc68184611d76565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611dfb82611dd2565b9050919050565b611e0b81611df1565b8114611e15575f80fd5b50565b5f81359050611e2681611e02565b92915050565b5f819050919050565b611e3e81611e2c565b8114611e48575f80fd5b50565b5f81359050611e5981611e35565b92915050565b5f8060408385031215611e7557611e74611dce565b5b5f611e8285828601611e18565b9250506020611e9385828601611e4b565b9150509250929050565b5f8115159050919050565b611eb181611e9d565b82525050565b5f602082019050611eca5f830184611ea8565b92915050565b611ed981611e2c565b82525050565b5f602082019050611ef25f830184611ed0565b92915050565b5f805f60608486031215611f0f57611f0e611dce565b5b5f611f1c86828701611e18565b9350506020611f2d86828701611e18565b9250506040611f3e86828701611e4b565b9150509250925092565b5f60ff82169050919050565b611f5d81611f48565b82525050565b5f602082019050611f765f830184611f54565b92915050565b5f819050919050565b611f8e81611f7c565b82525050565b5f602082019050611fa75f830184611f85565b92915050565b5f60208284031215611fc257611fc1611dce565b5b5f611fcf84828501611e4b565b91505092915050565b5f60208284031215611fed57611fec611dce565b5b5f611ffa84828501611e18565b91505092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61203781612003565b82525050565b61204681611df1565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61207e81611e2c565b82525050565b5f61208f8383612075565b60208301905092915050565b5f602082019050919050565b5f6120b18261204c565b6120bb8185612056565b93506120c683612066565b805f5b838110156120f65781516120dd8882612084565b97506120e88361209b565b9250506001810190506120c9565b5085935050505092915050565b5f60e0820190506121165f83018a61202e565b81810360208301526121288189611d76565b9050818103604083015261213c8188611d76565b905061214b6060830187611ed0565b612158608083018661203d565b61216560a0830185611f85565b81810360c083015261217781846120a7565b905098975050505050505050565b5f6020820190506121985f83018461203d565b92915050565b6121a781611f48565b81146121b1575f80fd5b50565b5f813590506121c28161219e565b92915050565b6121d181611f7c565b81146121db575f80fd5b50565b5f813590506121ec816121c8565b92915050565b5f805f805f805f60e0888a03121561220d5761220c611dce565b5b5f61221a8a828b01611e18565b975050602061222b8a828b01611e18565b965050604061223c8a828b01611e4b565b955050606061224d8a828b01611e4b565b945050608061225e8a828b016121b4565b93505060a061226f8a828b016121de565b92505060c06122808a828b016121de565b91505092959891949750929550565b5f80604083850312156122a5576122a4611dce565b5b5f6122b285828601611e18565b92505060206122c385828601611e18565b9150509250929050565b5f6122d782611df1565b9050919050565b6122e7816122cd565b81146122f1575f80fd5b50565b5f81359050612302816122de565b92915050565b5f805f6060848603121561231f5761231e611dce565b5b5f61232c868287016122f4565b935050602061233d86828701611e18565b925050604061234e86828701611e4b565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061239c57607f821691505b6020821081036123af576123ae612358565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6123ec82611e2c565b91506123f783611e2c565b925082820190508082111561240f5761240e6123b5565b5b92915050565b7f5772617070656452353a206361702065786365656465640000000000000000005f82015250565b5f612449601783611d48565b915061245482612415565b602082019050919050565b5f6020820190508181035f8301526124768161243d565b9050919050565b7f5772617070656452353a2063616c6c6572206973206e6f74207468652070656e5f8201527f64696e67206f776e657200000000000000000000000000000000000000000000602082015250565b5f6124d7602a83611d48565b91506124e28261247d565b604082019050919050565b5f6020820190508181035f830152612504816124cb565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f5772617070656452353a206e6577206f776e6572206973207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f612592602483611d48565b915061259d82612538565b604082019050919050565b5f6020820190508181035f8301526125bf81612586565b9050919050565b5f60c0820190506125d95f830189611f85565b6125e6602083018861203d565b6125f3604083018761203d565b6126006060830186611ed0565b61260d6080830185611ed0565b61261a60a0830184611ed0565b979650505050505050565b5f6040820190506126385f83018561203d565b612645602083018461203d565b9392505050565b5f60408201905061265f5f83018561203d565b61266c6020830184611ed0565b9392505050565b61267c81611e9d565b8114612686575f80fd5b50565b5f8151905061269781612673565b92915050565b5f602082840312156126b2576126b1611dce565b5b5f6126bf84828501612689565b91505092915050565b5f6060820190506126db5f83018661203d565b6126e86020830185611ed0565b6126f56040830184611ed0565b949350505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f612731601f83611d48565b915061273c826126fd565b602082019050919050565b5f6020820190508181035f83015261275e81612725565b9050919050565b5f60a0820190506127785f830188611f85565b6127856020830187611f85565b6127926040830186611f85565b61279f6060830185611ed0565b6127ac608083018461203d565b9695505050505050565b5f6080820190506127c95f830187611f85565b6127d66020830186611f54565b6127e36040830185611f85565b6127f06060830184611f85565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffdfea264697066735822122046ec330ce2a86dce04904d74095c3d856e12831b325cd44a1b2dd954caf7f4ae64736f6c634300081a0033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x156 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0xC1 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x3F2 JUMPI DUP1 PUSH4 0xEB8F4C4A EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0xEC81B483 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x44A JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0xC0B6F561 EQ PUSH2 0x38A JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x40C10F19 GT PUSH2 0x113 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x24E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2AE JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x214 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x162 PUSH2 0x466 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x1DAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x1E5F JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x1EF8 JUMP JUMPDEST PUSH2 0x521 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FE PUSH2 0x54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21C PUSH2 0x557 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x229 SWAP2 SWAP1 PUSH2 0x1F94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x247 SWAP2 SWAP1 PUSH2 0x1E5F JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x268 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x263 SWAP2 SWAP1 PUSH2 0x1FAD JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x284 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27F SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0x69A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A2 PUSH2 0x6DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AC PUSH2 0x6F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C3 SWAP2 SWAP1 PUSH2 0x1E5F JUMP JUMPDEST PUSH2 0x7D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0x834 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F1 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x302 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x315 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2103 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x326 PUSH2 0x8EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x333 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x344 PUSH2 0x912 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x351 SWAP2 SWAP1 PUSH2 0x1DAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x374 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x1E5F JUMP JUMPDEST PUSH2 0x9A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0x9C4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x21F2 JUMP JUMPDEST PUSH2 0xADE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D7 SWAP2 SWAP1 PUSH2 0x228F JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E9 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3FA PUSH2 0xCA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x42A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x2308 JUMP JUMPDEST PUSH2 0xCCD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x434 PUSH2 0xDBB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x441 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x464 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45F SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0xDCA JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x475 SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4A1 SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4EC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4EC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4CF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x500 PUSH2 0xE4E JUMP JUMPDEST SWAP1 POP PUSH2 0x50D DUP2 DUP6 DUP6 PUSH2 0xE55 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x52B PUSH2 0xE4E JUMP JUMPDEST SWAP1 POP PUSH2 0x538 DUP6 DUP3 DUP6 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0x543 DUP6 DUP6 DUP6 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x560 PUSH2 0xFEA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x56D PUSH2 0x10A0 JUMP JUMPDEST PUSH2 0x575 PUSH2 0x1127 JUMP JUMPDEST PUSH11 0x36DF8DEC4229FB48100000 DUP2 PUSH2 0x58A PUSH2 0x518 JUMP JUMPDEST PUSH2 0x594 SWAP2 SWAP1 PUSH2 0x23E2 JUMP JUMPDEST GT ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CC SWAP1 PUSH2 0x245F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5DF DUP3 DUP3 PUSH2 0x1176 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3F2C9D57C068687834F0DE942A9BABB9E5ACAB57D516D3480A3C16EE165A4273 DUP3 PUSH1 0x40 MLOAD PUSH2 0x625 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x635 PUSH2 0x11F5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x642 DUP2 PUSH2 0x11FF JUMP JUMPDEST PUSH2 0x64A PUSH2 0xE4E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFD38818F5291BF0BB3A2A48AADC06BA8757865D1DABD804585338AAB3009DCB6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x68F SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6E7 PUSH2 0x10A0 JUMP JUMPDEST PUSH2 0x6F0 PUSH0 PUSH2 0x1213 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH2 0x6FB PUSH2 0xE4E JUMP JUMPDEST SWAP1 POP PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x78C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x783 SWAP1 PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0xA PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x7D5 DUP2 PUSH2 0x1213 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7E2 DUP3 DUP3 PUSH2 0x12D6 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFD38818F5291BF0BB3A2A48AADC06BA8757865D1DABD804585338AAB3009DCB6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x828 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x83E DUP3 PUSH2 0x12F6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x856 PUSH2 0x133C JUMP JUMPDEST PUSH2 0x85E PUSH2 0x1377 JUMP JUMPDEST CHAINID ADDRESS PUSH0 DUP1 SHL PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x87D JUMPI PUSH2 0x87C PUSH2 0x250B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8AB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x921 SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x94D SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x998 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x96F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x998 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x97B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x9AC PUSH2 0xE4E JUMP JUMPDEST SWAP1 POP PUSH2 0x9B9 DUP2 DUP6 DUP6 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x9CC PUSH2 0x10A0 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA31 SWAP1 PUSH2 0x25A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xA PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA99 PUSH2 0x8EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xB23 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB1A SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xB51 DUP13 PUSH2 0x13B2 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB67 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0xB89 DUP3 PUSH2 0x1405 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xB98 DUP3 DUP8 DUP8 DUP8 PUSH2 0x141E JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC0C JUMPI DUP1 DUP11 PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC03 SWAP3 SWAP2 SWAP1 PUSH2 0x2625 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC17 DUP11 DUP11 DUP11 PUSH2 0xE55 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xCD5 PUSH2 0x10A0 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD10 SWAP3 SWAP2 SWAP1 PUSH2 0x264C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD2C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD50 SWAP2 SWAP1 PUSH2 0x269D JUMP JUMPDEST POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x401F439D865A766757EC78675925BD67198D5E78805AA41691B34B5D6A6CBBE6 DUP4 PUSH1 0x40 MLOAD PUSH2 0xDAE SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH11 0x36DF8DEC4229FB48100000 DUP2 JUMP JUMPDEST PUSH2 0xDD2 PUSH2 0x10A0 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE42 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE39 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE4B DUP2 PUSH2 0x1213 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xE62 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x144C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE72 DUP5 DUP5 PUSH2 0xC23 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 LT ISZERO PUSH2 0xEF4 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xEE5 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEDC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF3 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x144C JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF6A JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF61 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xFDA JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD1 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFE5 DUP4 DUP4 DUP4 PUSH2 0x161B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1065 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x1092 JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0x109D JUMP JUMPDEST PUSH2 0x109A PUSH2 0x1834 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10A8 PUSH2 0xE4E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x10C6 PUSH2 0x8EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1125 JUMPI PUSH2 0x10E9 PUSH2 0xE4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111C SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x9 SLOAD SUB PUSH2 0x116C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1163 SWAP1 PUSH2 0x2747 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11E6 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11DD SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11F1 PUSH0 DUP4 DUP4 PUSH2 0x161B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1210 PUSH2 0x120A PUSH2 0xE4E JUMP JUMPDEST DUP3 PUSH2 0x18C9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x8 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x12E8 DUP3 PUSH2 0x12E2 PUSH2 0xE4E JUMP JUMPDEST DUP4 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0x12F2 DUP3 DUP3 PUSH2 0x18C9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x7 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1372 PUSH1 0x5 PUSH32 0x0 PUSH2 0x1948 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13AD PUSH1 0x6 PUSH32 0x0 PUSH2 0x1948 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x7 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1417 PUSH2 0x1411 PUSH2 0xFEA JUMP JUMPDEST DUP4 PUSH2 0x19F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x142E DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A35 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x143E DUP3 DUP3 PUSH2 0x1B1C JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14BC JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14B3 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x152C JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1523 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1615 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x160C SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x166B JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x165F SWAP2 SWAP1 PUSH2 0x23E2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1739 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x16F4 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16EB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1780 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x17CA JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1827 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x18AE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2765 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1939 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1930 SWAP2 SWAP1 PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1944 DUP3 PUSH0 DUP4 PUSH2 0x161B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF PUSH0 SHL DUP4 EQ PUSH2 0x1964 JUMPI PUSH2 0x195D DUP4 PUSH2 0x1C7E JUMP JUMPDEST SWAP1 POP PUSH2 0x19EF JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x1970 SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x199C SWAP1 PUSH2 0x2385 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19E7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x19BE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19E7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x19CA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH0 SHR GT ISZERO PUSH2 0x1A71 JUMPI PUSH0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1B12 JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1A94 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AB4 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1B05 JUMPI PUSH0 PUSH1 0x1 PUSH0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x1B12 JUMP JUMPDEST DUP1 PUSH0 DUP1 PUSH0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B2F JUMPI PUSH2 0x1B2E PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B42 JUMPI PUSH2 0x1B41 PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1C7A JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B5C JUMPI PUSH2 0x1B5B PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B6F JUMPI PUSH2 0x1B6E PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1BA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1BBA JUMPI PUSH2 0x1BB9 PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1BCD JUMPI PUSH2 0x1BCC PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1C11 JUMPI DUP1 PUSH0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C08 SWAP2 SWAP1 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x1C24 JUMPI PUSH2 0x1C23 PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1C37 JUMPI PUSH2 0x1C36 PUSH2 0x27F9 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1C79 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C70 SWAP2 SWAP1 PUSH2 0x1F94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x1C8A DUP4 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CA8 JUMPI PUSH2 0x1CA7 PUSH2 0x250B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CDA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0xFF DUP4 PUSH0 SHR AND SWAP1 POP PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x1D35 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D80 DUP3 PUSH2 0x1D3E JUMP JUMPDEST PUSH2 0x1D8A DUP2 DUP6 PUSH2 0x1D48 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D9A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1D58 JUMP JUMPDEST PUSH2 0x1DA3 DUP2 PUSH2 0x1D66 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1DC6 DUP2 DUP5 PUSH2 0x1D76 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1DFB DUP3 PUSH2 0x1DD2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E0B DUP2 PUSH2 0x1DF1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E15 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E26 DUP2 PUSH2 0x1E02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E3E DUP2 PUSH2 0x1E2C JUMP JUMPDEST DUP2 EQ PUSH2 0x1E48 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E59 DUP2 PUSH2 0x1E35 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E75 JUMPI PUSH2 0x1E74 PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E82 DUP6 DUP3 DUP7 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E93 DUP6 DUP3 DUP7 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1EB1 DUP2 PUSH2 0x1E9D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1ECA PUSH0 DUP4 ADD DUP5 PUSH2 0x1EA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1ED9 DUP2 PUSH2 0x1E2C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1EF2 PUSH0 DUP4 ADD DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F0F JUMPI PUSH2 0x1F0E PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F1C DUP7 DUP3 DUP8 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1F2D DUP7 DUP3 DUP8 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1F3E DUP7 DUP3 DUP8 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F5D DUP2 PUSH2 0x1F48 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F76 PUSH0 DUP4 ADD DUP5 PUSH2 0x1F54 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F8E DUP2 PUSH2 0x1F7C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FA7 PUSH0 DUP4 ADD DUP5 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FC2 JUMPI PUSH2 0x1FC1 PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FCF DUP5 DUP3 DUP6 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FED JUMPI PUSH2 0x1FEC PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FFA DUP5 DUP3 DUP6 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2037 DUP2 PUSH2 0x2003 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2046 DUP2 PUSH2 0x1DF1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x207E DUP2 PUSH2 0x1E2C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x208F DUP4 DUP4 PUSH2 0x2075 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x20B1 DUP3 PUSH2 0x204C JUMP JUMPDEST PUSH2 0x20BB DUP2 DUP6 PUSH2 0x2056 JUMP JUMPDEST SWAP4 POP PUSH2 0x20C6 DUP4 PUSH2 0x2066 JUMP JUMPDEST DUP1 PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20F6 JUMPI DUP2 MLOAD PUSH2 0x20DD DUP9 DUP3 PUSH2 0x2084 JUMP JUMPDEST SWAP8 POP PUSH2 0x20E8 DUP4 PUSH2 0x209B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x20C9 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x2116 PUSH0 DUP4 ADD DUP11 PUSH2 0x202E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2128 DUP2 DUP10 PUSH2 0x1D76 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x213C DUP2 DUP9 PUSH2 0x1D76 JUMP JUMPDEST SWAP1 POP PUSH2 0x214B PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x2158 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x2165 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x1F85 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x2177 DUP2 DUP5 PUSH2 0x20A7 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2198 PUSH0 DUP4 ADD DUP5 PUSH2 0x203D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x21A7 DUP2 PUSH2 0x1F48 JUMP JUMPDEST DUP2 EQ PUSH2 0x21B1 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x21C2 DUP2 PUSH2 0x219E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x21D1 DUP2 PUSH2 0x1F7C JUMP JUMPDEST DUP2 EQ PUSH2 0x21DB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x21EC DUP2 PUSH2 0x21C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x220D JUMPI PUSH2 0x220C PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x221A DUP11 DUP3 DUP12 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x222B DUP11 DUP3 DUP12 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x223C DUP11 DUP3 DUP12 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x224D DUP11 DUP3 DUP12 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x225E DUP11 DUP3 DUP12 ADD PUSH2 0x21B4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x226F DUP11 DUP3 DUP12 ADD PUSH2 0x21DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x2280 DUP11 DUP3 DUP12 ADD PUSH2 0x21DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22A5 JUMPI PUSH2 0x22A4 PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x22B2 DUP6 DUP3 DUP7 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22C3 DUP6 DUP3 DUP7 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x22D7 DUP3 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22E7 DUP2 PUSH2 0x22CD JUMP JUMPDEST DUP2 EQ PUSH2 0x22F1 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2302 DUP2 PUSH2 0x22DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x231F JUMPI PUSH2 0x231E PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x232C DUP7 DUP3 DUP8 ADD PUSH2 0x22F4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x233D DUP7 DUP3 DUP8 ADD PUSH2 0x1E18 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x234E DUP7 DUP3 DUP8 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x239C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x23AF JUMPI PUSH2 0x23AE PUSH2 0x2358 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x23EC DUP3 PUSH2 0x1E2C JUMP JUMPDEST SWAP2 POP PUSH2 0x23F7 DUP4 PUSH2 0x1E2C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x240F JUMPI PUSH2 0x240E PUSH2 0x23B5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5772617070656452353A20636170206578636565646564000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x2449 PUSH1 0x17 DUP4 PUSH2 0x1D48 JUMP JUMPDEST SWAP2 POP PUSH2 0x2454 DUP3 PUSH2 0x2415 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2476 DUP2 PUSH2 0x243D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5772617070656452353A2063616C6C6572206973206E6F74207468652070656E PUSH0 DUP3 ADD MSTORE PUSH32 0x64696E67206F776E657200000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x24D7 PUSH1 0x2A DUP4 PUSH2 0x1D48 JUMP JUMPDEST SWAP2 POP PUSH2 0x24E2 DUP3 PUSH2 0x247D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2504 DUP2 PUSH2 0x24CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x5772617070656452353A206E6577206F776E6572206973207A65726F20616464 PUSH0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x2592 PUSH1 0x24 DUP4 PUSH2 0x1D48 JUMP JUMPDEST SWAP2 POP PUSH2 0x259D DUP3 PUSH2 0x2538 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x25BF DUP2 PUSH2 0x2586 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x25D9 PUSH0 DUP4 ADD DUP10 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x25E6 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x25F3 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x2600 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x260D PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x261A PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2638 PUSH0 DUP4 ADD DUP6 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x2645 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x203D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x265F PUSH0 DUP4 ADD DUP6 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x266C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x267C DUP2 PUSH2 0x1E9D JUMP JUMPDEST DUP2 EQ PUSH2 0x2686 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2697 DUP2 PUSH2 0x2673 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26B2 JUMPI PUSH2 0x26B1 PUSH2 0x1DCE JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x26BF DUP5 DUP3 DUP6 ADD PUSH2 0x2689 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x26DB PUSH0 DUP4 ADD DUP7 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x26E8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x26F5 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x2731 PUSH1 0x1F DUP4 PUSH2 0x1D48 JUMP JUMPDEST SWAP2 POP PUSH2 0x273C DUP3 PUSH2 0x26FD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x275E DUP2 PUSH2 0x2725 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2778 PUSH0 DUP4 ADD DUP9 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x2785 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x2792 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x279F PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x27AC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x203D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x27C9 PUSH0 DUP4 ADD DUP8 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x27D6 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x27E3 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x27F0 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1F85 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0xEC CALLER 0xC 0xE2 0xA8 PUSH14 0xCE04904D74095C3D856E12831B32 TLOAD 0xD4 BLOBBASEFEE SHL 0x2D 0xD9 SLOAD 0xCA 0xF7 DELEGATECALL 0xAE PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
		"sourceMap": "559:3322:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1760:89:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3979:186;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2830:97;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4757:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2688:82;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2659:112:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2747:226:20;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3041:133;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2985:116:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:0;;;:::i;:::-;;2331:247:20;;;:::i;:::-;;3258:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2409:143:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5243:557:16;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;1638:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1962:93:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3296:178;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1990:256:20;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1683:672:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3532:140:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1717:93:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3648:230;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;742:51;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1760:89:4;1805:13;1837:5;1830:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1760:89;:::o;3979:186::-;4052:4;4068:13;4084:12;:10;:12::i;:::-;4068:28;;4106:31;4115:5;4122:7;4131:5;4106:8;:31::i;:::-;4154:4;4147:11;;;3979:186;;;;:::o;2830:97::-;2882:7;2908:12;;2901:19;;2830:97;:::o;4757:244::-;4844:4;4860:15;4878:12;:10;:12::i;:::-;4860:30;;4900:37;4916:4;4922:7;4931:5;4900:15;:37::i;:::-;4947:26;4957:4;4963:2;4967:5;4947:9;:26::i;:::-;4990:4;4983:11;;;4757:244;;;;;:::o;2688:82::-;2737:5;2761:2;2754:9;;2688:82;:::o;2659:112:7:-;2718:7;2744:20;:18;:20::i;:::-;2737:27;;2659:112;:::o;2747:226:20:-;1531:13:0;:11;:13::i;:::-;2261:21:3::1;:19;:21::i;:::-;772::20::2;2856:6;2840:13;:11;:13::i;:::-;:22;;;;:::i;:::-;:29;;2832:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;2908:17;2914:2;2918:6;2908:5;:17::i;:::-;2954:2;2941:24;;;2958:6;2941:24;;;;;;:::i;:::-;;;;;;;;2303:20:3::1;:18;:20::i;:::-;2747:226:20::0;;:::o;3041:133::-;3098:18;3109:6;3098:10;:18::i;:::-;3145:12;:10;:12::i;:::-;3132:34;;;3159:6;3132:34;;;;;;:::i;:::-;;;;;;;;3041:133;:::o;2985:116:4:-;3050:7;3076:9;:18;3086:7;3076:18;;;;;;;;;;;;;;;;3069:25;;2985:116;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;2331:247:20:-;2378:14;2395:12;:10;:12::i;:::-;2378:29;;2436:13;;;;;;;;;;;2426:23;;:6;:23;;;2418:78;;;;;;;;;;;;:::i;:::-;;;;;;;;;2531:1;2507:13;;:26;;;;;;;;;;;;;;;;;;2544;2563:6;2544:18;:26::i;:::-;2367:211;2331:247::o;3258:162::-;3336:31;3351:7;3360:6;3336:14;:31::i;:::-;3396:7;3383:29;;;3405:6;3383:29;;;;;;:::i;:::-;;;;;;;;3258:162;;:::o;2409:143:7:-;2500:7;2526:19;2539:5;2526:12;:19::i;:::-;2519:26;;2409:143;;;:::o;5243:557:16:-;5341:13;5368:18;5400:21;5435:15;5464:25;5503:12;5529:27;5632:13;:11;:13::i;:::-;5659:16;:14;:16::i;:::-;5689:13;5724:4;5751:1;5743:10;;5781:1;5767:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5581:212;;;;;;;;;;;;;;;;;;;;;5243:557;;;;;;;:::o;1638:85:0:-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;1962:93:4:-;2009:13;2041:7;2034:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1962:93;:::o;3296:178::-;3365:4;3381:13;3397:12;:10;:12::i;:::-;3381:28;;3419:27;3429:5;3436:2;3440:5;3419:9;:27::i;:::-;3463:4;3456:11;;;3296:178;;;;:::o;1990:256:20:-;1531:13:0;:11;:13::i;:::-;2101:1:20::1;2081:22;;:8;:22;;::::0;2073:71:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2171:8;2155:13;;:24;;;;;;;;;;;;;;;;;;2229:8;2195:43;;2220:7;:5;:7::i;:::-;2195:43;;;;;;;;;;;;1990:256:::0;:::o;1683:672:7:-;1904:8;1886:15;:26;1882:97;;;1959:8;1935:33;;;;;;;;;;;:::i;:::-;;;;;;;;1882:97;1989:18;1024:95;2048:5;2055:7;2064:5;2071:16;2081:5;2071:9;:16::i;:::-;2089:8;2020:78;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2010:89;;;;;;1989:110;;2110:12;2125:28;2142:10;2125:16;:28::i;:::-;2110:43;;2164:14;2181:28;2195:4;2201:1;2204;2207;2181:13;:28::i;:::-;2164:45;;2233:5;2223:15;;:6;:15;;;2219:88;;2282:6;2290:5;2261:35;;;;;;;;;;;;:::i;:::-;;;;;;;;2219:88;2317:31;2326:5;2333:7;2342:5;2317:8;:31::i;:::-;1872:483;;;1683:672;;;;;;;:::o;3532:140:4:-;3612:7;3638:11;:18;3650:5;3638:18;;;;;;;;;;;;;;;:27;3657:7;3638:27;;;;;;;;;;;;;;;;3631:34;;3532:140;;;;:::o;1717:93:20:-;1762:7;1789:13;;;;;;;;;;;1782:20;;1717:93;:::o;3648:230::-;1531:13:0;:11;:13::i;:::-;3785:5:20::1;:14;;;3800:2;3804:6;3785:26;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3859:2;3827:43;;3851:5;3827:43;;;3863:6;3827:43;;;;;;:::i;:::-;;;;;;;;3648:230:::0;;;:::o;742:51::-;772:21;742:51;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;656:96:10:-;709:7;735:10;728:17;;656:96;:::o;8707:128:4:-;8791:37;8800:5;8807:7;8816:5;8823:4;8791:8;:37::i;:::-;8707:128;;;:::o;10396:476::-;10495:24;10522:25;10532:5;10539:7;10522:9;:25::i;:::-;10495:52;;10580:17;10561:16;:36;10557:309;;;10636:5;10617:16;:24;10613:130;;;10695:7;10704:16;10722:5;10668:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10613:130;10784:57;10793:5;10800:7;10828:5;10809:16;:24;10835:5;10784:8;:57::i;:::-;10557:309;10485:387;10396:476;;;:::o;5374:300::-;5473:1;5457:18;;:4;:18;;;5453:86;;5525:1;5498:30;;;;;;;;;;;:::i;:::-;;;;;;;;5453:86;5566:1;5552:16;;:2;:16;;;5548:86;;5620:1;5591:32;;;;;;;;;;;:::i;:::-;;;;;;;;5548:86;5643:24;5651:4;5657:2;5661:5;5643:7;:24::i;:::-;5374:300;;;:::o;3945:262:16:-;3998:7;4038:11;4021:28;;4029:4;4021:28;;;:63;;;;;4070:14;4053:13;:31;4021:63;4017:184;;;4107:22;4100:29;;;;4017:184;4167:23;:21;:23::i;:::-;4160:30;;3945:262;;:::o;1796:162:0:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2336:287:3:-;1759:1;2468:7;;:19;2460:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1759:1;2598:7;:18;;;;2336:287::o;7439:208:4:-;7528:1;7509:21;;:7;:21;;;7505:91;;7582:1;7553:32;;;;;;;;;;;:::i;:::-;;;;;;;;7505:91;7605:35;7621:1;7625:7;7634:5;7605:7;:35::i;:::-;7439:208;;:::o;2629:209:3:-;1716:1;2809:7;:22;;;;2629:209::o;618:87:6:-;672:26;678:12;:10;:12::i;:::-;692:5;672;:26::i;:::-;618:87;:::o;2912:187:0:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;1021:158:6:-;1096:45;1112:7;1121:12;:10;:12::i;:::-;1135:5;1096:15;:45::i;:::-;1151:21;1157:7;1166:5;1151;:21::i;:::-;1021:158;;:::o;538:107:11:-;598:7;624;:14;632:5;624:14;;;;;;;;;;;;;;;;617:21;;538:107;;;:::o;6120:126:16:-;6166:13;6198:41;6225:13;6198:5;:26;;:41;;;;:::i;:::-;6191:48;;6120:126;:::o;6572:135::-;6621:13;6653:47;6683:16;6653:8;:29;;:47;;;;:::i;:::-;6646:54;;6572:135;:::o;759:395:11:-;819:7;1121;:14;1129:5;1121:14;;;;;;;;;;;;;;;;:16;;;;;;;;;;;;1114:23;;759:395;;;:::o;5017:176:16:-;5094:7;5120:66;5153:20;:18;:20::i;:::-;5175:10;5120:32;:66::i;:::-;5113:73;;5017:176;;;:::o;6887:260:15:-;6972:7;6992:17;7011:18;7031:16;7051:25;7062:4;7068:1;7071;7074;7051:10;:25::i;:::-;6991:85;;;;;;7086:28;7098:5;7105:8;7086:11;:28::i;:::-;7131:9;7124:16;;;;;6887:260;;;;;;:::o;9682:432:4:-;9811:1;9794:19;;:5;:19;;;9790:89;;9865:1;9836:32;;;;;;;;;;;:::i;:::-;;;;;;;;9790:89;9911:1;9892:21;;:7;:21;;;9888:90;;9964:1;9936:31;;;;;;;;;;;:::i;:::-;;;;;;;;9888:90;10017:5;9987:11;:18;9999:5;9987:18;;;;;;;;;;;;;;;:27;10006:7;9987:27;;;;;;;;;;;;;;;:35;;;;10036:9;10032:76;;;10082:7;10066:31;;10075:5;10066:31;;;10091:5;10066:31;;;;;;:::i;:::-;;;;;;;;10032:76;9682:432;;;;:::o;5989:1107::-;6094:1;6078:18;;:4;:18;;;6074:540;;6230:5;6214:12;;:21;;;;;;;:::i;:::-;;;;;;;;6074:540;;;6266:19;6288:9;:15;6298:4;6288:15;;;;;;;;;;;;;;;;6266:37;;6335:5;6321:11;:19;6317:115;;;6392:4;6398:11;6411:5;6367:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6317:115;6584:5;6570:11;:19;6552:9;:15;6562:4;6552:15;;;;;;;;;;;;;;;:37;;;;6252:362;6074:540;6642:1;6628:16;;:2;:16;;;6624:425;;6807:5;6791:12;;:21;;;;;;;;;;;6624:425;;;7019:5;7002:9;:13;7012:2;7002:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6624:425;7079:2;7064:25;;7073:4;7064:25;;;7083:5;7064:25;;;;;;:::i;:::-;;;;;;;;5989:1107;;;:::o;4213:179:16:-;4268:7;2079:95;4326:11;4339:14;4355:13;4378:4;4304:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4294:91;;;;;;4287:98;;4213:179;:::o;7965:206:4:-;8054:1;8035:21;;:7;:21;;;8031:89;;8106:1;8079:30;;;;;;;;;;;:::i;:::-;;;;;;;;8031:89;8129:35;8137:7;8154:1;8158:5;8129:7;:35::i;:::-;7965:206;;:::o;3368:267:12:-;3462:13;1390:66;3520:17;;3510:5;3491:46;3487:142;;3560:15;3569:5;3560:8;:15::i;:::-;3553:22;;;;3487:142;3613:5;3606:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3368:267;;;;;:::o;3874:374:17:-;3967:14;4049:4;4043:11;4079:10;4074:3;4067:23;4126:15;4119:4;4114:3;4110:14;4103:39;4178:10;4171:4;4166:3;4162:14;4155:34;4227:4;4222:3;4212:20;4202:30;;4018:224;3874:374;;;;:::o;5203:1551:15:-;5329:17;5348:16;5366:14;6283:66;6278:1;6270:10;;:79;6266:164;;;6381:1;6385:30;6417:1;6365:54;;;;;;;;6266:164;6524:14;6541:24;6551:4;6557:1;6560;6563;6541:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6524:41;;6597:1;6579:20;;:6;:20;;;6575:113;;6631:1;6635:29;6674:1;6666:10;;6615:62;;;;;;;;;6575:113;6706:6;6714:20;6744:1;6736:10;;6698:49;;;;;;;5203:1551;;;;;;;;;:::o;7280:532::-;7375:20;7366:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;7362:444;7411:7;7362:444;7471:29;7462:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;7458:348;;7523:23;;;;;;;;;;;;;;7458:348;7576:35;7567:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;7563:243;;7670:8;7662:17;;7634:46;;;;;;;;;;;:::i;:::-;;;;;;;;7563:243;7710:30;7701:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;7697:109;;7786:8;7763:32;;;;;;;;;;;:::i;:::-;;;;;;;;7697:109;7280:532;;;:::o;2078:378:12:-;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2162:30;;2280:17;2311:2;2300:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2280:34;;2375:3;2370;2363:16;2415:4;2408;2403:3;2399:14;2392:28;2446:3;2439:10;;;;2078:378;;;:::o;2528:245::-;2589:7;2608:14;2661:4;2652;2625:33;;:40;2608:57;;2688:2;2679:6;:11;2675:69;;;2713:20;;;;;;;;;;;;;;2675:69;2760:6;2753:13;;;2528:245;;;:::o;7:99:21:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:139::-;376:6;371:3;366;360:23;417:1;408:6;403:3;399:16;392:27;287:139;;;:::o;432:102::-;473:6;524:2;520:7;515:2;508:5;504:14;500:28;490:38;;432:102;;;:::o;540:377::-;628:3;656:39;689:5;656:39;:::i;:::-;711:71;775:6;770:3;711:71;:::i;:::-;704:78;;791:65;849:6;844:3;837:4;830:5;826:16;791:65;:::i;:::-;881:29;903:6;881:29;:::i;:::-;876:3;872:39;865:46;;632:285;540:377;;;;:::o;923:313::-;1036:4;1074:2;1063:9;1059:18;1051:26;;1123:9;1117:4;1113:20;1109:1;1098:9;1094:17;1087:47;1151:78;1224:4;1215:6;1151:78;:::i;:::-;1143:86;;923:313;;;;:::o;1323:117::-;1432:1;1429;1422:12;1569:126;1606:7;1646:42;1639:5;1635:54;1624:65;;1569:126;;;:::o;1701:96::-;1738:7;1767:24;1785:5;1767:24;:::i;:::-;1756:35;;1701:96;;;:::o;1803:122::-;1876:24;1894:5;1876:24;:::i;:::-;1869:5;1866:35;1856:63;;1915:1;1912;1905:12;1856:63;1803:122;:::o;1931:139::-;1977:5;2015:6;2002:20;1993:29;;2031:33;2058:5;2031:33;:::i;:::-;1931:139;;;;:::o;2076:77::-;2113:7;2142:5;2131:16;;2076:77;;;:::o;2159:122::-;2232:24;2250:5;2232:24;:::i;:::-;2225:5;2222:35;2212:63;;2271:1;2268;2261:12;2212:63;2159:122;:::o;2287:139::-;2333:5;2371:6;2358:20;2349:29;;2387:33;2414:5;2387:33;:::i;:::-;2287:139;;;;:::o;2432:474::-;2500:6;2508;2557:2;2545:9;2536:7;2532:23;2528:32;2525:119;;;2563:79;;:::i;:::-;2525:119;2683:1;2708:53;2753:7;2744:6;2733:9;2729:22;2708:53;:::i;:::-;2698:63;;2654:117;2810:2;2836:53;2881:7;2872:6;2861:9;2857:22;2836:53;:::i;:::-;2826:63;;2781:118;2432:474;;;;;:::o;2912:90::-;2946:7;2989:5;2982:13;2975:21;2964:32;;2912:90;;;:::o;3008:109::-;3089:21;3104:5;3089:21;:::i;:::-;3084:3;3077:34;3008:109;;:::o;3123:210::-;3210:4;3248:2;3237:9;3233:18;3225:26;;3261:65;3323:1;3312:9;3308:17;3299:6;3261:65;:::i;:::-;3123:210;;;;:::o;3339:118::-;3426:24;3444:5;3426:24;:::i;:::-;3421:3;3414:37;3339:118;;:::o;3463:222::-;3556:4;3594:2;3583:9;3579:18;3571:26;;3607:71;3675:1;3664:9;3660:17;3651:6;3607:71;:::i;:::-;3463:222;;;;:::o;3691:619::-;3768:6;3776;3784;3833:2;3821:9;3812:7;3808:23;3804:32;3801:119;;;3839:79;;:::i;:::-;3801:119;3959:1;3984:53;4029:7;4020:6;4009:9;4005:22;3984:53;:::i;:::-;3974:63;;3930:117;4086:2;4112:53;4157:7;4148:6;4137:9;4133:22;4112:53;:::i;:::-;4102:63;;4057:118;4214:2;4240:53;4285:7;4276:6;4265:9;4261:22;4240:53;:::i;:::-;4230:63;;4185:118;3691:619;;;;;:::o;4316:86::-;4351:7;4391:4;4384:5;4380:16;4369:27;;4316:86;;;:::o;4408:112::-;4491:22;4507:5;4491:22;:::i;:::-;4486:3;4479:35;4408:112;;:::o;4526:214::-;4615:4;4653:2;4642:9;4638:18;4630:26;;4666:67;4730:1;4719:9;4715:17;4706:6;4666:67;:::i;:::-;4526:214;;;;:::o;4746:77::-;4783:7;4812:5;4801:16;;4746:77;;;:::o;4829:118::-;4916:24;4934:5;4916:24;:::i;:::-;4911:3;4904:37;4829:118;;:::o;4953:222::-;5046:4;5084:2;5073:9;5069:18;5061:26;;5097:71;5165:1;5154:9;5150:17;5141:6;5097:71;:::i;:::-;4953:222;;;;:::o;5181:329::-;5240:6;5289:2;5277:9;5268:7;5264:23;5260:32;5257:119;;;5295:79;;:::i;:::-;5257:119;5415:1;5440:53;5485:7;5476:6;5465:9;5461:22;5440:53;:::i;:::-;5430:63;;5386:117;5181:329;;;;:::o;5516:::-;5575:6;5624:2;5612:9;5603:7;5599:23;5595:32;5592:119;;;5630:79;;:::i;:::-;5592:119;5750:1;5775:53;5820:7;5811:6;5800:9;5796:22;5775:53;:::i;:::-;5765:63;;5721:117;5516:329;;;;:::o;5851:149::-;5887:7;5927:66;5920:5;5916:78;5905:89;;5851:149;;;:::o;6006:115::-;6091:23;6108:5;6091:23;:::i;:::-;6086:3;6079:36;6006:115;;:::o;6127:118::-;6214:24;6232:5;6214:24;:::i;:::-;6209:3;6202:37;6127:118;;:::o;6251:114::-;6318:6;6352:5;6346:12;6336:22;;6251:114;;;:::o;6371:184::-;6470:11;6504:6;6499:3;6492:19;6544:4;6539:3;6535:14;6520:29;;6371:184;;;;:::o;6561:132::-;6628:4;6651:3;6643:11;;6681:4;6676:3;6672:14;6664:22;;6561:132;;;:::o;6699:108::-;6776:24;6794:5;6776:24;:::i;:::-;6771:3;6764:37;6699:108;;:::o;6813:179::-;6882:10;6903:46;6945:3;6937:6;6903:46;:::i;:::-;6981:4;6976:3;6972:14;6958:28;;6813:179;;;;:::o;6998:113::-;7068:4;7100;7095:3;7091:14;7083:22;;6998:113;;;:::o;7147:732::-;7266:3;7295:54;7343:5;7295:54;:::i;:::-;7365:86;7444:6;7439:3;7365:86;:::i;:::-;7358:93;;7475:56;7525:5;7475:56;:::i;:::-;7554:7;7585:1;7570:284;7595:6;7592:1;7589:13;7570:284;;;7671:6;7665:13;7698:63;7757:3;7742:13;7698:63;:::i;:::-;7691:70;;7784:60;7837:6;7784:60;:::i;:::-;7774:70;;7630:224;7617:1;7614;7610:9;7605:14;;7570:284;;;7574:14;7870:3;7863:10;;7271:608;;;7147:732;;;;:::o;7885:1215::-;8234:4;8272:3;8261:9;8257:19;8249:27;;8286:69;8352:1;8341:9;8337:17;8328:6;8286:69;:::i;:::-;8402:9;8396:4;8392:20;8387:2;8376:9;8372:18;8365:48;8430:78;8503:4;8494:6;8430:78;:::i;:::-;8422:86;;8555:9;8549:4;8545:20;8540:2;8529:9;8525:18;8518:48;8583:78;8656:4;8647:6;8583:78;:::i;:::-;8575:86;;8671:72;8739:2;8728:9;8724:18;8715:6;8671:72;:::i;:::-;8753:73;8821:3;8810:9;8806:19;8797:6;8753:73;:::i;:::-;8836;8904:3;8893:9;8889:19;8880:6;8836:73;:::i;:::-;8957:9;8951:4;8947:20;8941:3;8930:9;8926:19;8919:49;8985:108;9088:4;9079:6;8985:108;:::i;:::-;8977:116;;7885:1215;;;;;;;;;;:::o;9106:222::-;9199:4;9237:2;9226:9;9222:18;9214:26;;9250:71;9318:1;9307:9;9303:17;9294:6;9250:71;:::i;:::-;9106:222;;;;:::o;9334:118::-;9405:22;9421:5;9405:22;:::i;:::-;9398:5;9395:33;9385:61;;9442:1;9439;9432:12;9385:61;9334:118;:::o;9458:135::-;9502:5;9540:6;9527:20;9518:29;;9556:31;9581:5;9556:31;:::i;:::-;9458:135;;;;:::o;9599:122::-;9672:24;9690:5;9672:24;:::i;:::-;9665:5;9662:35;9652:63;;9711:1;9708;9701:12;9652:63;9599:122;:::o;9727:139::-;9773:5;9811:6;9798:20;9789:29;;9827:33;9854:5;9827:33;:::i;:::-;9727:139;;;;:::o;9872:1199::-;9983:6;9991;9999;10007;10015;10023;10031;10080:3;10068:9;10059:7;10055:23;10051:33;10048:120;;;10087:79;;:::i;:::-;10048:120;10207:1;10232:53;10277:7;10268:6;10257:9;10253:22;10232:53;:::i;:::-;10222:63;;10178:117;10334:2;10360:53;10405:7;10396:6;10385:9;10381:22;10360:53;:::i;:::-;10350:63;;10305:118;10462:2;10488:53;10533:7;10524:6;10513:9;10509:22;10488:53;:::i;:::-;10478:63;;10433:118;10590:2;10616:53;10661:7;10652:6;10641:9;10637:22;10616:53;:::i;:::-;10606:63;;10561:118;10718:3;10745:51;10788:7;10779:6;10768:9;10764:22;10745:51;:::i;:::-;10735:61;;10689:117;10845:3;10872:53;10917:7;10908:6;10897:9;10893:22;10872:53;:::i;:::-;10862:63;;10816:119;10974:3;11001:53;11046:7;11037:6;11026:9;11022:22;11001:53;:::i;:::-;10991:63;;10945:119;9872:1199;;;;;;;;;;:::o;11077:474::-;11145:6;11153;11202:2;11190:9;11181:7;11177:23;11173:32;11170:119;;;11208:79;;:::i;:::-;11170:119;11328:1;11353:53;11398:7;11389:6;11378:9;11374:22;11353:53;:::i;:::-;11343:63;;11299:117;11455:2;11481:53;11526:7;11517:6;11506:9;11502:22;11481:53;:::i;:::-;11471:63;;11426:118;11077:474;;;;;:::o;11557:110::-;11608:7;11637:24;11655:5;11637:24;:::i;:::-;11626:35;;11557:110;;;:::o;11673:150::-;11760:38;11792:5;11760:38;:::i;:::-;11753:5;11750:49;11740:77;;11813:1;11810;11803:12;11740:77;11673:150;:::o;11829:167::-;11889:5;11927:6;11914:20;11905:29;;11943:47;11984:5;11943:47;:::i;:::-;11829:167;;;;:::o;12002:647::-;12093:6;12101;12109;12158:2;12146:9;12137:7;12133:23;12129:32;12126:119;;;12164:79;;:::i;:::-;12126:119;12284:1;12309:67;12368:7;12359:6;12348:9;12344:22;12309:67;:::i;:::-;12299:77;;12255:131;12425:2;12451:53;12496:7;12487:6;12476:9;12472:22;12451:53;:::i;:::-;12441:63;;12396:118;12553:2;12579:53;12624:7;12615:6;12604:9;12600:22;12579:53;:::i;:::-;12569:63;;12524:118;12002:647;;;;;:::o;12655:180::-;12703:77;12700:1;12693:88;12800:4;12797:1;12790:15;12824:4;12821:1;12814:15;12841:320;12885:6;12922:1;12916:4;12912:12;12902:22;;12969:1;12963:4;12959:12;12990:18;12980:81;;13046:4;13038:6;13034:17;13024:27;;12980:81;13108:2;13100:6;13097:14;13077:18;13074:38;13071:84;;13127:18;;:::i;:::-;13071:84;12892:269;12841:320;;;:::o;13167:180::-;13215:77;13212:1;13205:88;13312:4;13309:1;13302:15;13336:4;13333:1;13326:15;13353:191;13393:3;13412:20;13430:1;13412:20;:::i;:::-;13407:25;;13446:20;13464:1;13446:20;:::i;:::-;13441:25;;13489:1;13486;13482:9;13475:16;;13510:3;13507:1;13504:10;13501:36;;;13517:18;;:::i;:::-;13501:36;13353:191;;;;:::o;13550:173::-;13690:25;13686:1;13678:6;13674:14;13667:49;13550:173;:::o;13729:366::-;13871:3;13892:67;13956:2;13951:3;13892:67;:::i;:::-;13885:74;;13968:93;14057:3;13968:93;:::i;:::-;14086:2;14081:3;14077:12;14070:19;;13729:366;;;:::o;14101:419::-;14267:4;14305:2;14294:9;14290:18;14282:26;;14354:9;14348:4;14344:20;14340:1;14329:9;14325:17;14318:47;14382:131;14508:4;14382:131;:::i;:::-;14374:139;;14101:419;;;:::o;14526:229::-;14666:34;14662:1;14654:6;14650:14;14643:58;14735:12;14730:2;14722:6;14718:15;14711:37;14526:229;:::o;14761:366::-;14903:3;14924:67;14988:2;14983:3;14924:67;:::i;:::-;14917:74;;15000:93;15089:3;15000:93;:::i;:::-;15118:2;15113:3;15109:12;15102:19;;14761:366;;;:::o;15133:419::-;15299:4;15337:2;15326:9;15322:18;15314:26;;15386:9;15380:4;15376:20;15372:1;15361:9;15357:17;15350:47;15414:131;15540:4;15414:131;:::i;:::-;15406:139;;15133:419;;;:::o;15558:180::-;15606:77;15603:1;15596:88;15703:4;15700:1;15693:15;15727:4;15724:1;15717:15;15744:223;15884:34;15880:1;15872:6;15868:14;15861:58;15953:6;15948:2;15940:6;15936:15;15929:31;15744:223;:::o;15973:366::-;16115:3;16136:67;16200:2;16195:3;16136:67;:::i;:::-;16129:74;;16212:93;16301:3;16212:93;:::i;:::-;16330:2;16325:3;16321:12;16314:19;;15973:366;;;:::o;16345:419::-;16511:4;16549:2;16538:9;16534:18;16526:26;;16598:9;16592:4;16588:20;16584:1;16573:9;16569:17;16562:47;16626:131;16752:4;16626:131;:::i;:::-;16618:139;;16345:419;;;:::o;16770:775::-;17003:4;17041:3;17030:9;17026:19;17018:27;;17055:71;17123:1;17112:9;17108:17;17099:6;17055:71;:::i;:::-;17136:72;17204:2;17193:9;17189:18;17180:6;17136:72;:::i;:::-;17218;17286:2;17275:9;17271:18;17262:6;17218:72;:::i;:::-;17300;17368:2;17357:9;17353:18;17344:6;17300:72;:::i;:::-;17382:73;17450:3;17439:9;17435:19;17426:6;17382:73;:::i;:::-;17465;17533:3;17522:9;17518:19;17509:6;17465:73;:::i;:::-;16770:775;;;;;;;;;:::o;17551:332::-;17672:4;17710:2;17699:9;17695:18;17687:26;;17723:71;17791:1;17780:9;17776:17;17767:6;17723:71;:::i;:::-;17804:72;17872:2;17861:9;17857:18;17848:6;17804:72;:::i;:::-;17551:332;;;;;:::o;17889:::-;18010:4;18048:2;18037:9;18033:18;18025:26;;18061:71;18129:1;18118:9;18114:17;18105:6;18061:71;:::i;:::-;18142:72;18210:2;18199:9;18195:18;18186:6;18142:72;:::i;:::-;17889:332;;;;;:::o;18227:116::-;18297:21;18312:5;18297:21;:::i;:::-;18290:5;18287:32;18277:60;;18333:1;18330;18323:12;18277:60;18227:116;:::o;18349:137::-;18403:5;18434:6;18428:13;18419:22;;18450:30;18474:5;18450:30;:::i;:::-;18349:137;;;;:::o;18492:345::-;18559:6;18608:2;18596:9;18587:7;18583:23;18579:32;18576:119;;;18614:79;;:::i;:::-;18576:119;18734:1;18759:61;18812:7;18803:6;18792:9;18788:22;18759:61;:::i;:::-;18749:71;;18705:125;18492:345;;;;:::o;18843:442::-;18992:4;19030:2;19019:9;19015:18;19007:26;;19043:71;19111:1;19100:9;19096:17;19087:6;19043:71;:::i;:::-;19124:72;19192:2;19181:9;19177:18;19168:6;19124:72;:::i;:::-;19206;19274:2;19263:9;19259:18;19250:6;19206:72;:::i;:::-;18843:442;;;;;;:::o;19291:181::-;19431:33;19427:1;19419:6;19415:14;19408:57;19291:181;:::o;19478:366::-;19620:3;19641:67;19705:2;19700:3;19641:67;:::i;:::-;19634:74;;19717:93;19806:3;19717:93;:::i;:::-;19835:2;19830:3;19826:12;19819:19;;19478:366;;;:::o;19850:419::-;20016:4;20054:2;20043:9;20039:18;20031:26;;20103:9;20097:4;20093:20;20089:1;20078:9;20074:17;20067:47;20131:131;20257:4;20131:131;:::i;:::-;20123:139;;19850:419;;;:::o;20275:664::-;20480:4;20518:3;20507:9;20503:19;20495:27;;20532:71;20600:1;20589:9;20585:17;20576:6;20532:71;:::i;:::-;20613:72;20681:2;20670:9;20666:18;20657:6;20613:72;:::i;:::-;20695;20763:2;20752:9;20748:18;20739:6;20695:72;:::i;:::-;20777;20845:2;20834:9;20830:18;20821:6;20777:72;:::i;:::-;20859:73;20927:3;20916:9;20912:19;20903:6;20859:73;:::i;:::-;20275:664;;;;;;;;:::o;20945:545::-;21118:4;21156:3;21145:9;21141:19;21133:27;;21170:71;21238:1;21227:9;21223:17;21214:6;21170:71;:::i;:::-;21251:68;21315:2;21304:9;21300:18;21291:6;21251:68;:::i;:::-;21329:72;21397:2;21386:9;21382:18;21373:6;21329:72;:::i;:::-;21411;21479:2;21468:9;21464:18;21455:6;21411:72;:::i;:::-;20945:545;;;;;;;:::o;21496:180::-;21544:77;21541:1;21534:88;21641:4;21638:1;21631:15;21665:4;21662:1;21655:15"
	},
	"Assembly": ".code\n  PUSH 160\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 40\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  MSTORE \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  CALLVALUE \t\t\tnstructor()\\r\\n        ERC20(\"...\n  DUP1 \t\t\tnstructor()\\r\\n        ERC20(\"...\n  ISZERO \t\t\tnstructor()\\r\\n        ERC20(\"...\n  PUSH [tag] 1\t\t\tnstructor()\\r\\n        ERC20(\"...\n  JUMPI \t\t\tnstructor()\\r\\n        ERC20(\"...\n  PUSH 0\t\t\tnstructor()\\r\\n        ERC20(\"...\n  DUP1 \t\t\tnstructor()\\r\\n        ERC20(\"...\n  REVERT \t\t\tnstructor()\\r\\n        ERC20(\"...\ntag 1\t\t\tnstructor()\\r\\n        ERC20(\"...\n  JUMPDEST \t\t\tnstructor()\\r\\n        ERC20(\"...\n  POP \t\t\tnstructor()\\r\\n        ERC20(\"...\n  CALLER \t\t\tg.sender)\\r\n  PUSH 40\t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  MLOAD \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  DUP1 \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  PUSH 40\t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  ADD \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  PUSH 40\t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  MSTORE \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  DUP1 \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  PUSH A\t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  DUP2 \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  MSTORE \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  PUSH 20\t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  ADD \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  PUSH 5772617070656420523500000000000000000000000000000000000000000000\t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  DUP2 \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  MSTORE \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  POP \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  DUP1 \t\t\ter i\n  PUSH 40\t\t\t@notice Rescue any ERC20 token...\n  MLOAD \t\t\t@notice Rescue any ERC20 token...\n  DUP1 \t\t\t@notice Rescue any ERC20 token...\n  PUSH 40\t\t\t@notice Rescue any ERC20 token...\n  ADD \t\t\t@notice Rescue any ERC20 token...\n  PUSH 40\t\t\t@notice Rescue any ERC20 token...\n  MSTORE \t\t\t@notice Rescue any ERC20 token...\n  DUP1 \t\t\t@notice Rescue any ERC20 token...\n  PUSH 1\t\t\t@notice Rescue any ERC20 token...\n  DUP2 \t\t\t@notice Rescue any ERC20 token...\n  MSTORE \t\t\t@notice Rescue any ERC20 token...\n  PUSH 20\t\t\t@notice Rescue any ERC20 token...\n  ADD \t\t\t@notice Rescue any ERC20 token...\n  PUSH 3100000000000000000000000000000000000000000000000000000000000000\t\t\t@notice Rescue any ERC20 token...\n  DUP2 \t\t\t@notice Rescue any ERC20 token...\n  MSTORE \t\t\t@notice Rescue any ERC20 token...\n  POP \t\t\t@notice Rescue any ERC20 token...\n  PUSH 40\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  MLOAD \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  DUP1 \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 40\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  ADD \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 40\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  MSTORE \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  DUP1 \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH A\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  DUP2 \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  MSTORE \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 20\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  ADD \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 5772617070656420523500000000000000000000000000000000000000000000\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  DUP2 \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  MSTORE \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  POP \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 40\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  MLOAD \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  DUP1 \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 40\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  ADD \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 40\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  MSTORE \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  DUP1 \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 3\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  DUP2 \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  MSTORE \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 20\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  ADD \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH 5752350000000000000000000000000000000000000000000000000000000000\t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  DUP2 \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  MSTORE \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  POP \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  DUP2 \t\t\t /// \n  PUSH 3\t\t\t}\\r\\n\\r\\n\n  SWAP1 \t\t\t}\\r\\n\\r\\n    /// \n  DUP2 \t\t\t}\\r\\n\\r\\n    /// \n  PUSH [tag] 9\t\t\t}\\r\\n\\r\\n    /// \n  SWAP2 \t\t\t}\\r\\n\\r\\n    /// \n  SWAP1 \t\t\t}\\r\\n\\r\\n    /// \n  PUSH [tag] 10\t\t\t}\\r\\n\\r\\n    /// \n  JUMP \t\t\t}\\r\\n\\r\\n    /// \ntag 9\t\t\t}\\r\\n\\r\\n    /// \n  JUMPDEST \t\t\t}\\r\\n\\r\\n    /// \n  POP \t\t\t}\\r\\n\\r\\n    /// \n  DUP1 \t\t\tress pe\n  PUSH 4\t\t\tew the \n  SWAP1 \t\t\tew the address pe\n  DUP2 \t\t\tew the address pe\n  PUSH [tag] 11\t\t\tew the address pe\n  SWAP2 \t\t\tew the address pe\n  SWAP1 \t\t\tew the address pe\n  PUSH [tag] 10\t\t\tew the address pe\n  JUMP \t\t\tew the address pe\ntag 11\t\t\tew the address pe\n  JUMPDEST \t\t\tew the address pe\n  POP \t\t\tew the address pe\n  POP \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  POP \t\t\tmsg.sender)\\r\\n    {\\r\\n      ...\n  PUSH [tag] 13\t\t\tn  The ERC20 contract to pull ...\n  PUSH 5\t\t\tokens from\\r\\n \n  DUP4 \t\t\tn  T\n  PUSH [tag] 14\t\t\tn  The ERC20 contract to pull \n  PUSH 20\t\t\tn  The ERC20 contract to pull \n  SHL \t\t\tn  The ERC20 contract to pull \n  SWAP1 \t\t\tn  The ERC20 contract to pull \n  SWAP2 \t\t\tn  The ERC20 contract to pull ...\n  SWAP1 \t\t\tn  The ERC20 contract to pull ...\n  PUSH 20\t\t\tn  The ERC20 contract to pull ...\n  SHR \t\t\tn  The ERC20 contract to pull ...\n  JUMP \t\t\tn  The ERC20 contract to pull ...\ntag 13\t\t\tn  The ERC20 contract to pull ...\n  JUMPDEST \t\t\tn  The ERC20 contract to pull ...\n  PUSH 120\t\t\tram token  The ERC20 contract ...\n  DUP2 \t\t\tram token  The ERC20 contract ...\n  DUP2 \t\t\tram token  The ERC20 contract ...\n  MSTORE \t\t\tram token  The ERC20 contract ...\n  POP \t\t\tram token  The ERC20 contract ...\n  POP \t\t\tram token  The ERC20 contract ...\n  PUSH [tag] 15\t\t\tecipient of the rescued tokens...\n  PUSH 6\t\t\t  /// @param amo\n  DUP3 \t\t\tecipien\n  PUSH [tag] 14\t\t\tecipient of the rescued tokens...\n  PUSH 20\t\t\tecipient of the rescued tokens...\n  SHL \t\t\tecipient of the rescued tokens...\n  SWAP1 \t\t\tecipient of the rescued tokens...\n  SWAP2 \t\t\tecipient of the rescued tokens...\n  SWAP1 \t\t\tecipient of the rescued tokens...\n  PUSH 20\t\t\tecipient of the rescued tokens...\n  SHR \t\t\tecipient of the rescued tokens...\n  JUMP \t\t\tecipient of the rescued tokens...\ntag 15\t\t\tecipient of the rescued tokens...\n  JUMPDEST \t\t\tecipient of the rescued tokens...\n  PUSH 140\t\t\tam to     Recipient of the res...\n  DUP2 \t\t\tam to     Recipient of the res...\n  DUP2 \t\t\tam to     Recipient of the res...\n  MSTORE \t\t\tam to     Recipient of the res...\n  POP \t\t\tam to     Recipient of the res...\n  POP \t\t\tam to     Recipient of the res...\n  DUP2 \t\t\tency\n  DUP1 \t\t\t  function emergencyRe\n  MLOAD \t\t\t  function emergencyRe\n  SWAP1 \t\t\t  function emergencyRe\n  PUSH 20\t\t\t  function emergencyRe\n  ADD \t\t\t  function emergencyRe\n  KECCAK256 \t\t\t  function emergencyRe\n  PUSH E0\t\t\tto recover\\r\\n    function eme...\n  DUP2 \t\t\tto recover\\r\\n    function eme...\n  DUP2 \t\t\tto recover\\r\\n    function eme...\n  MSTORE \t\t\tto recover\\r\\n    function eme...\n  POP \t\t\tto recover\\r\\n    function eme...\n  POP \t\t\tto recover\\r\\n    function eme...\n  DUP1 \t\t\t addres\n  DUP1 \t\t\t token,\\r\\n        address \n  MLOAD \t\t\t token,\\r\\n        address \n  SWAP1 \t\t\t token,\\r\\n        address \n  PUSH 20\t\t\t token,\\r\\n        address \n  ADD \t\t\t token,\\r\\n        address \n  KECCAK256 \t\t\t token,\\r\\n        address \n  PUSH 100\t\t\t(\\r\\n        IERC20 token,\\r\\n...\n  DUP2 \t\t\t(\\r\\n        IERC20 token,\\r\\n...\n  DUP2 \t\t\t(\\r\\n        IERC20 token,\\r\\n...\n  MSTORE \t\t\t(\\r\\n        IERC20 token,\\r\\n...\n  POP \t\t\t(\\r\\n        IERC20 token,\\r\\n...\n  POP \t\t\t(\\r\\n        IERC20 token,\\r\\n...\n  CHAINID \t\t\t\\n    ) extern\n  PUSH A0\t\t\t  uint256 amount\\r\\n    ) exte...\n  DUP2 \t\t\t  uint256 amount\\r\\n    ) exte...\n  DUP2 \t\t\t  uint256 amount\\r\\n    ) exte...\n  MSTORE \t\t\t  uint256 amount\\r\\n    ) exte...\n  POP \t\t\t  uint256 amount\\r\\n    ) exte...\n  POP \t\t\t  uint256 amount\\r\\n    ) exte...\n  PUSH [tag] 16\t\t\tfer(to, amount);\\r\\n     \n  PUSH [tag] 17\t\t\tfer(to, amount);\\r\\n   \n  PUSH 20\t\t\tfer(to, amount);\\r\\n   \n  SHL \t\t\tfer(to, amount);\\r\\n   \n  PUSH 20\t\t\tfer(to, amount);\\r\\n     \n  SHR \t\t\tfer(to, amount);\\r\\n     \n  JUMP \t\t\tfer(to, amount);\\r\\n     \ntag 16\t\t\tfer(to, amount);\\r\\n     \n  JUMPDEST \t\t\tfer(to, amount);\\r\\n     \n  PUSH 80\t\t\ter {\\r\\n        token.transfer...\n  DUP2 \t\t\ter {\\r\\n        token.transfer...\n  DUP2 \t\t\ter {\\r\\n        token.transfer...\n  MSTORE \t\t\ter {\\r\\n        token.transfer...\n  POP \t\t\ter {\\r\\n        token.transfer...\n  POP \t\t\ter {\\r\\n        token.transfer...\n  ADDRESS \t\t\ttoke\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tkensRecovered(address(token\n  AND \t\t\tkensRecovered(address(token\n  PUSH C0\t\t\tkensRecovered(address(token\n  DUP2 \t\t\tkensRecovered(address(token\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tkensRecovered(address(token\n  AND \t\t\tkensRecovered(address(token\n  DUP2 \t\t\tkensRecovered(address(token\n  MSTORE \t\t\tkensRecovered(address(token\n  POP \t\t\tkensRecovered(address(token\n  POP \t\t\tkensRecovered(address(token\n  POP \t\t\t@notice Rescue any ERC20 token...\n  POP \t\t\t@notice Rescue any ERC20 token...\n  POP \t\t\table(msg.sender)\\r\\n    {\\r\\n ...\n  PUSH 0\t\t\td\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t OwnershipTransferStarted(\n  AND \t\t\t OwnershipTransferStarted(\n  DUP2 \t\t\t OwnershipTr\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t OwnershipTransferStarted(\n  AND \t\t\t OwnershipTransferStarted(\n  SUB \t\t\t OwnershipTransferStarted(\n  PUSH [tag] 20\t\t\tvent OwnershipTransferStarted(...\n  JUMPI \t\t\tvent OwnershipTransferStarted(...\n  PUSH 0\t\t\td\n  PUSH 40\t\t\ted previousOwner,\\r\\n        a...\n  MLOAD \t\t\ted previousOwner,\\r\\n        a...\n  PUSH 1E4FBDF700000000000000000000000000000000000000000000000000000000\t\t\ted previousOwner,\\r\\n        a...\n  DUP2 \t\t\ted previousOwner,\\r\\n        a...\n  MSTORE \t\t\ted previousOwner,\\r\\n        a...\n  PUSH 4\t\t\ted previousOwner,\\r\\n        a...\n  ADD \t\t\ted previousOwner,\\r\\n        a...\n  PUSH [tag] 21\t\t\ted previousOwner,\\r\\n        a...\n  SWAP2 \t\t\ted previousOwner,\\r\\n        a...\n  SWAP1 \t\t\ted previousOwner,\\r\\n        a...\n  PUSH [tag] 22\t\t\ted previousOwner,\\r\\n        a...\n  JUMP \t\t\ted previousOwner,\\r\\n        a...\ntag 21\t\t\ted previousOwner,\\r\\n        a...\n  JUMPDEST \t\t\ted previousOwner,\\r\\n        a...\n  PUSH 40\t\t\ted previousOwner,\\r\\n        a...\n  MLOAD \t\t\ted previousOwner,\\r\\n        a...\n  DUP1 \t\t\ted previousOwner,\\r\\n        a...\n  SWAP2 \t\t\ted previousOwner,\\r\\n        a...\n  SUB \t\t\ted previousOwner,\\r\\n        a...\n  SWAP1 \t\t\ted previousOwner,\\r\\n        a...\n  REVERT \t\t\ted previousOwner,\\r\\n        a...\ntag 20\t\t\tvent OwnershipTransferStarted(...\n  JUMPDEST \t\t\tvent OwnershipTransferStarted(...\n  PUSH [tag] 23\t\t\t\\r\\n    );\\r\\n\\r\\n    /// @dev...\n  DUP2 \t\t\t @dev The ad\n  PUSH [tag] 24\t\t\t\\r\\n    );\\r\\n\\r\\n    //\n  PUSH 20\t\t\t\\r\\n    );\\r\\n\\r\\n    //\n  SHL \t\t\t\\r\\n    );\\r\\n\\r\\n    //\n  PUSH 20\t\t\t\\r\\n    );\\r\\n\\r\\n    /// @dev...\n  SHR \t\t\t\\r\\n    );\\r\\n\\r\\n    /// @dev...\n  JUMP \t\t\t\\r\\n    );\\r\\n\\r\\n    /// @dev...\ntag 23\t\t\t\\r\\n    );\\r\\n\\r\\n    /// @dev...\n  JUMPDEST \t\t\t\\r\\n    );\\r\\n\\r\\n    /// @dev...\n  POP \t\t\t when ownership transfer is in...\n  PUSH 1\t\t\tu\n  PUSH 9\t\t\tnotice \n  DUP2 \t\t\tnotice Initiate owners\n  SWAP1 \t\t\tnotice Initiate owners\n  SSTORE \t\t\tnotice Initiate owners\n  POP \t\t\tnotice Initiate owners\n  PUSH [tag] 27\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  JUMP \t\t\tntract WrappedR5 is\\r\\n    ERC...\ntag 14\t\t\tceeded\");\\r\\n        _mint(to,...\n  JUMPDEST \t\t\tceeded\");\\r\\n        _mint(to,...\n  PUSH 0\t\t\t@notice Bur\n  PUSH 20\t\t\tt\\r\n  DUP4 \t\t\tts a \n  MLOAD \t\t\ts; emits a custom e\n  LT \t\t\ts; emits a custom event\\r\n  ISZERO \t\t\tokens; emits a custom event\\r\\...\n  PUSH [tag] 29\t\t\tokens; emits a custom event\\r\\...\n  JUMPI \t\t\tokens; emits a custom event\\r\\...\n  PUSH [tag] 30\t\t\t256 amount) public o\n  DUP4 \t\t\tblic \n  PUSH [tag] 31\t\t\t256 amount) p\n  PUSH 20\t\t\t256 amount) p\n  SHL \t\t\t256 amount) p\n  PUSH 20\t\t\t256 amount) public o\n  SHR \t\t\t256 amount) public o\n  JUMP \t\t\t256 amount) public o\ntag 30\t\t\t256 amount) public o\n  JUMPDEST \t\t\t256 amount) public o\n  SWAP1 \t\t\trn(uint256 amount) public o\n  POP \t\t\trn(uint256 amount) public o\n  PUSH [tag] 28\t\t\trn(uint256 amount) public o\n  JUMP \t\t\trn(uint256 amount) public o\ntag 29\t\t\tokens; emits a custom event\\r\\...\n  JUMPDEST \t\t\tokens; emits a custom event\\r\\...\n  DUP3 \t\t\tnder(\n  PUSH [tag] 33\t\t\tmount);\\r\\n        emit Tokens...\n  DUP4 \t\t\tnsBur\n  PUSH [tag] 34\t\t\tmount);\\r\\n        emit Tok\n  PUSH 20\t\t\tmount);\\r\\n        emit Tok\n  SHL \t\t\tmount);\\r\\n        emit Tok\n  PUSH 20\t\t\tmount);\\r\\n        emit Tokens...\n  SHR \t\t\tmount);\\r\\n        emit Tokens...\n  JUMP \t\t\tmount);\\r\\n        emit Tokens...\ntag 33\t\t\tmount);\\r\\n        emit Tokens...\n  JUMPDEST \t\t\tmount);\\r\\n        emit Tokens...\n  PUSH 0\t\t\tmount);\\r\\n        emit Tokens...\n  ADD \t\t\tmount);\\r\\n        emit Tokens...\n  SWAP1 \t\t\tmount);\\r\\n        emit Tokens...\n  DUP2 \t\t\tmount);\\r\\n        emit Tokens...\n  PUSH [tag] 35\t\t\tmount);\\r\\n        emit Tokens...\n  SWAP2 \t\t\tmount);\\r\\n        emit Tokens...\n  SWAP1 \t\t\tmount);\\r\\n        emit Tokens...\n  PUSH [tag] 10\t\t\tmount);\\r\\n        emit Tokens...\n  JUMP \t\t\tmount);\\r\\n        emit Tokens...\ntag 35\t\t\tmount);\\r\\n        emit Tokens...\n  JUMPDEST \t\t\tmount);\\r\\n        emit Tokens...\n  POP \t\t\tmount);\\r\\n        emit Tokens...\n  PUSH FF\t\t\t// @dev The address pending ow...\n  PUSH 0\t\t\tBurn from someone\n  SHL \t\t\tBurn from someone\n  SWAP1 \t\t\t   }\\r\\n\\r\\n    /// @notice Bu...\n  POP \t\t\t   }\\r\\n\\r\\n    /// @notice Bu...\ntag 28\t\t\tceeded\");\\r\\n        _mint(to,...\n  JUMPDEST \t\t\tceeded\");\\r\\n        _mint(to,...\n  SWAP3 \t\t\tceeded\");\\r\\n        _mint(to,...\n  SWAP2 \t\t\tceeded\");\\r\\n        _mint(to,...\n  POP \t\t\tceeded\");\\r\\n        _mint(to,...\n  POP \t\t\tceeded\");\\r\\n        _mint(to,...\n  JUMP \t\t\tceeded\");\\r\\n        _mint(to,...\ntag 17\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F\t\t\tnewOwner != address(0), \"Wrapp...\n  PUSH E0\t\t\t\n  MLOAD \t\t\t\n  PUSH 100\t\t\t\n  MLOAD \t\t\t\n  CHAINID \t\t\t\n  ADDRESS \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 37\t\t\t\n  SWAP6 \t\t\t\n  SWAP5 \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 38\t\t\t\n  JUMP \t\t\t\ntag 37\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  DUP4 \t\t\t\n  SUB \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  SWAP1 \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  KECCAK256 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 24\t\t\tto, amount);\\r\\n        emit T...\n  JUMPDEST \t\t\tto, amount);\\r\\n        emit T...\n  PUSH 0\t\t\totice Burn your \n  PUSH 8\t\t\t token\n  PUSH 0\t\t\t token\n  SWAP1 \t\t\t token\n  SLOAD \t\t\t token\n  SWAP1 \t\t\t token\n  PUSH 100\t\t\t token\n  EXP \t\t\t token\n  SWAP1 \t\t\t token\n  DIV \t\t\t token\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t token\n  AND \t\t\t token\n  SWAP1 \t\t\totice Burn your own token\n  POP \t\t\totice Burn your own token\n  DUP2 \t\t\tvent\\r\\n  \n  PUSH 8\t\t\t custo\n  PUSH 0\t\t\t custo\n  PUSH 100\t\t\t custom event\\r\\n  \n  EXP \t\t\t custom event\\r\\n  \n  DUP2 \t\t\t custom event\\r\\n  \n  SLOAD \t\t\t custom event\\r\\n  \n  DUP2 \t\t\t custom event\\r\\n  \n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t custom event\\r\\n  \n  MUL \t\t\t custom event\\r\\n  \n  NOT \t\t\t custom event\\r\\n  \n  AND \t\t\t custom event\\r\\n  \n  SWAP1 \t\t\t custom event\\r\\n  \n  DUP4 \t\t\t custom event\\r\\n  \n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t custom event\\r\\n  \n  AND \t\t\t custom event\\r\\n  \n  MUL \t\t\t custom event\\r\\n  \n  OR \t\t\t custom event\\r\\n  \n  SWAP1 \t\t\t custom event\\r\\n  \n  SSTORE \t\t\t custom event\\r\\n  \n  POP \t\t\t custom event\\r\\n  \n  DUP2 \t\t\te {\\r\\n   \n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t(uint256 amount) public overri...\n  AND \t\t\t(uint256 amount) public overri...\n  DUP2 \t\t\tic overr\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t(uint256 amount) public overri...\n  AND \t\t\t(uint256 amount) public overri...\n  PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t(uint256 amount) public overri...\n  PUSH 40\t\t\t(uint256 amount) public overri...\n  MLOAD \t\t\t(uint256 amount) public overri...\n  PUSH 40\t\t\t(uint256 amount) public overri...\n  MLOAD \t\t\t(uint256 amount) public overri...\n  DUP1 \t\t\t(uint256 amount) public overri...\n  SWAP2 \t\t\t(uint256 amount) public overri...\n  SUB \t\t\t(uint256 amount) public overri...\n  SWAP1 \t\t\t(uint256 amount) public overri...\n  LOG3 \t\t\t(uint256 amount) public overri...\n  POP \t\t\t    /// @notice Burn your own ...\n  POP \t\t\tto, amount);\\r\\n        emit T...\n  JUMP \t\t\tto, amount);\\r\\n        emit T...\ntag 31\t\t\tr\\r\\n    function pendingOwner...\n  JUMPDEST \t\t\tr\\r\\n    function pendingOwner...\n  PUSH 0\t\t\t       retu\n  DUP1 \t\t\twner;\\r\\n    }\\r\\n\\r\\n \n  DUP3 \t\t\toti\n  SWAP1 \t\t\twner;\\r\\n    }\\r\\n\\r\\n    /// ...\n  POP \t\t\twner;\\r\\n    }\\r\\n\\r\\n    /// ...\n  PUSH 1F\t\t\tr \n  DUP2 \t\t\tersh\n  MLOAD \t\t\tership tran\n  GT \t\t\tership transfer \n  ISZERO \t\t\t ownership transfer to a new a...\n  PUSH [tag] 41\t\t\t ownership transfer to a new a...\n  JUMPI \t\t\t ownership transfer to a new a...\n  DUP3 \t\t\tcce\n  PUSH 40\t\t\twner` cannot accep\n  MLOAD \t\t\twner` cannot accep\n  PUSH 305A27A900000000000000000000000000000000000000000000000000000000\t\t\twner` cannot accep\n  DUP2 \t\t\twner` cannot accep\n  MSTORE \t\t\twner` cannot accep\n  PUSH 4\t\t\twner` cannot accep\n  ADD \t\t\twner` cannot accep\n  PUSH [tag] 42\t\t\twner` cannot accep\n  SWAP2 \t\t\twner` cannot accep\n  SWAP1 \t\t\twner` cannot accep\n  PUSH [tag] 43\t\t\twner` cannot accep\n  JUMP \t\t\twner` cannot accep\ntag 42\t\t\twner` cannot accep\n  JUMPDEST \t\t\twner` cannot accep\n  PUSH 40\t\t\twner` cannot accep\n  MLOAD \t\t\twner` cannot accep\n  DUP1 \t\t\twner` cannot accep\n  SWAP2 \t\t\twner` cannot accep\n  SUB \t\t\twner` cannot accep\n  SWAP1 \t\t\twner` cannot accep\n  REVERT \t\t\twner` cannot accep\ntag 41\t\t\t ownership transfer to a new a...\n  JUMPDEST \t\t\t ownership transfer to a new a...\n  DUP1 \t\t\trshi\n  MLOAD \t\t\trship to\\r\\n \n  DUP2 \t\t\tsfer\n  PUSH [tag] 44\t\t\t to transfer \n  SWAP1 \t\t\t to transfer \n  PUSH [tag] 45\t\t\t to transfer \n  JUMP \t\t\t to transfer \ntag 44\t\t\t to transfer \n  JUMPDEST \t\t\t to transfer \n  PUSH 0\t\t\t address to transfer o\n  SHR \t\t\t address to transfer o\n  OR \t\t\t address to transfer ownership...\n  PUSH 0\t\t\twner The address to transfer o...\n  SHL \t\t\twner The address to transfer o...\n  SWAP2 \t\t\ted)\\r\\n    /// @param newOwner...\n  POP \t\t\ted)\\r\\n    /// @param newOwner...\n  POP \t\t\ted)\\r\\n    /// @param newOwner...\n  SWAP2 \t\t\tr\\r\\n    function pendingOwner...\n  SWAP1 \t\t\tr\\r\\n    function pendingOwner...\n  POP \t\t\tr\\r\\n    function pendingOwner...\n  JUMP \t\t\tr\\r\\n    function pendingOwner...\ntag 34\t\t\te by mistake\\r\\n    /// @param...\n  JUMPDEST \t\t\te by mistake\\r\\n    /// @param...\n  PUSH 0\t\t\ts from\\r\\n    /// @par\n  DUP2 \t\t\tunt Amount\n  SWAP1 \t\t\t@param amount Amount\n  POP \t\t\t@param amount Amount\n  SWAP2 \t\t\te by mistake\\r\\n    /// @param...\n  SWAP1 \t\t\te by mistake\\r\\n    /// @param...\n  POP \t\t\te by mistake\\r\\n    /// @param...\n  JUMP \t\t\te by mistake\\r\\n    /// @param...\ntag 47\t\t\t-License-Identifier: MIT\\r\\npr...\n  JUMPDEST \t\t\t-License-Identifier: MIT\\r\\npr...\n  PUSH 0\t\t\t.9;\\r\\n\\r\n  DUP2 \t\t\tacts/\n  MLOAD \t\t\t/contracts/t\n  SWAP1 \t\t\tenzeppelin/contracts/t\n  POP \t\t\tenzeppelin/contracts/t\n  SWAP2 \t\t\t-License-Identifier: MIT\\r\\npr...\n  SWAP1 \t\t\t-License-Identifier: MIT\\r\\npr...\n  POP \t\t\t-License-Identifier: MIT\\r\\npr...\n  JUMP \t\t\t-License-Identifier: MIT\\r\\npr...\ntag 48\t\t\tRC20.sol\";\\r\\nimport \"@openzep...\n  JUMPDEST \t\t\tRC20.sol\";\\r\\nimport \"@openzep...\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\tn/ERC20/ERC20.sol\";\\r\\nimport ...\n  PUSH 0\t\t\to\n  MSTORE \t\t\tracts/token/ERC20/ERC20.sol\";\\...\n  PUSH 41\t\t\timpo\n  PUSH 4\t\t\t;\n  MSTORE \t\t\tle.sol\";\\r\\nimpor\n  PUSH 24\t\t\tntra\n  PUSH 0\t\t\t/\n  REVERT \t\t\teppelin/contrac\ntag 49\t\t\t20/extensions/ERC20Permit.sol\"...\n  JUMPDEST \t\t\t20/extensions/ERC20Permit.sol\"...\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\tppelin/contracts/access/Ownabl...\n  PUSH 0\t\t\tn\n  MSTORE \t\t\tt \"@openzeppelin/contracts/acc...\n  PUSH 22\t\t\tol\";\n  PUSH 4\t\t\td\n  MSTORE \t\t\tncyGuard.sol\";\\r\n  PUSH 24\t\t\ted R\n  PUSH 0\t\t\ta\n  REVERT \t\t\title Wrapped R5\ntag 50\t\t\te ERC20 wrapper for R5 coin wi...\n  JUMPDEST \t\t\te ERC20 wrapper for R5 coin wi...\n  PUSH 0\t\t\t, burn\n  PUSH 2\t\t\t \n  DUP3 \t\t\tntra\n  DIV \t\t\t\\r\\ncontract W\n  SWAP1 \t\t\t612 permit\\r\\ncontract W\n  POP \t\t\t612 permit\\r\\ncontract W\n  PUSH 1\t\t\t \n  DUP3 \t\t\tble,\n  AND \t\t\turnable,\\r\\n  \n  DUP1 \t\t\t Ownable,\\r\\n    Ree\n  PUSH [tag] 85\t\t\trmit,\\r\\n    Ownable,\\r\\n    R...\n  JUMPI \t\t\trmit,\\r\\n    Ownable,\\r\\n    R...\n  PUSH 7F\t\t\tum t\n  DUP3 \t\t\tce Max\n  AND \t\t\tnotice Maximum to\n  SWAP2 \t\t\t\\n    /// @notice Maximum to\n  POP \t\t\t\\n    /// @notice Maximum to\ntag 85\t\t\trmit,\\r\\n    Ownable,\\r\\n    R...\n  JUMPDEST \t\t\trmit,\\r\\n    Ownable,\\r\\n    R...\n  PUSH 20\t\t\tli\n  DUP3 \t\t\tt256 p\n  LT \t\t\tuint256 public\n  DUP2 \t\t\t (18 decimals)\\r\\n  \n  SUB \t\t\tWR5 (18 decimals)\\r\\n    uint2...\n  PUSH [tag] 86\t\t\t00 WR5 (18 decimals)\\r\\n    ui...\n  JUMPI \t\t\t00 WR5 (18 decimals)\\r\\n    ui...\n  PUSH [tag] 87\t\t\t66_337_700 * 10 **\n  PUSH [tag] 49\t\t\t66_337_700 * 10 **\n  JUMP \t\t\t66_337_700 * 10 **\ntag 87\t\t\t66_337_700 * 10 **\n  JUMPDEST \t\t\t66_337_700 * 10 **\ntag 86\t\t\t00 WR5 (18 decimals)\\r\\n    ui...\n  JUMPDEST \t\t\t00 WR5 (18 decimals)\\r\\n    ui...\n  POP \t\t\t and EIP‑2612 permit\\r\\ncontra...\n  SWAP2 \t\t\te ERC20 wrapper for R5 coin wi...\n  SWAP1 \t\t\te ERC20 wrapper for R5 coin wi...\n  POP \t\t\te ERC20 wrapper for R5 coin wi...\n  JUMP \t\t\te ERC20 wrapper for R5 coin wi...\ntag 51\t\t\tmitted when new tokens are min...\n  JUMPDEST \t\t\tmitted when new tokens are min...\n  PUSH 0\t\t\tnsMi\n  DUP2 \t\t\td t\n  SWAP1 \t\t\ts indexed t\n  POP \t\t\ts indexed t\n  DUP2 \t\t\t\\n\\r\\n\n  PUSH 0\t\t\t)\n  MSTORE \t\t\t amount);\\r\\n\\r\\n \n  PUSH 20\t\t\ts ar\n  PUSH 0\t\t\tk\n  KECCAK256 \t\t\ted when tokens are\n  SWAP1 \t\t\tev Emitted when tokens are\n  POP \t\t\tev Emitted when tokens are\n  SWAP2 \t\t\tmitted when new tokens are min...\n  SWAP1 \t\t\tmitted when new tokens are min...\n  POP \t\t\tmitted when new tokens are min...\n  JUMP \t\t\tmitted when new tokens are min...\ntag 52\t\t\tevent TokensBurned(address ind...\n  JUMPDEST \t\t\tevent TokensBurned(address ind...\n  PUSH 0\t\t\tom, ui\n  PUSH 20\t\t\ten\n  PUSH 1F\t\t\ted\n  DUP4 \t\t\tv Emi\n  ADD \t\t\t @dev Emitted \n  DIV \t\t\t /// @dev Emitted when \n  SWAP1 \t\t\tt);\\r\\n\\r\\n    /// @dev Emitte...\n  POP \t\t\tt);\\r\\n\\r\\n    /// @dev Emitte...\n  SWAP2 \t\t\tevent TokensBurned(address ind...\n  SWAP1 \t\t\tevent TokensBurned(address ind...\n  POP \t\t\tevent TokensBurned(address ind...\n  JUMP \t\t\tevent TokensBurned(address ind...\ntag 53\t\t\tescued from the contract\\r\\n  ...\n  JUMPDEST \t\t\tescued from the contract\\r\\n  ...\n  PUSH 0\t\t\tcovered(\n  DUP3 \t\t\taddre\n  DUP3 \t\t\t    \n  SHL \t\t\t\\r\\n        addres\n  SWAP1 \t\t\tddress indexed token,\\r\\n     ...\n  POP \t\t\tddress indexed token,\\r\\n     ...\n  SWAP3 \t\t\tescued from the contract\\r\\n  ...\n  SWAP2 \t\t\tescued from the contract\\r\\n  ...\n  POP \t\t\tescued from the contract\\r\\n  ...\n  POP \t\t\tescued from the contract\\r\\n  ...\n  JUMP \t\t\tescued from the contract\\r\\n  ...\ntag 54\t\t\t\\r\\n        uint256 amount\\r\\n...\n  JUMPDEST \t\t\t\\r\\n        uint256 amount\\r\\n...\n  PUSH 0\t\t\tip tra\n  PUSH 8\t\t\tf\n  DUP4 \t\t\tnershipTra\n  MUL \t\t\tt OwnershipTransfe\n  PUSH [tag] 92\t\t\tdress indexed previousOwner,\\r...\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t        address indexed newOwn...\n  DUP3 \t\t\tousOwner,\n  PUSH [tag] 53\t\t\tdress indexed previousOwner,\\r...\n  JUMP \t\t\tdress indexed previousOwner,\\r...\ntag 92\t\t\tdress indexed previousOwner,\\r...\n  JUMPDEST \t\t\tdress indexed previousOwner,\\r...\n  PUSH [tag] 93\t\t\transfer\\r\\n    address private...\n  DUP7 \t\t\tpendingO\n  DUP4 \t\t\ts private\n  PUSH [tag] 53\t\t\transfer\\r\\n    address private...\n  JUMP \t\t\transfer\\r\\n    address private...\ntag 93\t\t\transfer\\r\\n    address private...\n  JUMPDEST \t\t\transfer\\r\\n    address private...\n  SWAP6 \t\t\t ownership transfer\\r\\n    add...\n  POP \t\t\t ownership transfer\\r\\n    add...\n  DUP1 \t\t\t  ER\n  NOT \t\t\t      ERC\n  DUP5 \t\t\tr()\\r\\n\n  AND \t\t\tuctor()\\r\\n        ERC2\n  SWAP4 \t\t\t   constructor()\\r\\n        ER...\n  POP \t\t\t   constructor()\\r\\n        ER...\n  DUP1 \t\t\t(\"Wr\n  DUP7 \t\t\tRC20Perm\n  AND \t\t\t   ERC20Permit(\"Wra\n  DUP5 \t\t\t\\r\\n   \n  OR \t\t\t5\")\\r\\n        ERC20Permit(\"Wr...\n  SWAP3 \t\t\td R5\", \"WR5\")\\r\\n        ERC20...\n  POP \t\t\td R5\", \"WR5\")\\r\\n        ERC20...\n  POP \t\t\tsfer is initiated\\r\\n    event...\n  POP \t\t\tsfer is initiated\\r\\n    event...\n  SWAP4 \t\t\t\\r\\n        uint256 amount\\r\\n...\n  SWAP3 \t\t\t\\r\\n        uint256 amount\\r\\n...\n  POP \t\t\t\\r\\n        uint256 amount\\r\\n...\n  POP \t\t\t\\r\\n        uint256 amount\\r\\n...\n  POP \t\t\t\\r\\n        uint256 amount\\r\\n...\n  JUMP \t\t\t\\r\\n        uint256 amount\\r\\n...\ntag 55\t\t\t      Ownable(msg.sender)\\r\\n ...\n  JUMPDEST \t\t\t      Ownable(msg.sender)\\r\\n ...\n  PUSH 0\t\t\t     //\n  DUP2 \t\t\tdeplo\n  SWAP1 \t\t\tialized to deplo\n  POP \t\t\tialized to deplo\n  SWAP2 \t\t\t      Ownable(msg.sender)\\r\\n ...\n  SWAP1 \t\t\t      Ownable(msg.sender)\\r\\n ...\n  POP \t\t\t      Ownable(msg.sender)\\r\\n ...\n  JUMP \t\t\t      Ownable(msg.sender)\\r\\n ...\ntag 56\t\t\t\\r\\n    /// @notice View the a...\n  JUMPDEST \t\t\t\\r\\n    /// @notice View the a...\n  PUSH 0\t\t\tddr\n  DUP2 \t\t\tome o\n  SWAP1 \t\t\t to become o\n  POP \t\t\t to become o\n  SWAP2 \t\t\t\\r\\n    /// @notice View the a...\n  SWAP1 \t\t\t\\r\\n    /// @notice View the a...\n  POP \t\t\t\\r\\n    /// @notice View the a...\n  JUMP \t\t\t\\r\\n    /// @notice View the a...\ntag 57\t\t\tnction pendingOwner() public v...\n  JUMPDEST \t\t\tnction pendingOwner() public v...\n  PUSH 0\t\t\t) {\\r\\n    \n  PUSH [tag] 97\t\t\t;\\r\\n    }\\r\\n\\r\\n    /// @not...\n  PUSH [tag] 98\t\t\t/ @notice Initiate ownership t...\n  PUSH [tag] 99\t\t\t Initiate ownership tran\n  DUP5 \t\t\tp tra\n  PUSH [tag] 55\t\t\t Initiate ownership tran\n  JUMP \t\t\t Initiate ownership tran\ntag 99\t\t\t Initiate ownership tran\n  JUMPDEST \t\t\t Initiate ownership tran\n  PUSH [tag] 56\t\t\t/ @notice Initiate ownership t...\n  JUMP \t\t\t/ @notice Initiate ownership t...\ntag 98\t\t\t/ @notice Initiate ownership t...\n  JUMPDEST \t\t\t/ @notice Initiate ownership t...\n  PUSH [tag] 55\t\t\t;\\r\\n    }\\r\\n\\r\\n    /// @not...\n  JUMP \t\t\t;\\r\\n    }\\r\\n\\r\\n    /// @not...\ntag 97\t\t\t;\\r\\n    }\\r\\n\\r\\n    /// @not...\n  JUMPDEST \t\t\t;\\r\\n    }\\r\\n\\r\\n    /// @not...\n  SWAP1 \t\t\t_pendingOwner;\\r\\n    }\\r\\n\\r\\...\n  POP \t\t\t_pendingOwner;\\r\\n    }\\r\\n\\r\\...\n  SWAP2 \t\t\tnction pendingOwner() public v...\n  SWAP1 \t\t\tnction pendingOwner() public v...\n  POP \t\t\tnction pendingOwner() public v...\n  JUMP \t\t\tnction pendingOwner() public v...\ntag 58\t\t\taccount (`newOwner` cannot acc...\n  JUMPDEST \t\t\taccount (`newOwner` cannot acc...\n  PUSH 0\t\t\ts i\n  DUP2 \t\t\t @par\n  SWAP1 \t\t\t    /// @par\n  POP \t\t\t    /// @par\n  SWAP2 \t\t\taccount (`newOwner` cannot acc...\n  SWAP1 \t\t\taccount (`newOwner` cannot acc...\n  POP \t\t\taccount (`newOwner` cannot acc...\n  JUMP \t\t\taccount (`newOwner` cannot acc...\ntag 59\t\t\tThe address to transfer owners...\n  JUMPDEST \t\t\tThe address to transfer owners...\n  PUSH [tag] 102\t\t\tner {\\r\\n        require(newOw...\n  DUP4 \t\t\t != add\n  PUSH [tag] 57\t\t\tner {\\r\\n        require(newOw...\n  JUMP \t\t\tner {\\r\\n        require(newOw...\ntag 102\t\t\tner {\\r\\n        require(newOw...\n  JUMPDEST \t\t\tner {\\r\\n        require(newOw...\n  PUSH [tag] 103\t\t\tw owner is zero address\");\\r\\n...\n  PUSH [tag] 104\t\t\t = newOwner;\\r\\n        emit O...\n  DUP3 \t\t\tit OwnershipTran\n  PUSH [tag] 58\t\t\t = newOwner;\\r\\n        emit O...\n  JUMP \t\t\t = newOwner;\\r\\n        emit O...\ntag 104\t\t\t = newOwner;\\r\\n        emit O...\n  JUMPDEST \t\t\t = newOwner;\\r\\n        emit O...\n  DUP5 \t\t\tingOwn\n  DUP5 \t\t\t  _p\n  SLOAD \t\t\t        _pe\n  PUSH [tag] 54\t\t\tw owner is zero address\");\\r\\n...\n  JUMP \t\t\tw owner is zero address\");\\r\\n...\ntag 103\t\t\tw owner is zero address\");\\r\\n...\n  JUMPDEST \t\t\tw owner is zero address\");\\r\\n...\n  DUP3 \t\t\tR5: \n  SSTORE \t\t\tWrappedR5: new owner is zero a...\n  POP \t\t\t(address newOwner) external on...\n  POP \t\t\tThe address to transfer owners...\n  POP \t\t\tThe address to transfer owners...\n  POP \t\t\tThe address to transfer owners...\n  JUMP \t\t\tThe address to transfer owners...\ntag 60\t\t\ter(), newOwner);\\r\\n    }\\r\\n\\...\n  JUMPDEST \t\t\ter(), newOwner);\\r\\n    }\\r\\n\\...\n  PUSH 0\t\t\tcep\n  SWAP1 \t\t\ter(), newOwner);\\r\\n    }\\r\\n\\...\n  JUMP \t\t\ter(), newOwner);\\r\\n    }\\r\\n\\...\ntag 61\t\t\talled by pending owner)\\r\\n   ...\n  JUMPDEST \t\t\talled by pending owner)\\r\\n   ...\n  PUSH [tag] 107\t\t\tddress sender = _msgSender();\\...\n  PUSH [tag] 60\t\t\tddress sender = _msgSender();\\...\n  JUMP \t\t\tddress sender = _msgSender();\\...\ntag 107\t\t\tddress sender = _msgSender();\\...\n  JUMPDEST \t\t\tddress sender = _msgSender();\\...\n  PUSH [tag] 108\t\t\tquire(sender == _pendingOwner,...\n  DUP2 \t\t\the pen\n  DUP5 \t\t\tis not\n  DUP5 \t\t\talle\n  PUSH [tag] 59\t\t\tquire(sender == _pendingOwner,...\n  JUMP \t\t\tquire(sender == _pendingOwner,...\ntag 108\t\t\tquire(sender == _pendingOwner,...\n  JUMPDEST \t\t\tquire(sender == _pendingOwner,...\n  POP \t\t\t() external {\\r\\n        addre...\n  POP \t\t\talled by pending owner)\\r\\n   ...\n  POP \t\t\talled by pending owner)\\r\\n   ...\n  JUMP \t\t\talled by pending owner)\\r\\n   ...\ntag 62\t\t\t\\r\\n        _pendingOwner = ad...\n  JUMPDEST \t\t\t\\r\\n        _pendingOwner = ad...\ntag 110\t\t\trship(sender);\\r\\n    }\\r\\n\\r\\...\n  JUMPDEST \t\t\trship(sender);\\r\\n    }\\r\\n\\r\\...\n  DUP2 \t\t\t   \n  DUP2 \t\t\ter);\\r\n  LT \t\t\tender);\\r\\n    }\n  ISZERO \t\t\trship(sender);\\r\\n    }\\r\\n\\r\\...\n  PUSH [tag] 112\t\t\trship(sender);\\r\\n    }\\r\\n\\r\\...\n  JUMPI \t\t\trship(sender);\\r\\n    }\\r\\n\\r\\...\n  PUSH [tag] 113\t\t\twner can call\\r\\n    /// @para...\n  PUSH 0\t\t\tc\n  DUP3 \t\t\tto   \n  PUSH [tag] 61\t\t\twner can call\\r\\n    /// @para...\n  JUMP \t\t\twner can call\\r\\n    /// @para...\ntag 113\t\t\twner can call\\r\\n    /// @para...\n  JUMPDEST \t\t\twner can call\\r\\n    /// @para...\n  PUSH 1\t\t\tt\n  DUP2 \t\t\tice M\n  ADD \t\t\t@notice Mint \n  SWAP1 \t\t\t\\n    /// @notice Mint \n  POP \t\t\t\\n    /// @notice Mint \n  PUSH [tag] 110\t\t\trship(sender);\\r\\n    }\\r\\n\\r\\...\n  JUMP \t\t\trship(sender);\\r\\n    }\\r\\n\\r\\...\ntag 112\t\t\trship(sender);\\r\\n    }\\r\\n\\r\\...\n  JUMPDEST \t\t\trship(sender);\\r\\n    }\\r\\n\\r\\...\n  POP \t\t\t\\r\\n        _pendingOwner = ad...\n  POP \t\t\t\\r\\n        _pendingOwner = ad...\n  JUMP \t\t\t\\r\\n        _pendingOwner = ad...\ntag 63\t\t\tkens\\r\\n    /// @param amount ...\n  JUMPDEST \t\t\tkens\\r\\n    /// @param amount ...\n  PUSH 1F\t\t\txt\n  DUP3 \t\t\tnt)\n  GT \t\t\tmount) exte\n  ISZERO \t\t\t6 amount) external onlyOwner n...\n  PUSH [tag] 115\t\t\t6 amount) external onlyOwner n...\n  JUMPI \t\t\t6 amount) external onlyOwner n...\n  PUSH [tag] 116\t\t\t        require(totalSupply() ...\n  DUP2 \t\t\tamoun\n  PUSH [tag] 51\t\t\t        require(totalSupply() ...\n  JUMP \t\t\t        require(totalSupply() ...\ntag 116\t\t\t        require(totalSupply() ...\n  JUMPDEST \t\t\t        require(totalSupply() ...\n  PUSH [tag] 117\t\t\t_mint(to, amount);\\r\\n        ...\n  DUP5 \t\t\t\\r\\n        \n  PUSH [tag] 52\t\t\t_mint(to, amount);\\r\\n        ...\n  JUMP \t\t\t_mint(to, amount);\\r\\n        ...\ntag 117\t\t\t_mint(to, amount);\\r\\n        ...\n  JUMPDEST \t\t\t_mint(to, amount);\\r\\n        ...\n  DUP2 \t\t\t\\r\\n      \n  ADD \t\t\td\");\\r\\n        _mint(to, amou...\n  PUSH 20\t\t\t  \n  DUP6 \t\t\tverride {\\r\n  LT \t\t\tc override {\\r\\n    \n  ISZERO \t\t\tblic override {\\r\\n        sup...\n  PUSH [tag] 118\t\t\tblic override {\\r\\n        sup...\n  JUMPI \t\t\tblic override {\\r\\n        sup...\n  DUP2 \t\t\tunt);\\r\\n \n  SWAP1 \t\t\t super.burn(amount);\\r\\n \n  POP \t\t\t super.burn(amount);\\r\\n \ntag 118\t\t\tblic override {\\r\\n        sup...\n  JUMPDEST \t\t\tblic override {\\r\\n        sup...\n  PUSH [tag] 119\t\t\tensBurned(_msgSender(), amount...\n  PUSH [tag] 120\t\t\tce Burn from someone e\n  DUP6 \t\t\tne \n  PUSH [tag] 52\t\t\tce Burn from someone e\n  JUMP \t\t\tce Burn from someone e\ntag 120\t\t\tce Burn from someone e\n  JUMPDEST \t\t\tce Burn from someone e\n  DUP4 \t\t\t /// @no\n  ADD \t\t\t\\n    /// @notice Burn from so...\n  DUP3 \t\t\tt);\\r\\n    }\\r\n  PUSH [tag] 62\t\t\tensBurned(_msgSender(), amount...\n  JUMP \t\t\tensBurned(_msgSender(), amount...\ntag 119\t\t\tensBurned(_msgSender(), amount...\n  JUMPDEST \t\t\tensBurned(_msgSender(), amount...\n  POP \t\t\tnal onlyOwner nonReentrant {\\r...\n  POP \t\t\tnal onlyOwner nonReentrant {\\r...\ntag 115\t\t\t6 amount) external onlyOwner n...\n  JUMPDEST \t\t\t6 amount) external onlyOwner n...\n  POP \t\t\tkens\\r\\n    /// @param amount ...\n  POP \t\t\tkens\\r\\n    /// @param amount ...\n  POP \t\t\tkens\\r\\n    /// @param amount ...\n  JUMP \t\t\tkens\\r\\n    /// @param amount ...\ntag 64\t\t\tcustom event\\r\\n    function b...\n  JUMPDEST \t\t\tcustom event\\r\\n    function b...\n  PUSH 0\t\t\tint256 a\n  DUP3 \t\t\trnFro\n  DUP3 \t\t\tper.\n  SHR \t\t\t  super.burnFrom\n  SWAP1 \t\t\tic override {\\r\\n        super...\n  POP \t\t\tic override {\\r\\n        super...\n  SWAP3 \t\t\tcustom event\\r\\n    function b...\n  SWAP2 \t\t\tcustom event\\r\\n    function b...\n  POP \t\t\tcustom event\\r\\n    function b...\n  POP \t\t\tcustom event\\r\\n    function b...\n  JUMP \t\t\tcustom event\\r\\n    function b...\ntag 65\t\t\tunt);\\r\\n        emit TokensBu...\n  JUMPDEST \t\t\tunt);\\r\\n        emit TokensBu...\n  PUSH 0\t\t\tount);\n  PUSH [tag] 123\t\t\tRescue any ERC20 tokens sent h...\n  PUSH 0\t\t\t \n  NOT \t\t\t\\r\\n    \n  DUP5 \t\t\t mist\n  PUSH 8\t\t\t \n  MUL \t\t\there by mista\n  PUSH [tag] 64\t\t\tRescue any ERC20 tokens sent h...\n  JUMP \t\t\tRescue any ERC20 tokens sent h...\ntag 123\t\t\tRescue any ERC20 tokens sent h...\n  JUMPDEST \t\t\tRescue any ERC20 tokens sent h...\n  NOT \t\t\tice Rescue any ERC20 tokens se...\n  DUP1 \t\t\ttrac\n  DUP4 \t\t\t20 c\n  AND \t\t\t ERC20 contract\n  SWAP2 \t\t\ttoken  The ERC20 contract\n  POP \t\t\ttoken  The ERC20 contract\n  POP \t\t\t\\n    }\\r\\n\\r\\n    /// @notice...\n  SWAP3 \t\t\tunt);\\r\\n        emit TokensBu...\n  SWAP2 \t\t\tunt);\\r\\n        emit TokensBu...\n  POP \t\t\tunt);\\r\\n        emit TokensBu...\n  POP \t\t\tunt);\\r\\n        emit TokensBu...\n  JUMP \t\t\tunt);\\r\\n        emit TokensBu...\ntag 66\t\t\tkens from\\r\\n    /// @param to...\n  JUMPDEST \t\t\tkens from\\r\\n    /// @param to...\n  PUSH 0\t\t\taram\n  PUSH [tag] 125\t\t\trnal onlyOwner {\\r\\n        to...\n  DUP4 \t\t\t to\n  DUP4 \t\t\t    \n  PUSH [tag] 65\t\t\trnal onlyOwner {\\r\\n        to...\n  JUMP \t\t\trnal onlyOwner {\\r\\n        to...\ntag 125\t\t\trnal onlyOwner {\\r\\n        to...\n  JUMPDEST \t\t\trnal onlyOwner {\\r\\n        to...\n  SWAP2 \t\t\t  ) external onlyOwner {\\r\\n  ...\n  POP \t\t\t  ) external onlyOwner {\\r\\n  ...\n  DUP3 \t\t\t em\n  PUSH 2\t\t\t \n  MUL \t\t\t        emi\n  DUP3 \t\t\tnt);\n  OR \t\t\tmount);\\r\\n        emit\n  SWAP1 \t\t\ter(to, amount);\\r\\n        emi...\n  POP \t\t\ter(to, amount);\\r\\n        emi...\n  SWAP3 \t\t\tkens from\\r\\n    /// @param to...\n  SWAP2 \t\t\tkens from\\r\\n    /// @param to...\n  POP \t\t\tkens from\\r\\n    /// @param to...\n  POP \t\t\tkens from\\r\\n    /// @param to...\n  JUMP \t\t\tkens from\\r\\n    /// @param to...\ntag 10\t\t\tvered(address(token), to, amou...\n  JUMPDEST \t\t\tvered(address(token), to, amou...\n  PUSH [tag] 127\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 47\t\t\t\n  JUMP \t\t\t\ntag 127\t\t\t\n  JUMPDEST \t\t\t\n  PUSH FFFFFFFFFFFFFFFF\t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 128\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 129\t\t\t\n  PUSH [tag] 48\t\t\t\n  JUMP \t\t\t\ntag 129\t\t\t\n  JUMPDEST \t\t\t\ntag 128\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 130\t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 50\t\t\t\n  JUMP \t\t\t\ntag 130\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 131\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 63\t\t\t\n  JUMP \t\t\t\ntag 131\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  GT \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 133\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP5 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 134\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  DUP8 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 134\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 135\t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 66\t\t\t\n  JUMP \t\t\t\ntag 135\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 132\t\t\t\n  JUMP \t\t\t\ntag 133\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 136\t\t\t\n  DUP7 \t\t\t\n  PUSH [tag] 51\t\t\t\n  JUMP \t\t\t\ntag 136\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\ntag 137\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 139\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  PUSH 1\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  SWAP5 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 137\t\t\t\n  JUMP \t\t\t\ntag 139\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  DUP4 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 140\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 141\t\t\t\n  PUSH 1F\t\t\t\n  DUP10 \t\t\t\n  AND \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 65\t\t\t\n  JUMP \t\t\t\ntag 141\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\ntag 140\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 2\t\t\t\n  DUP9 \t\t\t\n  MUL \t\t\t\n  ADD \t\t\t\n  DUP9 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 132\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\tvered(address(token), to, amou...\n  POP \t\t\tvered(address(token), to, amou...\n  JUMP \t\t\tvered(address(token), to, amou...\ntag 67\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 68\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 144\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 67\t\t\t\n  JUMP \t\t\t\ntag 144\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 69\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 146\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 68\t\t\t\n  JUMP \t\t\t\ntag 146\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 22\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 148\t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 69\t\t\t\n  JUMP \t\t\t\ntag 148\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 70\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 71\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 151\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 70\t\t\t\n  JUMP \t\t\t\ntag 151\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 72\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 153\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 55\t\t\t\n  JUMP \t\t\t\ntag 153\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 38\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH A0\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 155\t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP9 \t\t\t\n  PUSH [tag] 71\t\t\t\n  JUMP \t\t\t\ntag 155\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 156\t\t\t\n  PUSH 20\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP8 \t\t\t\n  PUSH [tag] 71\t\t\t\n  JUMP \t\t\t\ntag 156\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 157\t\t\t\n  PUSH 40\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP7 \t\t\t\n  PUSH [tag] 71\t\t\t\n  JUMP \t\t\t\ntag 157\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 158\t\t\t\n  PUSH 60\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 72\t\t\t\n  JUMP \t\t\t\ntag 158\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 159\t\t\t\n  PUSH 80\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 69\t\t\t\n  JUMP \t\t\t\ntag 159\t\t\t\n  JUMPDEST \t\t\t\n  SWAP7 \t\t\t\n  SWAP6 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 73\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 74\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  DUP4 \t\t\t\n  MCOPY \t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 75\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  AND \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 76\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 164\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 47\t\t\t\n  JUMP \t\t\t\ntag 164\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 165\t\t\t\n  DUP2 \t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 73\t\t\t\n  JUMP \t\t\t\ntag 165\t\t\t\n  JUMPDEST \t\t\t\n  SWAP4 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 166\t\t\t\n  DUP2 \t\t\t\n  DUP6 \t\t\t\n  PUSH 20\t\t\t\n  DUP7 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 74\t\t\t\n  JUMP \t\t\t\ntag 166\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 167\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 75\t\t\t\n  JUMP \t\t\t\ntag 167\t\t\t\n  JUMPDEST \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 43\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  SUB \t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH [tag] 169\t\t\t\n  DUP2 \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 76\t\t\t\n  JUMP \t\t\t\ntag 169\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 77\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 78\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 79\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 173\t\t\t\n  DUP3 \t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 70\t\t\t\n  JUMP \t\t\t\ntag 173\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 45\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 175\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 77\t\t\t\n  JUMP \t\t\t\ntag 175\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 176\t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 78\t\t\t\n  JUMP \t\t\t\ntag 176\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 177\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 79\t\t\t\n  JUMP \t\t\t\ntag 177\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 178\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 179\t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  DUP4 \t\t\t\n  PUSH 20\t\t\t\n  SUB \t\t\t\n  PUSH 8\t\t\t\n  MUL \t\t\t\n  PUSH [tag] 53\t\t\t\n  JUMP \t\t\t\ntag 179\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\ntag 178\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 27\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  JUMPDEST \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 80\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  MLOAD \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH A0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  MLOAD \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH C0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  MLOAD \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH E0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  MLOAD \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 100\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  MLOAD \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 120\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  MLOAD \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 140\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  MLOAD \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  CODECOPY \t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  ASSIGNIMMUTABLE 2306\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  ASSIGNIMMUTABLE 2303\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  ASSIGNIMMUTABLE 2300\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  ASSIGNIMMUTABLE 2298\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  ASSIGNIMMUTABLE 2296\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  ASSIGNIMMUTABLE 2294\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  ASSIGNIMMUTABLE 2292\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n  RETURN \t\t\tntract WrappedR5 is\\r\\n    ERC...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 40\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      MSTORE \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      CALLVALUE \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      ISZERO \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 1\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      REVERT \t\t\tntract WrappedR5 is\\r\\n    ERC...\n    tag 1\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPDEST \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      POP \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 4\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      CALLDATASIZE \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      LT \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 2\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      CALLDATALOAD \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH E0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      SHR \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 7ECEBE00\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      GT \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 27\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH D505ACCF\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      GT \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 28\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH D505ACCF\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 21\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH DD62ED3E\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 22\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH E30C3978\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 23\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH EB8F4C4A\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 24\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH EC81B483\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 25\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH F2FDE38B\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 26\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 2\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMP \t\t\tntract WrappedR5 is\\r\\n    ERC...\n    tag 28\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPDEST \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 7ECEBE00\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 15\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 84B0196E\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 16\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 8DA5CB5B\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 17\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 95D89B41\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 18\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH A9059CBB\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 19\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH C0B6F561\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 20\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 2\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMP \t\t\tntract WrappedR5 is\\r\\n    ERC...\n    tag 27\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPDEST \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 40C10F19\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      GT \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 29\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 40C10F19\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 9\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 42966C68\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 10\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 70A08231\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 11\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 715018A6\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 12\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 79BA5097\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 13\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 79CC6790\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 14\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 2\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMP \t\t\tntract WrappedR5 is\\r\\n    ERC...\n    tag 29\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPDEST \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 6FDDE03\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 3\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 95EA7B3\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 4\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 18160DDD\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 5\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 23B872DD\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 6\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 313CE567\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 7\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 3644E515\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      EQ \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH [tag] 8\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPI \t\t\tntract WrappedR5 is\\r\\n    ERC...\n    tag 2\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      JUMPDEST \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      PUSH 0\t\t\tntract WrappedR5 is\\r\\n    ERC...\n      DUP1 \t\t\tntract WrappedR5 is\\r\\n    ERC...\n      REVERT \t\t\tntract WrappedR5 is\\r\\n    ERC...\n    tag 3\t\t\taddress) {\\r\\n        return _...\n      JUMPDEST \t\t\taddress) {\\r\\n        return _...\n      PUSH [tag] 30\t\t\taddress) {\\r\\n        return _...\n      PUSH [tag] 31\t\t\taddress) {\\r\\n        return _...\n      JUMP \t\t\taddress) {\\r\\n        return _...\n    tag 30\t\t\taddress) {\\r\\n        return _...\n      JUMPDEST \t\t\taddress) {\\r\\n        return _...\n      PUSH 40\t\t\taddress) {\\r\\n        return _...\n      MLOAD \t\t\taddress) {\\r\\n        return _...\n      PUSH [tag] 32\t\t\taddress) {\\r\\n        return _...\n      SWAP2 \t\t\taddress) {\\r\\n        return _...\n      SWAP1 \t\t\taddress) {\\r\\n        return _...\n      PUSH [tag] 33\t\t\taddress) {\\r\\n        return _...\n      JUMP \t\t\taddress) {\\r\\n        return _...\n    tag 32\t\t\taddress) {\\r\\n        return _...\n      JUMPDEST \t\t\taddress) {\\r\\n        return _...\n      PUSH 40\t\t\taddress) {\\r\\n        return _...\n      MLOAD \t\t\taddress) {\\r\\n        return _...\n      DUP1 \t\t\taddress) {\\r\\n        return _...\n      SWAP2 \t\t\taddress) {\\r\\n        return _...\n      SUB \t\t\taddress) {\\r\\n        return _...\n      SWAP1 \t\t\taddress) {\\r\\n        return _...\n      RETURN \t\t\taddress) {\\r\\n        return _...\n    tag 4\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 34\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 35\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 36\t\t\t\n      JUMP \t\t\t\n    tag 35\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 37\t\t\t\n      JUMP \t\t\t\n    tag 34\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 38\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 39\t\t\t\n      JUMP \t\t\t\n    tag 38\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 5\t\t\trequire(totalSupply() + amount...\n      JUMPDEST \t\t\trequire(totalSupply() + amount...\n      PUSH [tag] 40\t\t\trequire(totalSupply() + amount...\n      PUSH [tag] 41\t\t\trequire(totalSupply() + amount...\n      JUMP \t\t\trequire(totalSupply() + amount...\n    tag 40\t\t\trequire(totalSupply() + amount...\n      JUMPDEST \t\t\trequire(totalSupply() + amount...\n      PUSH 40\t\t\trequire(totalSupply() + amount...\n      MLOAD \t\t\trequire(totalSupply() + amount...\n      PUSH [tag] 42\t\t\trequire(totalSupply() + amount...\n      SWAP2 \t\t\trequire(totalSupply() + amount...\n      SWAP1 \t\t\trequire(totalSupply() + amount...\n      PUSH [tag] 43\t\t\trequire(totalSupply() + amount...\n      JUMP \t\t\trequire(totalSupply() + amount...\n    tag 42\t\t\trequire(totalSupply() + amount...\n      JUMPDEST \t\t\trequire(totalSupply() + amount...\n      PUSH 40\t\t\trequire(totalSupply() + amount...\n      MLOAD \t\t\trequire(totalSupply() + amount...\n      DUP1 \t\t\trequire(totalSupply() + amount...\n      SWAP2 \t\t\trequire(totalSupply() + amount...\n      SUB \t\t\trequire(totalSupply() + amount...\n      SWAP1 \t\t\trequire(totalSupply() + amount...\n      RETURN \t\t\trequire(totalSupply() + amount...\n    tag 6\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 44\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 45\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 46\t\t\t\n      JUMP \t\t\t\n    tag 45\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 44\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 48\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 39\t\t\t\n      JUMP \t\t\t\n    tag 48\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 7\t\t\tens\\r\\n    /// @param amount  ...\n      JUMPDEST \t\t\tens\\r\\n    /// @param amount  ...\n      PUSH [tag] 49\t\t\tens\\r\\n    /// @param amount  ...\n      PUSH [tag] 50\t\t\tens\\r\\n    /// @param amount  ...\n      JUMP \t\t\tens\\r\\n    /// @param amount  ...\n    tag 49\t\t\tens\\r\\n    /// @param amount  ...\n      JUMPDEST \t\t\tens\\r\\n    /// @param amount  ...\n      PUSH 40\t\t\tens\\r\\n    /// @param amount  ...\n      MLOAD \t\t\tens\\r\\n    /// @param amount  ...\n      PUSH [tag] 51\t\t\tens\\r\\n    /// @param amount  ...\n      SWAP2 \t\t\tens\\r\\n    /// @param amount  ...\n      SWAP1 \t\t\tens\\r\\n    /// @param amount  ...\n      PUSH [tag] 52\t\t\tens\\r\\n    /// @param amount  ...\n      JUMP \t\t\tens\\r\\n    /// @param amount  ...\n    tag 51\t\t\tens\\r\\n    /// @param amount  ...\n      JUMPDEST \t\t\tens\\r\\n    /// @param amount  ...\n      PUSH 40\t\t\tens\\r\\n    /// @param amount  ...\n      MLOAD \t\t\tens\\r\\n    /// @param amount  ...\n      DUP1 \t\t\tens\\r\\n    /// @param amount  ...\n      SWAP2 \t\t\tens\\r\\n    /// @param amount  ...\n      SUB \t\t\tens\\r\\n    /// @param amount  ...\n      SWAP1 \t\t\tens\\r\\n    /// @param amount  ...\n      RETURN \t\t\tens\\r\\n    /// @param amount  ...\n    tag 8\t\t\t  Recipient of the minted toke...\n      JUMPDEST \t\t\t  Recipient of the minted toke...\n      PUSH [tag] 53\t\t\t  Recipient of the minted toke...\n      PUSH [tag] 54\t\t\t  Recipient of the minted toke...\n      JUMP \t\t\t  Recipient of the minted toke...\n    tag 53\t\t\t  Recipient of the minted toke...\n      JUMPDEST \t\t\t  Recipient of the minted toke...\n      PUSH 40\t\t\t  Recipient of the minted toke...\n      MLOAD \t\t\t  Recipient of the minted toke...\n      PUSH [tag] 55\t\t\t  Recipient of the minted toke...\n      SWAP2 \t\t\t  Recipient of the minted toke...\n      SWAP1 \t\t\t  Recipient of the minted toke...\n      PUSH [tag] 56\t\t\t  Recipient of the minted toke...\n      JUMP \t\t\t  Recipient of the minted toke...\n    tag 55\t\t\t  Recipient of the minted toke...\n      JUMPDEST \t\t\t  Recipient of the minted toke...\n      PUSH 40\t\t\t  Recipient of the minted toke...\n      MLOAD \t\t\t  Recipient of the minted toke...\n      DUP1 \t\t\t  Recipient of the minted toke...\n      SWAP2 \t\t\t  Recipient of the minted toke...\n      SUB \t\t\t  Recipient of the minted toke...\n      SWAP1 \t\t\t  Recipient of the minted toke...\n      RETURN \t\t\t  Recipient of the minted toke...\n    tag 9\t\t\tnction mint(address to, uint25...\n      JUMPDEST \t\t\tnction mint(address to, uint25...\n      PUSH [tag] 57\t\t\tnction mint(address to, uint25...\n      PUSH 4\t\t\tnction mint(address to, uint25...\n      DUP1 \t\t\tnction mint(address to, uint25...\n      CALLDATASIZE \t\t\tnction mint(address to, uint25...\n      SUB \t\t\tnction mint(address to, uint25...\n      DUP2 \t\t\tnction mint(address to, uint25...\n      ADD \t\t\tnction mint(address to, uint25...\n      SWAP1 \t\t\tnction mint(address to, uint25...\n      PUSH [tag] 58\t\t\tnction mint(address to, uint25...\n      SWAP2 \t\t\tnction mint(address to, uint25...\n      SWAP1 \t\t\tnction mint(address to, uint25...\n      PUSH [tag] 36\t\t\tnction mint(address to, uint25...\n      JUMP \t\t\tnction mint(address to, uint25...\n    tag 58\t\t\tnction mint(address to, uint25...\n      JUMPDEST \t\t\tnction mint(address to, uint25...\n      PUSH [tag] 59\t\t\tnction mint(address to, uint25...\n      JUMP \t\t\tnction mint(address to, uint25...\n    tag 57\t\t\tnction mint(address to, uint25...\n      JUMPDEST \t\t\tnction mint(address to, uint25...\n      STOP \t\t\tnction mint(address to, uint25...\n    tag 10\t\t\tnction burn(uint256 amount) pu...\n      JUMPDEST \t\t\tnction burn(uint256 amount) pu...\n      PUSH [tag] 60\t\t\tnction burn(uint256 amount) pu...\n      PUSH 4\t\t\tnction burn(uint256 amount) pu...\n      DUP1 \t\t\tnction burn(uint256 amount) pu...\n      CALLDATASIZE \t\t\tnction burn(uint256 amount) pu...\n      SUB \t\t\tnction burn(uint256 amount) pu...\n      DUP2 \t\t\tnction burn(uint256 amount) pu...\n      ADD \t\t\tnction burn(uint256 amount) pu...\n      SWAP1 \t\t\tnction burn(uint256 amount) pu...\n      PUSH [tag] 61\t\t\tnction burn(uint256 amount) pu...\n      SWAP2 \t\t\tnction burn(uint256 amount) pu...\n      SWAP1 \t\t\tnction burn(uint256 amount) pu...\n      PUSH [tag] 62\t\t\tnction burn(uint256 amount) pu...\n      JUMP \t\t\tnction burn(uint256 amount) pu...\n    tag 61\t\t\tnction burn(uint256 amount) pu...\n      JUMPDEST \t\t\tnction burn(uint256 amount) pu...\n      PUSH [tag] 63\t\t\tnction burn(uint256 amount) pu...\n      JUMP \t\t\tnction burn(uint256 amount) pu...\n    tag 60\t\t\tnction burn(uint256 amount) pu...\n      JUMPDEST \t\t\tnction burn(uint256 amount) pu...\n      STOP \t\t\tnction burn(uint256 amount) pu...\n    tag 11\t\t\totice Burn your own tokens; em...\n      JUMPDEST \t\t\totice Burn your own tokens; em...\n      PUSH [tag] 64\t\t\totice Burn your own tokens; em...\n      PUSH 4\t\t\totice Burn your own tokens; em...\n      DUP1 \t\t\totice Burn your own tokens; em...\n      CALLDATASIZE \t\t\totice Burn your own tokens; em...\n      SUB \t\t\totice Burn your own tokens; em...\n      DUP2 \t\t\totice Burn your own tokens; em...\n      ADD \t\t\totice Burn your own tokens; em...\n      SWAP1 \t\t\totice Burn your own tokens; em...\n      PUSH [tag] 65\t\t\totice Burn your own tokens; em...\n      SWAP2 \t\t\totice Burn your own tokens; em...\n      SWAP1 \t\t\totice Burn your own tokens; em...\n      PUSH [tag] 66\t\t\totice Burn your own tokens; em...\n      JUMP \t\t\totice Burn your own tokens; em...\n    tag 65\t\t\totice Burn your own tokens; em...\n      JUMPDEST \t\t\totice Burn your own tokens; em...\n      PUSH [tag] 67\t\t\totice Burn your own tokens; em...\n      JUMP \t\t\totice Burn your own tokens; em...\n    tag 64\t\t\totice Burn your own tokens; em...\n      JUMPDEST \t\t\totice Burn your own tokens; em...\n      PUSH 40\t\t\totice Burn your own tokens; em...\n      MLOAD \t\t\totice Burn your own tokens; em...\n      PUSH [tag] 68\t\t\totice Burn your own tokens; em...\n      SWAP2 \t\t\totice Burn your own tokens; em...\n      SWAP1 \t\t\totice Burn your own tokens; em...\n      PUSH [tag] 43\t\t\totice Burn your own tokens; em...\n      JUMP \t\t\totice Burn your own tokens; em...\n    tag 68\t\t\totice Burn your own tokens; em...\n      JUMPDEST \t\t\totice Burn your own tokens; em...\n      PUSH 40\t\t\totice Burn your own tokens; em...\n      MLOAD \t\t\totice Burn your own tokens; em...\n      DUP1 \t\t\totice Burn your own tokens; em...\n      SWAP2 \t\t\totice Burn your own tokens; em...\n      SUB \t\t\totice Burn your own tokens; em...\n      SWAP1 \t\t\totice Burn your own tokens; em...\n      RETURN \t\t\totice Burn your own tokens; em...\n    tag 12\t\t\tst be called by pending owner)...\n      JUMPDEST \t\t\tst be called by pending owner)...\n      PUSH [tag] 69\t\t\tst be called by pending owner)...\n      PUSH [tag] 70\t\t\tst be called by pending owner)...\n      JUMP \t\t\tst be called by pending owner)...\n    tag 69\t\t\tst be called by pending owner)...\n      JUMPDEST \t\t\tst be called by pending owner)...\n      STOP \t\t\tst be called by pending owner)...\n    tag 13\t\t\tnction acceptOwnership() exter...\n      JUMPDEST \t\t\tnction acceptOwnership() exter...\n      PUSH [tag] 71\t\t\tnction acceptOwnership() exter...\n      PUSH [tag] 72\t\t\tnction acceptOwnership() exter...\n      JUMP \t\t\tnction acceptOwnership() exter...\n    tag 71\t\t\tnction acceptOwnership() exter...\n      JUMPDEST \t\t\tnction acceptOwnership() exter...\n      STOP \t\t\tnction acceptOwnership() exter...\n    tag 14\t\t\ttion burnFrom(address account,...\n      JUMPDEST \t\t\ttion burnFrom(address account,...\n      PUSH [tag] 73\t\t\ttion burnFrom(address account,...\n      PUSH 4\t\t\ttion burnFrom(address account,...\n      DUP1 \t\t\ttion burnFrom(address account,...\n      CALLDATASIZE \t\t\ttion burnFrom(address account,...\n      SUB \t\t\ttion burnFrom(address account,...\n      DUP2 \t\t\ttion burnFrom(address account,...\n      ADD \t\t\ttion burnFrom(address account,...\n      SWAP1 \t\t\ttion burnFrom(address account,...\n      PUSH [tag] 74\t\t\ttion burnFrom(address account,...\n      SWAP2 \t\t\ttion burnFrom(address account,...\n      SWAP1 \t\t\ttion burnFrom(address account,...\n      PUSH [tag] 36\t\t\ttion burnFrom(address account,...\n      JUMP \t\t\ttion burnFrom(address account,...\n    tag 74\t\t\ttion burnFrom(address account,...\n      JUMPDEST \t\t\ttion burnFrom(address account,...\n      PUSH [tag] 75\t\t\ttion burnFrom(address account,...\n      JUMP \t\t\ttion burnFrom(address account,...\n    tag 73\t\t\ttion burnFrom(address account,...\n      JUMPDEST \t\t\ttion burnFrom(address account,...\n      STOP \t\t\ttion burnFrom(address account,...\n    tag 15\t\t\t       require(sender == _pend...\n      JUMPDEST \t\t\t       require(sender == _pend...\n      PUSH [tag] 76\t\t\t       require(sender == _pend...\n      PUSH 4\t\t\t       require(sender == _pend...\n      DUP1 \t\t\t       require(sender == _pend...\n      CALLDATASIZE \t\t\t       require(sender == _pend...\n      SUB \t\t\t       require(sender == _pend...\n      DUP2 \t\t\t       require(sender == _pend...\n      ADD \t\t\t       require(sender == _pend...\n      SWAP1 \t\t\t       require(sender == _pend...\n      PUSH [tag] 77\t\t\t       require(sender == _pend...\n      SWAP2 \t\t\t       require(sender == _pend...\n      SWAP1 \t\t\t       require(sender == _pend...\n      PUSH [tag] 66\t\t\t       require(sender == _pend...\n      JUMP \t\t\t       require(sender == _pend...\n    tag 77\t\t\t       require(sender == _pend...\n      JUMPDEST \t\t\t       require(sender == _pend...\n      PUSH [tag] 78\t\t\t       require(sender == _pend...\n      JUMP \t\t\t       require(sender == _pend...\n    tag 76\t\t\t       require(sender == _pend...\n      JUMPDEST \t\t\t       require(sender == _pend...\n      PUSH 40\t\t\t       require(sender == _pend...\n      MLOAD \t\t\t       require(sender == _pend...\n      PUSH [tag] 79\t\t\t       require(sender == _pend...\n      SWAP2 \t\t\t       require(sender == _pend...\n      SWAP1 \t\t\t       require(sender == _pend...\n      PUSH [tag] 43\t\t\t       require(sender == _pend...\n      JUMP \t\t\t       require(sender == _pend...\n    tag 79\t\t\t       require(sender == _pend...\n      JUMPDEST \t\t\t       require(sender == _pend...\n      PUSH 40\t\t\t       require(sender == _pend...\n      MLOAD \t\t\t       require(sender == _pend...\n      DUP1 \t\t\t       require(sender == _pend...\n      SWAP2 \t\t\t       require(sender == _pend...\n      SUB \t\t\t       require(sender == _pend...\n      SWAP1 \t\t\t       require(sender == _pend...\n      RETURN \t\t\t       require(sender == _pend...\n    tag 16\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 80\t\t\t\n      PUSH [tag] 81\t\t\t\n      JUMP \t\t\t\n    tag 80\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 82\t\t\t\n      SWAP8 \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 83\t\t\t\n      JUMP \t\t\t\n    tag 82\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 17\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      JUMPDEST \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      PUSH [tag] 84\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      PUSH [tag] 85\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      JUMP \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n    tag 84\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      JUMPDEST \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      PUSH 40\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      MLOAD \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      PUSH [tag] 86\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      SWAP2 \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      SWAP1 \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      PUSH [tag] 87\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      JUMP \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n    tag 86\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      JUMPDEST \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      PUSH 40\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      MLOAD \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      DUP1 \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      SWAP2 \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      SUB \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      SWAP1 \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      RETURN \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n    tag 18\t\t\transfer ownership to\\r\\n    fu...\n      JUMPDEST \t\t\transfer ownership to\\r\\n    fu...\n      PUSH [tag] 88\t\t\transfer ownership to\\r\\n    fu...\n      PUSH [tag] 89\t\t\transfer ownership to\\r\\n    fu...\n      JUMP \t\t\transfer ownership to\\r\\n    fu...\n    tag 88\t\t\transfer ownership to\\r\\n    fu...\n      JUMPDEST \t\t\transfer ownership to\\r\\n    fu...\n      PUSH 40\t\t\transfer ownership to\\r\\n    fu...\n      MLOAD \t\t\transfer ownership to\\r\\n    fu...\n      PUSH [tag] 90\t\t\transfer ownership to\\r\\n    fu...\n      SWAP2 \t\t\transfer ownership to\\r\\n    fu...\n      SWAP1 \t\t\transfer ownership to\\r\\n    fu...\n      PUSH [tag] 33\t\t\transfer ownership to\\r\\n    fu...\n      JUMP \t\t\transfer ownership to\\r\\n    fu...\n    tag 90\t\t\transfer ownership to\\r\\n    fu...\n      JUMPDEST \t\t\transfer ownership to\\r\\n    fu...\n      PUSH 40\t\t\transfer ownership to\\r\\n    fu...\n      MLOAD \t\t\transfer ownership to\\r\\n    fu...\n      DUP1 \t\t\transfer ownership to\\r\\n    fu...\n      SWAP2 \t\t\transfer ownership to\\r\\n    fu...\n      SUB \t\t\transfer ownership to\\r\\n    fu...\n      SWAP1 \t\t\transfer ownership to\\r\\n    fu...\n      RETURN \t\t\transfer ownership to\\r\\n    fu...\n    tag 19\t\t\t amount) public override {\\r\\n...\n      JUMPDEST \t\t\t amount) public override {\\r\\n...\n      PUSH [tag] 91\t\t\t amount) public override {\\r\\n...\n      PUSH 4\t\t\t amount) public override {\\r\\n...\n      DUP1 \t\t\t amount) public override {\\r\\n...\n      CALLDATASIZE \t\t\t amount) public override {\\r\\n...\n      SUB \t\t\t amount) public override {\\r\\n...\n      DUP2 \t\t\t amount) public override {\\r\\n...\n      ADD \t\t\t amount) public override {\\r\\n...\n      SWAP1 \t\t\t amount) public override {\\r\\n...\n      PUSH [tag] 92\t\t\t amount) public override {\\r\\n...\n      SWAP2 \t\t\t amount) public override {\\r\\n...\n      SWAP1 \t\t\t amount) public override {\\r\\n...\n      PUSH [tag] 36\t\t\t amount) public override {\\r\\n...\n      JUMP \t\t\t amount) public override {\\r\\n...\n    tag 92\t\t\t amount) public override {\\r\\n...\n      JUMPDEST \t\t\t amount) public override {\\r\\n...\n      PUSH [tag] 93\t\t\t amount) public override {\\r\\n...\n      JUMP \t\t\t amount) public override {\\r\\n...\n    tag 91\t\t\t amount) public override {\\r\\n...\n      JUMPDEST \t\t\t amount) public override {\\r\\n...\n      PUSH 40\t\t\t amount) public override {\\r\\n...\n      MLOAD \t\t\t amount) public override {\\r\\n...\n      PUSH [tag] 94\t\t\t amount) public override {\\r\\n...\n      SWAP2 \t\t\t amount) public override {\\r\\n...\n      SWAP1 \t\t\t amount) public override {\\r\\n...\n      PUSH [tag] 39\t\t\t amount) public override {\\r\\n...\n      JUMP \t\t\t amount) public override {\\r\\n...\n    tag 94\t\t\t amount) public override {\\r\\n...\n      JUMPDEST \t\t\t amount) public override {\\r\\n...\n      PUSH 40\t\t\t amount) public override {\\r\\n...\n      MLOAD \t\t\t amount) public override {\\r\\n...\n      DUP1 \t\t\t amount) public override {\\r\\n...\n      SWAP2 \t\t\t amount) public override {\\r\\n...\n      SUB \t\t\t amount) public override {\\r\\n...\n      SWAP1 \t\t\t amount) public override {\\r\\n...\n      RETURN \t\t\t amount) public override {\\r\\n...\n    tag 20\t\t\tnction initiateOwnershipTransf...\n      JUMPDEST \t\t\tnction initiateOwnershipTransf...\n      PUSH [tag] 95\t\t\tnction initiateOwnershipTransf...\n      PUSH 4\t\t\tnction initiateOwnershipTransf...\n      DUP1 \t\t\tnction initiateOwnershipTransf...\n      CALLDATASIZE \t\t\tnction initiateOwnershipTransf...\n      SUB \t\t\tnction initiateOwnershipTransf...\n      DUP2 \t\t\tnction initiateOwnershipTransf...\n      ADD \t\t\tnction initiateOwnershipTransf...\n      SWAP1 \t\t\tnction initiateOwnershipTransf...\n      PUSH [tag] 96\t\t\tnction initiateOwnershipTransf...\n      SWAP2 \t\t\tnction initiateOwnershipTransf...\n      SWAP1 \t\t\tnction initiateOwnershipTransf...\n      PUSH [tag] 66\t\t\tnction initiateOwnershipTransf...\n      JUMP \t\t\tnction initiateOwnershipTransf...\n    tag 96\t\t\tnction initiateOwnershipTransf...\n      JUMPDEST \t\t\tnction initiateOwnershipTransf...\n      PUSH [tag] 97\t\t\tnction initiateOwnershipTransf...\n      JUMP \t\t\tnction initiateOwnershipTransf...\n    tag 95\t\t\tnction initiateOwnershipTransf...\n      JUMPDEST \t\t\tnction initiateOwnershipTransf...\n      STOP \t\t\tnction initiateOwnershipTransf...\n    tag 21\t\t\tss pending to become owner\\r\\n...\n      JUMPDEST \t\t\tss pending to become owner\\r\\n...\n      PUSH [tag] 98\t\t\tss pending to become owner\\r\\n...\n      PUSH 4\t\t\tss pending to become owner\\r\\n...\n      DUP1 \t\t\tss pending to become owner\\r\\n...\n      CALLDATASIZE \t\t\tss pending to become owner\\r\\n...\n      SUB \t\t\tss pending to become owner\\r\\n...\n      DUP2 \t\t\tss pending to become owner\\r\\n...\n      ADD \t\t\tss pending to become owner\\r\\n...\n      SWAP1 \t\t\tss pending to become owner\\r\\n...\n      PUSH [tag] 99\t\t\tss pending to become owner\\r\\n...\n      SWAP2 \t\t\tss pending to become owner\\r\\n...\n      SWAP1 \t\t\tss pending to become owner\\r\\n...\n      PUSH [tag] 100\t\t\tss pending to become owner\\r\\n...\n      JUMP \t\t\tss pending to become owner\\r\\n...\n    tag 99\t\t\tss pending to become owner\\r\\n...\n      JUMPDEST \t\t\tss pending to become owner\\r\\n...\n      PUSH [tag] 101\t\t\tss pending to become owner\\r\\n...\n      JUMP \t\t\tss pending to become owner\\r\\n...\n    tag 98\t\t\tss pending to become owner\\r\\n...\n      JUMPDEST \t\t\tss pending to become owner\\r\\n...\n      STOP \t\t\tss pending to become owner\\r\\n...\n    tag 22\t\t\tokens from\\r\\n    /// @param t...\n      JUMPDEST \t\t\tokens from\\r\\n    /// @param t...\n      PUSH [tag] 102\t\t\tokens from\\r\\n    /// @param t...\n      PUSH 4\t\t\tokens from\\r\\n    /// @param t...\n      DUP1 \t\t\tokens from\\r\\n    /// @param t...\n      CALLDATASIZE \t\t\tokens from\\r\\n    /// @param t...\n      SUB \t\t\tokens from\\r\\n    /// @param t...\n      DUP2 \t\t\tokens from\\r\\n    /// @param t...\n      ADD \t\t\tokens from\\r\\n    /// @param t...\n      SWAP1 \t\t\tokens from\\r\\n    /// @param t...\n      PUSH [tag] 103\t\t\tokens from\\r\\n    /// @param t...\n      SWAP2 \t\t\tokens from\\r\\n    /// @param t...\n      SWAP1 \t\t\tokens from\\r\\n    /// @param t...\n      PUSH [tag] 104\t\t\tokens from\\r\\n    /// @param t...\n      JUMP \t\t\tokens from\\r\\n    /// @param t...\n    tag 103\t\t\tokens from\\r\\n    /// @param t...\n      JUMPDEST \t\t\tokens from\\r\\n    /// @param t...\n      PUSH [tag] 105\t\t\tokens from\\r\\n    /// @param t...\n      JUMP \t\t\tokens from\\r\\n    /// @param t...\n    tag 102\t\t\tokens from\\r\\n    /// @param t...\n      JUMPDEST \t\t\tokens from\\r\\n    /// @param t...\n      PUSH 40\t\t\tokens from\\r\\n    /// @param t...\n      MLOAD \t\t\tokens from\\r\\n    /// @param t...\n      PUSH [tag] 106\t\t\tokens from\\r\\n    /// @param t...\n      SWAP2 \t\t\tokens from\\r\\n    /// @param t...\n      SWAP1 \t\t\tokens from\\r\\n    /// @param t...\n      PUSH [tag] 43\t\t\tokens from\\r\\n    /// @param t...\n      JUMP \t\t\tokens from\\r\\n    /// @param t...\n    tag 106\t\t\tokens from\\r\\n    /// @param t...\n      JUMPDEST \t\t\tokens from\\r\\n    /// @param t...\n      PUSH 40\t\t\tokens from\\r\\n    /// @param t...\n      MLOAD \t\t\tokens from\\r\\n    /// @param t...\n      DUP1 \t\t\tokens from\\r\\n    /// @param t...\n      SWAP2 \t\t\tokens from\\r\\n    /// @param t...\n      SUB \t\t\tokens from\\r\\n    /// @param t...\n      SWAP1 \t\t\tokens from\\r\\n    /// @param t...\n      RETURN \t\t\tokens from\\r\\n    /// @param t...\n    tag 23\t\t\tnction pendingOwner() public v...\n      JUMPDEST \t\t\tnction pendingOwner() public v...\n      PUSH [tag] 107\t\t\tnction pendingOwner() public v...\n      PUSH [tag] 108\t\t\tnction pendingOwner() public v...\n      JUMP \t\t\tnction pendingOwner() public v...\n    tag 107\t\t\tnction pendingOwner() public v...\n      JUMPDEST \t\t\tnction pendingOwner() public v...\n      PUSH 40\t\t\tnction pendingOwner() public v...\n      MLOAD \t\t\tnction pendingOwner() public v...\n      PUSH [tag] 109\t\t\tnction pendingOwner() public v...\n      SWAP2 \t\t\tnction pendingOwner() public v...\n      SWAP1 \t\t\tnction pendingOwner() public v...\n      PUSH [tag] 87\t\t\tnction pendingOwner() public v...\n      JUMP \t\t\tnction pendingOwner() public v...\n    tag 109\t\t\tnction pendingOwner() public v...\n      JUMPDEST \t\t\tnction pendingOwner() public v...\n      PUSH 40\t\t\tnction pendingOwner() public v...\n      MLOAD \t\t\tnction pendingOwner() public v...\n      DUP1 \t\t\tnction pendingOwner() public v...\n      SWAP2 \t\t\tnction pendingOwner() public v...\n      SUB \t\t\tnction pendingOwner() public v...\n      SWAP1 \t\t\tnction pendingOwner() public v...\n      RETURN \t\t\tnction pendingOwner() public v...\n    tag 24\t\t\ttion emergencyRecoverERC20(\\r\\...\n      JUMPDEST \t\t\ttion emergencyRecoverERC20(\\r\\...\n      PUSH [tag] 110\t\t\ttion emergencyRecoverERC20(\\r\\...\n      PUSH 4\t\t\ttion emergencyRecoverERC20(\\r\\...\n      DUP1 \t\t\ttion emergencyRecoverERC20(\\r\\...\n      CALLDATASIZE \t\t\ttion emergencyRecoverERC20(\\r\\...\n      SUB \t\t\ttion emergencyRecoverERC20(\\r\\...\n      DUP2 \t\t\ttion emergencyRecoverERC20(\\r\\...\n      ADD \t\t\ttion emergencyRecoverERC20(\\r\\...\n      SWAP1 \t\t\ttion emergencyRecoverERC20(\\r\\...\n      PUSH [tag] 111\t\t\ttion emergencyRecoverERC20(\\r\\...\n      SWAP2 \t\t\ttion emergencyRecoverERC20(\\r\\...\n      SWAP1 \t\t\ttion emergencyRecoverERC20(\\r\\...\n      PUSH [tag] 112\t\t\ttion emergencyRecoverERC20(\\r\\...\n      JUMP \t\t\ttion emergencyRecoverERC20(\\r\\...\n    tag 111\t\t\ttion emergencyRecoverERC20(\\r\\...\n      JUMPDEST \t\t\ttion emergencyRecoverERC20(\\r\\...\n      PUSH [tag] 113\t\t\ttion emergencyRecoverERC20(\\r\\...\n      JUMP \t\t\ttion emergencyRecoverERC20(\\r\\...\n    tag 110\t\t\ttion emergencyRecoverERC20(\\r\\...\n      JUMPDEST \t\t\ttion emergencyRecoverERC20(\\r\\...\n      STOP \t\t\ttion emergencyRecoverERC20(\\r\\...\n    tag 25\t\t\tnt256 public constant CAP = 66...\n      JUMPDEST \t\t\tnt256 public constant CAP = 66...\n      PUSH [tag] 114\t\t\tnt256 public constant CAP = 66...\n      PUSH [tag] 115\t\t\tnt256 public constant CAP = 66...\n      JUMP \t\t\tnt256 public constant CAP = 66...\n    tag 114\t\t\tnt256 public constant CAP = 66...\n      JUMPDEST \t\t\tnt256 public constant CAP = 66...\n      PUSH 40\t\t\tnt256 public constant CAP = 66...\n      MLOAD \t\t\tnt256 public constant CAP = 66...\n      PUSH [tag] 116\t\t\tnt256 public constant CAP = 66...\n      SWAP2 \t\t\tnt256 public constant CAP = 66...\n      SWAP1 \t\t\tnt256 public constant CAP = 66...\n      PUSH [tag] 43\t\t\tnt256 public constant CAP = 66...\n      JUMP \t\t\tnt256 public constant CAP = 66...\n    tag 116\t\t\tnt256 public constant CAP = 66...\n      JUMPDEST \t\t\tnt256 public constant CAP = 66...\n      PUSH 40\t\t\tnt256 public constant CAP = 66...\n      MLOAD \t\t\tnt256 public constant CAP = 66...\n      DUP1 \t\t\tnt256 public constant CAP = 66...\n      SWAP2 \t\t\tnt256 public constant CAP = 66...\n      SUB \t\t\tnt256 public constant CAP = 66...\n      SWAP1 \t\t\tnt256 public constant CAP = 66...\n      RETURN \t\t\tnt256 public constant CAP = 66...\n    tag 26\t\t\ttransferOwnership(sender);\\r\\n...\n      JUMPDEST \t\t\ttransferOwnership(sender);\\r\\n...\n      PUSH [tag] 117\t\t\ttransferOwnership(sender);\\r\\n...\n      PUSH 4\t\t\ttransferOwnership(sender);\\r\\n...\n      DUP1 \t\t\ttransferOwnership(sender);\\r\\n...\n      CALLDATASIZE \t\t\ttransferOwnership(sender);\\r\\n...\n      SUB \t\t\ttransferOwnership(sender);\\r\\n...\n      DUP2 \t\t\ttransferOwnership(sender);\\r\\n...\n      ADD \t\t\ttransferOwnership(sender);\\r\\n...\n      SWAP1 \t\t\ttransferOwnership(sender);\\r\\n...\n      PUSH [tag] 118\t\t\ttransferOwnership(sender);\\r\\n...\n      SWAP2 \t\t\ttransferOwnership(sender);\\r\\n...\n      SWAP1 \t\t\ttransferOwnership(sender);\\r\\n...\n      PUSH [tag] 66\t\t\ttransferOwnership(sender);\\r\\n...\n      JUMP \t\t\ttransferOwnership(sender);\\r\\n...\n    tag 118\t\t\ttransferOwnership(sender);\\r\\n...\n      JUMPDEST \t\t\ttransferOwnership(sender);\\r\\n...\n      PUSH [tag] 119\t\t\ttransferOwnership(sender);\\r\\n...\n      JUMP \t\t\ttransferOwnership(sender);\\r\\n...\n    tag 117\t\t\ttransferOwnership(sender);\\r\\n...\n      JUMPDEST \t\t\ttransferOwnership(sender);\\r\\n...\n      STOP \t\t\ttransferOwnership(sender);\\r\\n...\n    tag 31\t\t\taddress) {\\r\\n        return _...\n      JUMPDEST \t\t\taddress) {\\r\\n        return _...\n      PUSH 60\t\t\t  }\\r\\n\\r\\n    //\n      PUSH 3\t\t\towner\n      DUP1 \t\t\titiate owner\n      SLOAD \t\t\titiate owner\n      PUSH [tag] 121\t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n      PUSH [tag] 122\t\t\titiate owner\n      JUMP \t\t\titiate owner\n    tag 121\t\t\titiate owner\n      JUMPDEST \t\t\titiate owner\n      DUP1 \t\t\titiate owner\n      PUSH 1F\t\t\titiate owner\n      ADD \t\t\titiate owner\n      PUSH 20\t\t\titiate owner\n      DUP1 \t\t\titiate owner\n      SWAP2 \t\t\titiate owner\n      DIV \t\t\titiate owner\n      MUL \t\t\titiate owner\n      PUSH 20\t\t\titiate owner\n      ADD \t\t\titiate owner\n      PUSH 40\t\t\titiate owner\n      MLOAD \t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n      DUP2 \t\t\titiate owner\n      ADD \t\t\titiate owner\n      PUSH 40\t\t\titiate owner\n      MSTORE \t\t\titiate owner\n      DUP1 \t\t\titiate owner\n      SWAP3 \t\t\titiate owner\n      SWAP2 \t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n      DUP2 \t\t\titiate owner\n      DUP2 \t\t\titiate owner\n      MSTORE \t\t\titiate owner\n      PUSH 20\t\t\titiate owner\n      ADD \t\t\titiate owner\n      DUP3 \t\t\titiate owner\n      DUP1 \t\t\titiate owner\n      SLOAD \t\t\titiate owner\n      PUSH [tag] 123\t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n      PUSH [tag] 122\t\t\titiate owner\n      JUMP \t\t\titiate owner\n    tag 123\t\t\titiate owner\n      JUMPDEST \t\t\titiate owner\n      DUP1 \t\t\titiate owner\n      ISZERO \t\t\titiate owner\n      PUSH [tag] 124\t\t\titiate owner\n      JUMPI \t\t\titiate owner\n      DUP1 \t\t\titiate owner\n      PUSH 1F\t\t\titiate owner\n      LT \t\t\titiate owner\n      PUSH [tag] 125\t\t\titiate owner\n      JUMPI \t\t\titiate owner\n      PUSH 100\t\t\titiate owner\n      DUP1 \t\t\titiate owner\n      DUP4 \t\t\titiate owner\n      SLOAD \t\t\titiate owner\n      DIV \t\t\titiate owner\n      MUL \t\t\titiate owner\n      DUP4 \t\t\titiate owner\n      MSTORE \t\t\titiate owner\n      SWAP2 \t\t\titiate owner\n      PUSH 20\t\t\titiate owner\n      ADD \t\t\titiate owner\n      SWAP2 \t\t\titiate owner\n      PUSH [tag] 124\t\t\titiate owner\n      JUMP \t\t\titiate owner\n    tag 125\t\t\titiate owner\n      JUMPDEST \t\t\titiate owner\n      DUP3 \t\t\titiate owner\n      ADD \t\t\titiate owner\n      SWAP2 \t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n      PUSH 0\t\t\titiate owner\n      MSTORE \t\t\titiate owner\n      PUSH 20\t\t\titiate owner\n      PUSH 0\t\t\titiate owner\n      KECCAK256 \t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n    tag 126\t\t\titiate owner\n      JUMPDEST \t\t\titiate owner\n      DUP2 \t\t\titiate owner\n      SLOAD \t\t\titiate owner\n      DUP2 \t\t\titiate owner\n      MSTORE \t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n      PUSH 1\t\t\titiate owner\n      ADD \t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n      PUSH 20\t\t\titiate owner\n      ADD \t\t\titiate owner\n      DUP1 \t\t\titiate owner\n      DUP4 \t\t\titiate owner\n      GT \t\t\titiate owner\n      PUSH [tag] 126\t\t\titiate owner\n      JUMPI \t\t\titiate owner\n      DUP3 \t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n      SUB \t\t\titiate owner\n      PUSH 1F\t\t\titiate owner\n      AND \t\t\titiate owner\n      DUP3 \t\t\titiate owner\n      ADD \t\t\titiate owner\n      SWAP2 \t\t\titiate owner\n    tag 124\t\t\titiate owner\n      JUMPDEST \t\t\titiate owner\n      POP \t\t\titiate owner\n      POP \t\t\titiate owner\n      POP \t\t\titiate owner\n      POP \t\t\titiate owner\n      POP \t\t\titiate owner\n      SWAP1 \t\t\titiate owner\n      POP \t\t\titiate owner\n      SWAP1 \t\t\taddress) {\\r\\n        return _...\n      JUMP \t\t\taddress) {\\r\\n        return _...\n    tag 37\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 128\t\t\t\n      PUSH [tag] 129\t\t\t\n      JUMP \t\t\t\n    tag 128\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 130\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 131\t\t\t\n      JUMP \t\t\t\n    tag 130\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 41\t\t\trequire(totalSupply() + amount...\n      JUMPDEST \t\t\trequire(totalSupply() + amount...\n      PUSH 0\t\t\tap exce\n      PUSH 2\t\t\tint(to, amou\n      SLOAD \t\t\tint(to, amou\n      SWAP1 \t\t\t     _mint(to, amou\n      POP \t\t\t     _mint(to, amou\n      SWAP1 \t\t\trequire(totalSupply() + amount...\n      JUMP \t\t\trequire(totalSupply() + amount...\n    tag 47\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 134\t\t\t\n      PUSH [tag] 129\t\t\t\n      JUMP \t\t\t\n    tag 134\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 135\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 136\t\t\t\n      JUMP \t\t\t\n    tag 135\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 137\t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 138\t\t\t\n      JUMP \t\t\t\n    tag 137\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 50\t\t\tens\\r\\n    /// @param amount  ...\n      JUMPDEST \t\t\tens\\r\\n    /// @param amount  ...\n      PUSH 0\t\t\ti)\\r\\n \n      PUSH 12\t\t\tdr\n      SWAP1 \t\t\tmint(addr\n      POP \t\t\tmint(addr\n      SWAP1 \t\t\tens\\r\\n    /// @param amount  ...\n      JUMP \t\t\tens\\r\\n    /// @param amount  ...\n    tag 54\t\t\t  Recipient of the minted toke...\n      JUMPDEST \t\t\t  Recipient of the minted toke...\n      PUSH 0\t\t\tount to\n      PUSH [tag] 141\t\t\t function mint(addre\n      PUSH [tag] 142\t\t\t function mint(add\n      JUMP \t\t\t function mint(addre\n    tag 141\t\t\t function mint(addre\n      JUMPDEST \t\t\t function mint(addre\n      SWAP1 \t\t\ti)\\r\\n    function mint(addre\n      POP \t\t\ti)\\r\\n    function mint(addre\n      SWAP1 \t\t\t  Recipient of the minted toke...\n      JUMP \t\t\t  Recipient of the minted toke...\n    tag 59\t\t\tnction mint(address to, uint25...\n      JUMPDEST \t\t\tnction mint(address to, uint25...\n      PUSH [tag] 144\t\t\t        ERC20\n      PUSH [tag] 145\t\t\t        ERC\n      JUMP \t\t\t        ERC20\n    tag 144\t\t\t        ERC20\n      JUMPDEST \t\t\t        ERC20\n      PUSH [tag] 147\t\t\tce Accept ownership t\n      PUSH [tag] 148\t\t\tce Accept ownership\n      JUMP \t\t\tce Accept ownership t\n    tag 147\t\t\tce Accept ownership t\n      JUMPDEST \t\t\tce Accept ownership t\n      PUSH 36DF8DEC4229FB48100000\t\t\t_337_700 * 10 ** 18;\\r\n      DUP2 \t\t\tount <\n      PUSH [tag] 150\t\t\ttalSupply() +\n      PUSH [tag] 41\t\t\ttalSupply()\n      JUMP \t\t\ttalSupply() +\n    tag 150\t\t\ttalSupply() +\n      JUMPDEST \t\t\ttalSupply() +\n      PUSH [tag] 151\t\t\ttalSupply() + amount <\n      SWAP2 \t\t\ttalSupply() + amount <\n      SWAP1 \t\t\ttalSupply() + amount <\n      PUSH [tag] 152\t\t\ttalSupply() + amount <\n      JUMP \t\t\ttalSupply() + amount <\n    tag 151\t\t\ttalSupply() + amount <\n      JUMPDEST \t\t\ttalSupply() + amount <\n      GT \t\t\ttalSupply() + amount <= CAP, \n      ISZERO \t\t\ttalSupply() + amount <= CAP, \n      PUSH [tag] 153\t\t\tquire(totalSupply() + amount <...\n      JUMPI \t\t\tquire(totalSupply() + amount <...\n      PUSH 40\t\t\tquire(totalSupply() + amount <...\n      MLOAD \t\t\tquire(totalSupply() + amount <...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\tquire(totalSupply() + amount <...\n      DUP2 \t\t\tquire(totalSupply() + amount <...\n      MSTORE \t\t\tquire(totalSupply() + amount <...\n      PUSH 4\t\t\tquire(totalSupply() + amount <...\n      ADD \t\t\tquire(totalSupply() + amount <...\n      PUSH [tag] 154\t\t\tquire(totalSupply() + amount <...\n      SWAP1 \t\t\tquire(totalSupply() + amount <...\n      PUSH [tag] 155\t\t\tquire(totalSupply() + amount <...\n      JUMP \t\t\tquire(totalSupply() + amount <...\n    tag 154\t\t\tquire(totalSupply() + amount <...\n      JUMPDEST \t\t\tquire(totalSupply() + amount <...\n      PUSH 40\t\t\tquire(totalSupply() + amount <...\n      MLOAD \t\t\tquire(totalSupply() + amount <...\n      DUP1 \t\t\tquire(totalSupply() + amount <...\n      SWAP2 \t\t\tquire(totalSupply() + amount <...\n      SUB \t\t\tquire(totalSupply() + amount <...\n      SWAP1 \t\t\tquire(totalSupply() + amount <...\n      REVERT \t\t\tquire(totalSupply() + amount <...\n    tag 153\t\t\tquire(totalSupply() + amount <...\n      JUMPDEST \t\t\tquire(totalSupply() + amount <...\n      PUSH [tag] 156\t\t\tint(to, amount);\\r\n      DUP3 \t\t\t, \n      DUP3 \t\t\tount);\n      PUSH [tag] 157\t\t\tint(t\n      JUMP \t\t\tint(to, amount);\\r\n    tag 156\t\t\tint(to, amount);\\r\n      JUMPDEST \t\t\tint(to, amount);\\r\n      DUP2 \t\t\t, \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tkensMinted(to, amount);\\r\n      AND \t\t\tkensMinted(to, amount);\\r\n      PUSH 3F2C9D57C068687834F0DE942A9BABB9E5ACAB57D516D3480A3C16EE165A4273\t\t\tkensMinted(to, amount);\\r\n      DUP3 \t\t\tount);\n      PUSH 40\t\t\tkensMinted(to, amount);\\r\n      MLOAD \t\t\tkensMinted(to, amount);\\r\n      PUSH [tag] 158\t\t\tkensMinted(to, amount);\\r\n      SWAP2 \t\t\tkensMinted(to, amount);\\r\n      SWAP1 \t\t\tkensMinted(to, amount);\\r\n      PUSH [tag] 43\t\t\tkensMinted(to, amount);\\r\n      JUMP \t\t\tkensMinted(to, amount);\\r\n    tag 158\t\t\tkensMinted(to, amount);\\r\n      JUMPDEST \t\t\tkensMinted(to, amount);\\r\n      PUSH 40\t\t\tkensMinted(to, amount);\\r\n      MLOAD \t\t\tkensMinted(to, amount);\\r\n      DUP1 \t\t\tkensMinted(to, amount);\\r\n      SWAP2 \t\t\tkensMinted(to, amount);\\r\n      SUB \t\t\tkensMinted(to, amount);\\r\n      SWAP1 \t\t\tkensMinted(to, amount);\\r\n      LOG2 \t\t\tkensMinted(to, amount);\\r\n      PUSH [tag] 159\t\t\ted by pending owner)\n      PUSH [tag] 160\t\t\ted by pending owne\n      JUMP \t\t\ted by pending owner)\n    tag 159\t\t\ted by pending owner)\n      JUMPDEST \t\t\ted by pending owner)\n      POP \t\t\tnction mint(address to, uint25...\n      POP \t\t\tnction mint(address to, uint25...\n      JUMP \t\t\tnction mint(address to, uint25...\n    tag 63\t\t\tnction burn(uint256 amount) pu...\n      JUMPDEST \t\t\tnction burn(uint256 amount) pu...\n      PUSH [tag] 162\t\t\tper.burn(amount);\\r\n      DUP2 \t\t\tount);\n      PUSH [tag] 163\t\t\tper.burn(a\n      JUMP \t\t\tper.burn(amount);\\r\n    tag 162\t\t\tper.burn(amount);\\r\n      JUMPDEST \t\t\tper.burn(amount);\\r\n      PUSH [tag] 164\t\t\tsgSender(), \n      PUSH [tag] 129\t\t\tsgSender()\n      JUMP \t\t\tsgSender(), \n    tag 164\t\t\tsgSender(), \n      JUMPDEST \t\t\tsgSender(), \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tkensBurned(_msgSender(), amoun...\n      AND \t\t\tkensBurned(_msgSender(), amoun...\n      PUSH FD38818F5291BF0BB3A2A48AADC06BA8757865D1DABD804585338AAB3009DCB6\t\t\tkensBurned(_msgSender(), amoun...\n      DUP3 \t\t\tount);\n      PUSH 40\t\t\tkensBurned(_msgSender(), amoun...\n      MLOAD \t\t\tkensBurned(_msgSender(), amoun...\n      PUSH [tag] 165\t\t\tkensBurned(_msgSender(), amoun...\n      SWAP2 \t\t\tkensBurned(_msgSender(), amoun...\n      SWAP1 \t\t\tkensBurned(_msgSender(), amoun...\n      PUSH [tag] 43\t\t\tkensBurned(_msgSender(), amoun...\n      JUMP \t\t\tkensBurned(_msgSender(), amoun...\n    tag 165\t\t\tkensBurned(_msgSender(), amoun...\n      JUMPDEST \t\t\tkensBurned(_msgSender(), amoun...\n      PUSH 40\t\t\tkensBurned(_msgSender(), amoun...\n      MLOAD \t\t\tkensBurned(_msgSender(), amoun...\n      DUP1 \t\t\tkensBurned(_msgSender(), amoun...\n      SWAP2 \t\t\tkensBurned(_msgSender(), amoun...\n      SUB \t\t\tkensBurned(_msgSender(), amoun...\n      SWAP1 \t\t\tkensBurned(_msgSender(), amoun...\n      LOG2 \t\t\tkensBurned(_msgSender(), amoun...\n      POP \t\t\tnction burn(uint256 amount) pu...\n      JUMP \t\t\tnction burn(uint256 amount) pu...\n    tag 67\t\t\totice Burn your own tokens; em...\n      JUMPDEST \t\t\totice Burn your own tokens; em...\n      PUSH 0\t\t\trn(uint\n      DUP1 \t\t\toverride \n      PUSH 0\t\t\toverride {\\r\\n      \n      DUP4 \t\t\t\\r\\n     \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\toverride {\\r\\n      \n      AND \t\t\toverride {\\r\\n      \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\toverride {\\r\\n      \n      AND \t\t\toverride {\\r\\n      \n      DUP2 \t\t\toverride {\\r\\n      \n      MSTORE \t\t\toverride {\\r\\n      \n      PUSH 20\t\t\toverride {\\r\\n      \n      ADD \t\t\toverride {\\r\\n      \n      SWAP1 \t\t\toverride {\\r\\n      \n      DUP2 \t\t\toverride {\\r\\n      \n      MSTORE \t\t\toverride {\\r\\n      \n      PUSH 20\t\t\toverride {\\r\\n      \n      ADD \t\t\toverride {\\r\\n      \n      PUSH 0\t\t\toverride {\\r\\n      \n      KECCAK256 \t\t\toverride {\\r\\n      \n      SLOAD \t\t\toverride {\\r\\n      \n      SWAP1 \t\t\tpublic override {\\r\\n      \n      POP \t\t\tpublic override {\\r\\n      \n      SWAP2 \t\t\totice Burn your own tokens; em...\n      SWAP1 \t\t\totice Burn your own tokens; em...\n      POP \t\t\totice Burn your own tokens; em...\n      JUMP \t\t\totice Burn your own tokens; em...\n    tag 70\t\t\tst be called by pending owner)...\n      JUMPDEST \t\t\tst be called by pending owner)...\n      PUSH [tag] 168\t\t\t        ERC20\n      PUSH [tag] 145\t\t\t        ERC\n      JUMP \t\t\t        ERC20\n    tag 168\t\t\t        ERC20\n      JUMPDEST \t\t\t        ERC20\n      PUSH [tag] 170\t\t\txternal {\\r\\n        address s...\n      PUSH 0\t\t\ts\n      PUSH [tag] 171\t\t\txternal {\\r\\n       \n      JUMP \t\t\txternal {\\r\\n        address s...\n    tag 170\t\t\txternal {\\r\\n        address s...\n      JUMPDEST \t\t\txternal {\\r\\n        address s...\n      JUMP \t\t\tst be called by pending owner)...\n    tag 72\t\t\tnction acceptOwnership() exter...\n      JUMPDEST \t\t\tnction acceptOwnership() exter...\n      PUSH 0\t\t\tdress sender =\n      PUSH [tag] 173\t\t\tsgSender();\\r\n      PUSH [tag] 129\t\t\tsgSender()\n      JUMP \t\t\tsgSender();\\r\n    tag 173\t\t\tsgSender();\\r\n      JUMPDEST \t\t\tsgSender();\\r\n      SWAP1 \t\t\tdress sender = _msgSender();\\r\n      POP \t\t\tdress sender = _msgSender();\\r\n      PUSH A\t\t\tendingOwner, \n      PUSH 0\t\t\tendingOwner, \n      SWAP1 \t\t\tendingOwner, \n      SLOAD \t\t\tendingOwner, \n      SWAP1 \t\t\tendingOwner, \n      PUSH 100\t\t\tendingOwner, \n      EXP \t\t\tendingOwner, \n      SWAP1 \t\t\tendingOwner, \n      DIV \t\t\tendingOwner, \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tendingOwner, \n      AND \t\t\tendingOwner, \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnder == _pendingOwner, \n      AND \t\t\tnder == _pendingOwner, \n      DUP2 \t\t\tnder =\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnder == _pendingOwner, \n      AND \t\t\tnder == _pendingOwner, \n      EQ \t\t\tnder == _pendingOwner, \n      PUSH [tag] 174\t\t\tquire(sender == _pendingOwner,...\n      JUMPI \t\t\tquire(sender == _pendingOwner,...\n      PUSH 40\t\t\tquire(sender == _pendingOwner,...\n      MLOAD \t\t\tquire(sender == _pendingOwner,...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\tquire(sender == _pendingOwner,...\n      DUP2 \t\t\tquire(sender == _pendingOwner,...\n      MSTORE \t\t\tquire(sender == _pendingOwner,...\n      PUSH 4\t\t\tquire(sender == _pendingOwner,...\n      ADD \t\t\tquire(sender == _pendingOwner,...\n      PUSH [tag] 175\t\t\tquire(sender == _pendingOwner,...\n      SWAP1 \t\t\tquire(sender == _pendingOwner,...\n      PUSH [tag] 176\t\t\tquire(sender == _pendingOwner,...\n      JUMP \t\t\tquire(sender == _pendingOwner,...\n    tag 175\t\t\tquire(sender == _pendingOwner,...\n      JUMPDEST \t\t\tquire(sender == _pendingOwner,...\n      PUSH 40\t\t\tquire(sender == _pendingOwner,...\n      MLOAD \t\t\tquire(sender == _pendingOwner,...\n      DUP1 \t\t\tquire(sender == _pendingOwner,...\n      SWAP2 \t\t\tquire(sender == _pendingOwner,...\n      SUB \t\t\tquire(sender == _pendingOwner,...\n      SWAP1 \t\t\tquire(sender == _pendingOwner,...\n      REVERT \t\t\tquire(sender == _pendingOwner,...\n    tag 174\t\t\tquire(sender == _pendingOwner,...\n      JUMPDEST \t\t\tquire(sender == _pendingOwner,...\n      PUSH 0\t\t\t;\n      PUSH A\t\t\tendingOwner =\n      PUSH 0\t\t\tendingOwner =\n      PUSH 100\t\t\tendingOwner = address(0);\\r\n      EXP \t\t\tendingOwner = address(0);\\r\n      DUP2 \t\t\tendingOwner = address(0);\\r\n      SLOAD \t\t\tendingOwner = address(0);\\r\n      DUP2 \t\t\tendingOwner = address(0);\\r\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tendingOwner = address(0);\\r\n      MUL \t\t\tendingOwner = address(0);\\r\n      NOT \t\t\tendingOwner = address(0);\\r\n      AND \t\t\tendingOwner = address(0);\\r\n      SWAP1 \t\t\tendingOwner = address(0);\\r\n      DUP4 \t\t\tendingOwner = address(0);\\r\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tendingOwner = address(0);\\r\n      AND \t\t\tendingOwner = address(0);\\r\n      MUL \t\t\tendingOwner = address(0);\\r\n      OR \t\t\tendingOwner = address(0);\\r\n      SWAP1 \t\t\tendingOwner = address(0);\\r\n      SSTORE \t\t\tendingOwner = address(0);\\r\n      POP \t\t\tendingOwner = address(0);\\r\n      PUSH [tag] 177\t\t\transferOwnership(sender);\\r\n      DUP2 \t\t\tnder);\n      PUSH [tag] 171\t\t\transferOwnership(s\n      JUMP \t\t\transferOwnership(sender);\\r\n    tag 177\t\t\transferOwnership(sender);\\r\n      JUMPDEST \t\t\transferOwnership(sender);\\r\n      POP \t\t\t\\n        address sender = _ms...\n      JUMP \t\t\tnction acceptOwnership() exter...\n    tag 75\t\t\ttion burnFrom(address account,...\n      JUMPDEST \t\t\ttion burnFrom(address account,...\n      PUSH [tag] 179\t\t\tr.burnFrom(account, amount);\\r...\n      DUP3 \t\t\tunt, am\n      DUP3 \t\t\tnt);\\r\\n\n      PUSH [tag] 180\t\t\tr.burnFrom(acc\n      JUMP \t\t\tr.burnFrom(account, amount);\\r...\n    tag 179\t\t\tr.burnFrom(account, amount);\\r...\n      JUMPDEST \t\t\tr.burnFrom(account, amount);\\r...\n      DUP2 \t\t\tunt, am\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnsBurned(account, amount);\\r\\n...\n      AND \t\t\tnsBurned(account, amount);\\r\\n...\n      PUSH FD38818F5291BF0BB3A2A48AADC06BA8757865D1DABD804585338AAB3009DCB6\t\t\tnsBurned(account, amount);\\r\\n...\n      DUP3 \t\t\tnt);\\r\\n\n      PUSH 40\t\t\tnsBurned(account, amount);\\r\\n...\n      MLOAD \t\t\tnsBurned(account, amount);\\r\\n...\n      PUSH [tag] 181\t\t\tnsBurned(account, amount);\\r\\n...\n      SWAP2 \t\t\tnsBurned(account, amount);\\r\\n...\n      SWAP1 \t\t\tnsBurned(account, amount);\\r\\n...\n      PUSH [tag] 43\t\t\tnsBurned(account, amount);\\r\\n...\n      JUMP \t\t\tnsBurned(account, amount);\\r\\n...\n    tag 181\t\t\tnsBurned(account, amount);\\r\\n...\n      JUMPDEST \t\t\tnsBurned(account, amount);\\r\\n...\n      PUSH 40\t\t\tnsBurned(account, amount);\\r\\n...\n      MLOAD \t\t\tnsBurned(account, amount);\\r\\n...\n      DUP1 \t\t\tnsBurned(account, amount);\\r\\n...\n      SWAP2 \t\t\tnsBurned(account, amount);\\r\\n...\n      SUB \t\t\tnsBurned(account, amount);\\r\\n...\n      SWAP1 \t\t\tnsBurned(account, amount);\\r\\n...\n      LOG2 \t\t\tnsBurned(account, amount);\\r\\n...\n      POP \t\t\ttion burnFrom(address account,...\n      POP \t\t\ttion burnFrom(address account,...\n      JUMP \t\t\ttion burnFrom(address account,...\n    tag 78\t\t\t       require(sender == _pend...\n      JUMPDEST \t\t\t       require(sender == _pend...\n      PUSH 0\t\t\t     _p\n      PUSH [tag] 183\t\t\tss(0);\\r\\n        _tr\n      DUP3 \t\t\t   _t\n      PUSH [tag] 184\t\t\tss(0);\\r\\n    \n      JUMP \t\t\tss(0);\\r\\n        _tr\n    tag 183\t\t\tss(0);\\r\\n        _tr\n      JUMPDEST \t\t\tss(0);\\r\\n        _tr\n      SWAP1 \t\t\t= address(0);\\r\\n        _tr\n      POP \t\t\t= address(0);\\r\\n        _tr\n      SWAP2 \t\t\t       require(sender == _pend...\n      SWAP1 \t\t\t       require(sender == _pend...\n      POP \t\t\t       require(sender == _pend...\n      JUMP \t\t\t       require(sender == _pend...\n    tag 81\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 186\t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 188\t\t\t\n      PUSH [tag] 189\t\t\t\n      JUMP \t\t\t\n    tag 188\t\t\t\n      JUMPDEST \t\t\t\n      CHAINID \t\t\t\n      ADDRESS \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 191\t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 191\t\t\t\n      JUMPDEST \t\t\t\n    tag 190\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      PUSH 20\t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 193\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      DUP4 \t\t\t\n      CALLDATACOPY \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 193\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH F00000000000000000000000000000000000000000000000000000000000000\t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SWAP3 \t\t\t\n      SWAP4 \t\t\t\n      SWAP5 \t\t\t\n      SWAP6 \t\t\t\n      SWAP7 \t\t\t\n      JUMP \t\t\t\n    tag 85\t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      JUMPDEST \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      PUSH 0\t\t\ts pendi\n      PUSH 8\t\t\t\\n    f\n      PUSH 0\t\t\t\\n    f\n      SWAP1 \t\t\t\\n    f\n      SLOAD \t\t\t\\n    f\n      SWAP1 \t\t\t\\n    f\n      PUSH 100\t\t\t\\n    f\n      EXP \t\t\t\\n    f\n      SWAP1 \t\t\t\\n    f\n      DIV \t\t\t\\n    f\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\\n    f\n      AND \t\t\t\\n    f\n      SWAP1 \t\t\t owner\\r\\n    f\n      POP \t\t\t owner\\r\\n    f\n      SWAP1 \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n      JUMP \t\t\toyer\\r\\n    }\\r\\n\\r\\n    /// @...\n    tag 89\t\t\transfer ownership to\\r\\n    fu...\n      JUMPDEST \t\t\transfer ownership to\\r\\n    fu...\n      PUSH 60\t\t\trshipTransfer\n      PUSH 4\t\t\texterna\n      DUP1 \t\t\tOwner) externa\n      SLOAD \t\t\tOwner) externa\n      PUSH [tag] 196\t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n      PUSH [tag] 122\t\t\tOwner) externa\n      JUMP \t\t\tOwner) externa\n    tag 196\t\t\tOwner) externa\n      JUMPDEST \t\t\tOwner) externa\n      DUP1 \t\t\tOwner) externa\n      PUSH 1F\t\t\tOwner) externa\n      ADD \t\t\tOwner) externa\n      PUSH 20\t\t\tOwner) externa\n      DUP1 \t\t\tOwner) externa\n      SWAP2 \t\t\tOwner) externa\n      DIV \t\t\tOwner) externa\n      MUL \t\t\tOwner) externa\n      PUSH 20\t\t\tOwner) externa\n      ADD \t\t\tOwner) externa\n      PUSH 40\t\t\tOwner) externa\n      MLOAD \t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n      DUP2 \t\t\tOwner) externa\n      ADD \t\t\tOwner) externa\n      PUSH 40\t\t\tOwner) externa\n      MSTORE \t\t\tOwner) externa\n      DUP1 \t\t\tOwner) externa\n      SWAP3 \t\t\tOwner) externa\n      SWAP2 \t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n      DUP2 \t\t\tOwner) externa\n      DUP2 \t\t\tOwner) externa\n      MSTORE \t\t\tOwner) externa\n      PUSH 20\t\t\tOwner) externa\n      ADD \t\t\tOwner) externa\n      DUP3 \t\t\tOwner) externa\n      DUP1 \t\t\tOwner) externa\n      SLOAD \t\t\tOwner) externa\n      PUSH [tag] 197\t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n      PUSH [tag] 122\t\t\tOwner) externa\n      JUMP \t\t\tOwner) externa\n    tag 197\t\t\tOwner) externa\n      JUMPDEST \t\t\tOwner) externa\n      DUP1 \t\t\tOwner) externa\n      ISZERO \t\t\tOwner) externa\n      PUSH [tag] 198\t\t\tOwner) externa\n      JUMPI \t\t\tOwner) externa\n      DUP1 \t\t\tOwner) externa\n      PUSH 1F\t\t\tOwner) externa\n      LT \t\t\tOwner) externa\n      PUSH [tag] 199\t\t\tOwner) externa\n      JUMPI \t\t\tOwner) externa\n      PUSH 100\t\t\tOwner) externa\n      DUP1 \t\t\tOwner) externa\n      DUP4 \t\t\tOwner) externa\n      SLOAD \t\t\tOwner) externa\n      DIV \t\t\tOwner) externa\n      MUL \t\t\tOwner) externa\n      DUP4 \t\t\tOwner) externa\n      MSTORE \t\t\tOwner) externa\n      SWAP2 \t\t\tOwner) externa\n      PUSH 20\t\t\tOwner) externa\n      ADD \t\t\tOwner) externa\n      SWAP2 \t\t\tOwner) externa\n      PUSH [tag] 198\t\t\tOwner) externa\n      JUMP \t\t\tOwner) externa\n    tag 199\t\t\tOwner) externa\n      JUMPDEST \t\t\tOwner) externa\n      DUP3 \t\t\tOwner) externa\n      ADD \t\t\tOwner) externa\n      SWAP2 \t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n      PUSH 0\t\t\tOwner) externa\n      MSTORE \t\t\tOwner) externa\n      PUSH 20\t\t\tOwner) externa\n      PUSH 0\t\t\tOwner) externa\n      KECCAK256 \t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n    tag 200\t\t\tOwner) externa\n      JUMPDEST \t\t\tOwner) externa\n      DUP2 \t\t\tOwner) externa\n      SLOAD \t\t\tOwner) externa\n      DUP2 \t\t\tOwner) externa\n      MSTORE \t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n      PUSH 1\t\t\tOwner) externa\n      ADD \t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n      PUSH 20\t\t\tOwner) externa\n      ADD \t\t\tOwner) externa\n      DUP1 \t\t\tOwner) externa\n      DUP4 \t\t\tOwner) externa\n      GT \t\t\tOwner) externa\n      PUSH [tag] 200\t\t\tOwner) externa\n      JUMPI \t\t\tOwner) externa\n      DUP3 \t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n      SUB \t\t\tOwner) externa\n      PUSH 1F\t\t\tOwner) externa\n      AND \t\t\tOwner) externa\n      DUP3 \t\t\tOwner) externa\n      ADD \t\t\tOwner) externa\n      SWAP2 \t\t\tOwner) externa\n    tag 198\t\t\tOwner) externa\n      JUMPDEST \t\t\tOwner) externa\n      POP \t\t\tOwner) externa\n      POP \t\t\tOwner) externa\n      POP \t\t\tOwner) externa\n      POP \t\t\tOwner) externa\n      POP \t\t\tOwner) externa\n      SWAP1 \t\t\tOwner) externa\n      POP \t\t\tOwner) externa\n      SWAP1 \t\t\transfer ownership to\\r\\n    fu...\n      JUMP \t\t\transfer ownership to\\r\\n    fu...\n    tag 93\t\t\t amount) public override {\\r\\n...\n      JUMPDEST \t\t\t amount) public override {\\r\\n...\n      PUSH 0\t\t\t\\n   \n      DUP1 \t\t\tkensBurned(ac\n      PUSH [tag] 202\t\t\tnt, amount);\n      PUSH [tag] 129\t\t\tnt, amount\n      JUMP \t\t\tnt, amount);\n    tag 202\t\t\tnt, amount);\n      JUMPDEST \t\t\tnt, amount);\n      SWAP1 \t\t\tkensBurned(account, amount);\n      POP \t\t\tkensBurned(account, amount);\n      PUSH [tag] 203\t\t\t\\n    /// @notice Rescue any\n      DUP2 \t\t\tnotic\n      DUP6 \t\t\tRe\n      DUP6 \t\t\tue an\n      PUSH [tag] 138\t\t\t\\n    /// \n      JUMP \t\t\t\\n    /// @notice Rescue any\n    tag 203\t\t\t\\n    /// @notice Rescue any\n      JUMPDEST \t\t\t\\n    /// @notice Rescue any\n      PUSH 1\t\t\tt he\n      SWAP2 \t\t\tens sent he\n      POP \t\t\tens sent he\n      POP \t\t\tens sent he\n      SWAP3 \t\t\t amount) public override {\\r\\n...\n      SWAP2 \t\t\t amount) public override {\\r\\n...\n      POP \t\t\t amount) public override {\\r\\n...\n      POP \t\t\t amount) public override {\\r\\n...\n      JUMP \t\t\t amount) public override {\\r\\n...\n    tag 97\t\t\tnction initiateOwnershipTransf...\n      JUMPDEST \t\t\tnction initiateOwnershipTransf...\n      PUSH [tag] 205\t\t\t        ERC20\n      PUSH [tag] 145\t\t\t        ERC\n      JUMP \t\t\t        ERC20\n    tag 205\t\t\t        ERC20\n      JUMPDEST \t\t\t        ERC20\n      PUSH 0\t\t\t,\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twOwner != address(0), \n      AND \t\t\twOwner != address(0), \n      DUP2 \t\t\twOwner !\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twOwner != address(0), \n      AND \t\t\twOwner != address(0), \n      SUB \t\t\twOwner != address(0), \n      PUSH [tag] 207\t\t\tquire(newOwner != address(0), ...\n      JUMPI \t\t\tquire(newOwner != address(0), ...\n      PUSH 40\t\t\tquire(newOwner != address(0), ...\n      MLOAD \t\t\tquire(newOwner != address(0), ...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\tquire(newOwner != address(0), ...\n      DUP2 \t\t\tquire(newOwner != address(0), ...\n      MSTORE \t\t\tquire(newOwner != address(0), ...\n      PUSH 4\t\t\tquire(newOwner != address(0), ...\n      ADD \t\t\tquire(newOwner != address(0), ...\n      PUSH [tag] 208\t\t\tquire(newOwner != address(0), ...\n      SWAP1 \t\t\tquire(newOwner != address(0), ...\n      PUSH [tag] 209\t\t\tquire(newOwner != address(0), ...\n      JUMP \t\t\tquire(newOwner != address(0), ...\n    tag 208\t\t\tquire(newOwner != address(0), ...\n      JUMPDEST \t\t\tquire(newOwner != address(0), ...\n      PUSH 40\t\t\tquire(newOwner != address(0), ...\n      MLOAD \t\t\tquire(newOwner != address(0), ...\n      DUP1 \t\t\tquire(newOwner != address(0), ...\n      SWAP2 \t\t\tquire(newOwner != address(0), ...\n      SUB \t\t\tquire(newOwner != address(0), ...\n      SWAP1 \t\t\tquire(newOwner != address(0), ...\n      REVERT \t\t\tquire(newOwner != address(0), ...\n    tag 207\t\t\tquire(newOwner != address(0), ...\n      JUMPDEST \t\t\tquire(newOwner != address(0), ...\n      DUP1 \t\t\twOwner;\\r\n      PUSH A\t\t\tendingOwner =\n      PUSH 0\t\t\tendingOwner =\n      PUSH 100\t\t\tendingOwner = newOwner;\\r\n      EXP \t\t\tendingOwner = newOwner;\\r\n      DUP2 \t\t\tendingOwner = newOwner;\\r\n      SLOAD \t\t\tendingOwner = newOwner;\\r\n      DUP2 \t\t\tendingOwner = newOwner;\\r\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tendingOwner = newOwner;\\r\n      MUL \t\t\tendingOwner = newOwner;\\r\n      NOT \t\t\tendingOwner = newOwner;\\r\n      AND \t\t\tendingOwner = newOwner;\\r\n      SWAP1 \t\t\tendingOwner = newOwner;\\r\n      DUP4 \t\t\tendingOwner = newOwner;\\r\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tendingOwner = newOwner;\\r\n      AND \t\t\tendingOwner = newOwner;\\r\n      MUL \t\t\tendingOwner = newOwner;\\r\n      OR \t\t\tendingOwner = newOwner;\\r\n      SWAP1 \t\t\tendingOwner = newOwner;\\r\n      SSTORE \t\t\tendingOwner = newOwner;\\r\n      POP \t\t\tendingOwner = newOwner;\\r\n      DUP1 \t\t\twOwner);\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnershipTransferStarted(owner()...\n      AND \t\t\tnershipTransferStarted(owner()...\n      PUSH [tag] 210\t\t\tner(), \n      PUSH [tag] 85\t\t\tner()\n      JUMP \t\t\tner(), \n    tag 210\t\t\tner(), \n      JUMPDEST \t\t\tner(), \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnershipTransferStarted(owner()...\n      AND \t\t\tnershipTransferStarted(owner()...\n      PUSH 38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700\t\t\tnershipTransferStarted(owner()...\n      PUSH 40\t\t\tnershipTransferStarted(owner()...\n      MLOAD \t\t\tnershipTransferStarted(owner()...\n      PUSH 40\t\t\tnershipTransferStarted(owner()...\n      MLOAD \t\t\tnershipTransferStarted(owner()...\n      DUP1 \t\t\tnershipTransferStarted(owner()...\n      SWAP2 \t\t\tnershipTransferStarted(owner()...\n      SUB \t\t\tnershipTransferStarted(owner()...\n      SWAP1 \t\t\tnershipTransferStarted(owner()...\n      LOG3 \t\t\tnershipTransferStarted(owner()...\n      POP \t\t\tnction initiateOwnershipTransf...\n      JUMP \t\t\tnction initiateOwnershipTransf...\n    tag 101\t\t\tss pending to become owner\\r\\n...\n      JUMPDEST \t\t\tss pending to become owner\\r\\n...\n      DUP4 \t\t\t this is\n      TIMESTAMP \t\t\tannot accept un\n      GT \t\t\tannot accept until this is\n      ISZERO \t\t\tr` cannot accept until this is...\n      PUSH [tag] 212\t\t\tr` cannot accept until this is...\n      JUMPI \t\t\tr` cannot accept until this is...\n      DUP4 \t\t\to transf\n      PUSH 40\t\t\tm newOwner The address to tran...\n      MLOAD \t\t\tm newOwner The address to tran...\n      PUSH 6279130200000000000000000000000000000000000000000000000000000000\t\t\tm newOwner The address to tran...\n      DUP2 \t\t\tm newOwner The address to tran...\n      MSTORE \t\t\tm newOwner The address to tran...\n      PUSH 4\t\t\tm newOwner The address to tran...\n      ADD \t\t\tm newOwner The address to tran...\n      PUSH [tag] 213\t\t\tm newOwner The address to tran...\n      SWAP2 \t\t\tm newOwner The address to tran...\n      SWAP1 \t\t\tm newOwner The address to tran...\n      PUSH [tag] 43\t\t\tm newOwner The address to tran...\n      JUMP \t\t\tm newOwner The address to tran...\n    tag 213\t\t\tm newOwner The address to tran...\n      JUMPDEST \t\t\tm newOwner The address to tran...\n      PUSH 40\t\t\tm newOwner The address to tran...\n      MLOAD \t\t\tm newOwner The address to tran...\n      DUP1 \t\t\tm newOwner The address to tran...\n      SWAP2 \t\t\tm newOwner The address to tran...\n      SUB \t\t\tm newOwner The address to tran...\n      SWAP1 \t\t\tm newOwner The address to tran...\n      REVERT \t\t\tm newOwner The address to tran...\n    tag 212\t\t\tr` cannot accept until this is...\n      JUMPDEST \t\t\tr` cannot accept until this is...\n      PUSH 0\t\t\tunction initiateOw\n      PUSH 6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9\t\t\t/ @dev Emitted when tokens are...\n      DUP9 \t\t\tl onl\n      DUP9 \t\t\twner {\\r\n      DUP9 \t\t\t     \n      PUSH [tag] 214\t\t\trequire(newOwner\n      DUP13 \t\t\twOwne\n      PUSH [tag] 215\t\t\trequire(n\n      JUMP \t\t\trequire(newOwner\n    tag 214\t\t\trequire(newOwner\n      JUMPDEST \t\t\trequire(newOwner\n      DUP10 \t\t\t= addres\n      PUSH 40\t\t\ter(address newOwner) external ...\n      MLOAD \t\t\ter(address newOwner) external ...\n      PUSH 20\t\t\ter(address newOwner) external ...\n      ADD \t\t\ter(address newOwner) external ...\n      PUSH [tag] 216\t\t\ter(address newOwner) external ...\n      SWAP7 \t\t\ter(address newOwner) external ...\n      SWAP6 \t\t\ter(address newOwner) external ...\n      SWAP5 \t\t\ter(address newOwner) external ...\n      SWAP4 \t\t\ter(address newOwner) external ...\n      SWAP3 \t\t\ter(address newOwner) external ...\n      SWAP2 \t\t\ter(address newOwner) external ...\n      SWAP1 \t\t\ter(address newOwner) external ...\n      PUSH [tag] 217\t\t\ter(address newOwner) external ...\n      JUMP \t\t\ter(address newOwner) external ...\n    tag 216\t\t\ter(address newOwner) external ...\n      JUMPDEST \t\t\ter(address newOwner) external ...\n      PUSH 40\t\t\ter(address newOwner) external ...\n      MLOAD \t\t\ter(address newOwner) external ...\n      PUSH 20\t\t\ter(address newOwner) external ...\n      DUP2 \t\t\ter(address newOwner) external ...\n      DUP4 \t\t\ter(address newOwner) external ...\n      SUB \t\t\ter(address newOwner) external ...\n      SUB \t\t\ter(address newOwner) external ...\n      DUP2 \t\t\ter(address newOwner) external ...\n      MSTORE \t\t\ter(address newOwner) external ...\n      SWAP1 \t\t\ter(address newOwner) external ...\n      PUSH 40\t\t\ter(address newOwner) external ...\n      MSTORE \t\t\ter(address newOwner) external ...\n      DUP1 \t\t\tshipTransfer(address newOwner)...\n      MLOAD \t\t\tshipTransfer(address newOwner)...\n      SWAP1 \t\t\tshipTransfer(address newOwner)...\n      PUSH 20\t\t\tshipTransfer(address newOwner)...\n      ADD \t\t\tshipTransfer(address newOwner)...\n      KECCAK256 \t\t\tshipTransfer(address newOwner)...\n      SWAP1 \t\t\tunction initiateOwnershipTrans...\n      POP \t\t\tunction initiateOwnershipTrans...\n      PUSH 0\t\t\tdR5: new own\n      PUSH [tag] 218\t\t\tis zero address\");\\r\\n        \n      DUP3 \t\t\t;\\r\\n       \n      PUSH [tag] 219\t\t\tis zero address\"\n      JUMP \t\t\tis zero address\");\\r\\n        \n    tag 218\t\t\tis zero address\");\\r\\n        \n      JUMPDEST \t\t\tis zero address\");\\r\\n        \n      SWAP1 \t\t\tdR5: new owner is zero address...\n      POP \t\t\tdR5: new owner is zero address...\n      PUSH 0\t\t\ter = newOwner;\n      PUSH [tag] 220\t\t\t       emit OwnershipTransfe\n      DUP3 \t\t\tners\n      DUP8 \t\t\tp\n      DUP8 \t\t\ta\n      DUP8 \t\t\tf\n      PUSH [tag] 221\t\t\t       emit O\n      JUMP \t\t\t       emit OwnershipTransfe\n    tag 220\t\t\t       emit OwnershipTransfe\n      JUMPDEST \t\t\t       emit OwnershipTransfe\n      SWAP1 \t\t\ter = newOwner;\\r\\n        emit...\n      POP \t\t\ter = newOwner;\\r\\n        emit...\n      DUP10 \t\t\ter);\\r\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t(), newOwner);\\r\n      AND \t\t\t(), newOwner);\\r\n      DUP2 \t\t\t(), ne\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t(), newOwner);\\r\n      AND \t\t\t(), newOwner);\\r\n      EQ \t\t\t(), newOwner);\\r\n      PUSH [tag] 222\t\t\twner(), newOwner);\\r\\n    }\\r\\...\n      JUMPI \t\t\twner(), newOwner);\\r\\n    }\\r\\...\n      DUP1 \t\t\transfe\n      DUP11 \t\t\t(must\n      PUSH 40\t\t\tce Accept ownership transfer (...\n      MLOAD \t\t\tce Accept ownership transfer (...\n      PUSH 4B800E4600000000000000000000000000000000000000000000000000000000\t\t\tce Accept ownership transfer (...\n      DUP2 \t\t\tce Accept ownership transfer (...\n      MSTORE \t\t\tce Accept ownership transfer (...\n      PUSH 4\t\t\tce Accept ownership transfer (...\n      ADD \t\t\tce Accept ownership transfer (...\n      PUSH [tag] 223\t\t\tce Accept ownership transfer (...\n      SWAP3 \t\t\tce Accept ownership transfer (...\n      SWAP2 \t\t\tce Accept ownership transfer (...\n      SWAP1 \t\t\tce Accept ownership transfer (...\n      PUSH [tag] 224\t\t\tce Accept ownership transfer (...\n      JUMP \t\t\tce Accept ownership transfer (...\n    tag 223\t\t\tce Accept ownership transfer (...\n      JUMPDEST \t\t\tce Accept ownership transfer (...\n      PUSH 40\t\t\tce Accept ownership transfer (...\n      MLOAD \t\t\tce Accept ownership transfer (...\n      DUP1 \t\t\tce Accept ownership transfer (...\n      SWAP2 \t\t\tce Accept ownership transfer (...\n      SUB \t\t\tce Accept ownership transfer (...\n      SWAP1 \t\t\tce Accept ownership transfer (...\n      REVERT \t\t\tce Accept ownership transfer (...\n    tag 222\t\t\twner(), newOwner);\\r\\n    }\\r\\...\n      JUMPDEST \t\t\twner(), newOwner);\\r\\n    }\\r\\...\n      PUSH [tag] 225\t\t\towner)\\r\\n    function acceptO...\n      DUP11 \t\t\t   fu\n      DUP11 \t\t\ttion ac\n      DUP11 \t\t\tptOwn\n      PUSH [tag] 131\t\t\towner)\\r\\n\n      JUMP \t\t\towner)\\r\\n    function acceptO...\n    tag 225\t\t\towner)\\r\\n    function acceptO...\n      JUMPDEST \t\t\towner)\\r\\n    function acceptO...\n      POP \t\t\t (`newOwner` cannot accept unt...\n      POP \t\t\t (`newOwner` cannot accept unt...\n      POP \t\t\t (`newOwner` cannot accept unt...\n      POP \t\t\tss pending to become owner\\r\\n...\n      POP \t\t\tss pending to become owner\\r\\n...\n      POP \t\t\tss pending to become owner\\r\\n...\n      POP \t\t\tss pending to become owner\\r\\n...\n      POP \t\t\tss pending to become owner\\r\\n...\n      POP \t\t\tss pending to become owner\\r\\n...\n      POP \t\t\tss pending to become owner\\r\\n...\n      JUMP \t\t\tss pending to become owner\\r\\n...\n    tag 105\t\t\tokens from\\r\\n    /// @param t...\n      JUMPDEST \t\t\tokens from\\r\\n    /// @param t...\n      PUSH 0\t\t\tm amoun\n      PUSH 1\t\t\t\\r\\n    funct\n      PUSH 0\t\t\t\\r\\n    function eme\n      DUP5 \t\t\ton em\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\\r\\n    function eme\n      AND \t\t\t\\r\\n    function eme\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\\r\\n    function eme\n      AND \t\t\t\\r\\n    function eme\n      DUP2 \t\t\t\\r\\n    function eme\n      MSTORE \t\t\t\\r\\n    function eme\n      PUSH 20\t\t\t\\r\\n    function eme\n      ADD \t\t\t\\r\\n    function eme\n      SWAP1 \t\t\t\\r\\n    function eme\n      DUP2 \t\t\t\\r\\n    function eme\n      MSTORE \t\t\t\\r\\n    function eme\n      PUSH 20\t\t\t\\r\\n    function eme\n      ADD \t\t\t\\r\\n    function eme\n      PUSH 0\t\t\t\\r\\n    function eme\n      KECCAK256 \t\t\t\\r\\n    function eme\n      PUSH 0\t\t\t\\r\\n    function emergencyRec\n      DUP4 \t\t\tgencyRe\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\\r\\n    function emergencyRec\n      AND \t\t\t\\r\\n    function emergencyRec\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\\r\\n    function emergencyRec\n      AND \t\t\t\\r\\n    function emergencyRec\n      DUP2 \t\t\t\\r\\n    function emergencyRec\n      MSTORE \t\t\t\\r\\n    function emergencyRec\n      PUSH 20\t\t\t\\r\\n    function emergencyRec\n      ADD \t\t\t\\r\\n    function emergencyRec\n      SWAP1 \t\t\t\\r\\n    function emergencyRec\n      DUP2 \t\t\t\\r\\n    function emergencyRec\n      MSTORE \t\t\t\\r\\n    function emergencyRec\n      PUSH 20\t\t\t\\r\\n    function emergencyRec\n      ADD \t\t\t\\r\\n    function emergencyRec\n      PUSH 0\t\t\t\\r\\n    function emergencyRec\n      KECCAK256 \t\t\t\\r\\n    function emergencyRec\n      SLOAD \t\t\t\\r\\n    function emergencyRec\n      SWAP1 \t\t\trecover\\r\\n    function emerge...\n      POP \t\t\trecover\\r\\n    function emerge...\n      SWAP3 \t\t\tokens from\\r\\n    /// @param t...\n      SWAP2 \t\t\tokens from\\r\\n    /// @param t...\n      POP \t\t\tokens from\\r\\n    /// @param t...\n      POP \t\t\tokens from\\r\\n    /// @param t...\n      JUMP \t\t\tokens from\\r\\n    /// @param t...\n    tag 108\t\t\tnction pendingOwner() public v...\n      JUMPDEST \t\t\tnction pendingOwner() public v...\n      PUSH 0\t\t\tdress) \n      PUSH A\t\t\tendingOwner;\\r\n      PUSH 0\t\t\tendingOwner;\\r\n      SWAP1 \t\t\tendingOwner;\\r\n      SLOAD \t\t\tendingOwner;\\r\n      SWAP1 \t\t\tendingOwner;\\r\n      PUSH 100\t\t\tendingOwner;\\r\n      EXP \t\t\tendingOwner;\\r\n      SWAP1 \t\t\tendingOwner;\\r\n      DIV \t\t\tendingOwner;\\r\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tendingOwner;\\r\n      AND \t\t\tendingOwner;\\r\n      SWAP1 \t\t\tturn _pendingOwner;\\r\n      POP \t\t\tturn _pendingOwner;\\r\n      SWAP1 \t\t\tnction pendingOwner() public v...\n      JUMP \t\t\tnction pendingOwner() public v...\n    tag 113\t\t\ttion emergencyRecoverERC20(\\r\\...\n      JUMPDEST \t\t\ttion emergencyRecoverERC20(\\r\\...\n      PUSH [tag] 229\t\t\t        ERC20\n      PUSH [tag] 145\t\t\t        ERC\n      JUMP \t\t\t        ERC20\n    tag 229\t\t\t        ERC20\n      JUMPDEST \t\t\t        ERC20\n      DUP3 \t\t\tn.tra\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tn.transfer(to,\n      AND \t\t\tn.transfer(to,\n      PUSH A9059CBB\t\t\tn.transfer(to,\n      DUP4 \t\t\tam\n      DUP4 \t\t\tnt);\\r\\n\n      PUSH 40\t\t\tn.transfer(to, amount);\\r\\n \n      MLOAD \t\t\tn.transfer(to, amount);\\r\\n \n      DUP4 \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH FFFFFFFF\t\t\tn.transfer(to, amount);\\r\\n \n      AND \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH E0\t\t\tn.transfer(to, amount);\\r\\n \n      SHL \t\t\tn.transfer(to, amount);\\r\\n \n      DUP2 \t\t\tn.transfer(to, amount);\\r\\n \n      MSTORE \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 4\t\t\tn.transfer(to, amount);\\r\\n \n      ADD \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH [tag] 231\t\t\tn.transfer(to, amount);\\r\\n \n      SWAP3 \t\t\tn.transfer(to, amount);\\r\\n \n      SWAP2 \t\t\tn.transfer(to, amount);\\r\\n \n      SWAP1 \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH [tag] 232\t\t\tn.transfer(to, amount);\\r\\n \n      JUMP \t\t\tn.transfer(to, amount);\\r\\n \n    tag 231\t\t\tn.transfer(to, amount);\\r\\n \n      JUMPDEST \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 20\t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 40\t\t\tn.transfer(to, amount);\\r\\n \n      MLOAD \t\t\tn.transfer(to, amount);\\r\\n \n      DUP1 \t\t\tn.transfer(to, amount);\\r\\n \n      DUP4 \t\t\tn.transfer(to, amount);\\r\\n \n      SUB \t\t\tn.transfer(to, amount);\\r\\n \n      DUP2 \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 0\t\t\tn.transfer(to, amount);\\r\\n \n      DUP8 \t\t\tn.transfer(to, amount);\\r\\n \n      GAS \t\t\tn.transfer(to, amount);\\r\\n \n      CALL \t\t\tn.transfer(to, amount);\\r\\n \n      ISZERO \t\t\tn.transfer(to, amount);\\r\\n \n      DUP1 \t\t\tn.transfer(to, amount);\\r\\n \n      ISZERO \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH [tag] 234\t\t\tn.transfer(to, amount);\\r\\n \n      JUMPI \t\t\tn.transfer(to, amount);\\r\\n \n      RETURNDATASIZE \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 0\t\t\tn.transfer(to, amount);\\r\\n \n      DUP1 \t\t\tn.transfer(to, amount);\\r\\n \n      RETURNDATACOPY \t\t\tn.transfer(to, amount);\\r\\n \n      RETURNDATASIZE \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 0\t\t\tn.transfer(to, amount);\\r\\n \n      REVERT \t\t\tn.transfer(to, amount);\\r\\n \n    tag 234\t\t\tn.transfer(to, amount);\\r\\n \n      JUMPDEST \t\t\tn.transfer(to, amount);\\r\\n \n      POP \t\t\tn.transfer(to, amount);\\r\\n \n      POP \t\t\tn.transfer(to, amount);\\r\\n \n      POP \t\t\tn.transfer(to, amount);\\r\\n \n      POP \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 40\t\t\tn.transfer(to, amount);\\r\\n \n      MLOAD \t\t\tn.transfer(to, amount);\\r\\n \n      RETURNDATASIZE \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 1F\t\t\tn.transfer(to, amount);\\r\\n \n      NOT \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 1F\t\t\tn.transfer(to, amount);\\r\\n \n      DUP3 \t\t\tn.transfer(to, amount);\\r\\n \n      ADD \t\t\tn.transfer(to, amount);\\r\\n \n      AND \t\t\tn.transfer(to, amount);\\r\\n \n      DUP3 \t\t\tn.transfer(to, amount);\\r\\n \n      ADD \t\t\tn.transfer(to, amount);\\r\\n \n      DUP1 \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH 40\t\t\tn.transfer(to, amount);\\r\\n \n      MSTORE \t\t\tn.transfer(to, amount);\\r\\n \n      POP \t\t\tn.transfer(to, amount);\\r\\n \n      DUP2 \t\t\tn.transfer(to, amount);\\r\\n \n      ADD \t\t\tn.transfer(to, amount);\\r\\n \n      SWAP1 \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH [tag] 235\t\t\tn.transfer(to, amount);\\r\\n \n      SWAP2 \t\t\tn.transfer(to, amount);\\r\\n \n      SWAP1 \t\t\tn.transfer(to, amount);\\r\\n \n      PUSH [tag] 236\t\t\tn.transfer(to, amount);\\r\\n \n      JUMP \t\t\tn.transfer(to, amount);\\r\\n \n    tag 235\t\t\tn.transfer(to, amount);\\r\\n \n      JUMPDEST \t\t\tn.transfer(to, amount);\\r\\n \n      POP \t\t\tn.transfer(to, amount);\\r\\n \n      DUP2 \t\t\tam\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnsRecovered(address(token), to...\n      AND \t\t\tnsRecovered(address(token), to...\n      DUP4 \t\t\tn), t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnsRecovered(address(token), to...\n      AND \t\t\tnsRecovered(address(token), to...\n      PUSH 401F439D865A766757EC78675925BD67198D5E78805AA41691B34B5D6A6CBBE6\t\t\tnsRecovered(address(token), to...\n      DUP4 \t\t\tnt);\\r\\n\n      PUSH 40\t\t\tnsRecovered(address(token), to...\n      MLOAD \t\t\tnsRecovered(address(token), to...\n      PUSH [tag] 237\t\t\tnsRecovered(address(token), to...\n      SWAP2 \t\t\tnsRecovered(address(token), to...\n      SWAP1 \t\t\tnsRecovered(address(token), to...\n      PUSH [tag] 43\t\t\tnsRecovered(address(token), to...\n      JUMP \t\t\tnsRecovered(address(token), to...\n    tag 237\t\t\tnsRecovered(address(token), to...\n      JUMPDEST \t\t\tnsRecovered(address(token), to...\n      PUSH 40\t\t\tnsRecovered(address(token), to...\n      MLOAD \t\t\tnsRecovered(address(token), to...\n      DUP1 \t\t\tnsRecovered(address(token), to...\n      SWAP2 \t\t\tnsRecovered(address(token), to...\n      SUB \t\t\tnsRecovered(address(token), to...\n      SWAP1 \t\t\tnsRecovered(address(token), to...\n      LOG3 \t\t\tnsRecovered(address(token), to...\n      POP \t\t\ttion emergencyRecoverERC20(\\r\\...\n      POP \t\t\ttion emergencyRecoverERC20(\\r\\...\n      POP \t\t\ttion emergencyRecoverERC20(\\r\\...\n      JUMP \t\t\ttion emergencyRecoverERC20(\\r\\...\n    tag 115\t\t\tnt256 public constant CAP = 66...\n      JUMPDEST \t\t\tnt256 public constant CAP = 66...\n      PUSH 36DF8DEC4229FB48100000\t\t\t_337_700 * 10 ** 18;\\r\n      DUP2 \t\t\tnt256 public constant CAP = 66...\n      JUMP \t\t\tnt256 public constant CAP = 66...\n    tag 119\t\t\ttransferOwnership(sender);\\r\\n...\n      JUMPDEST \t\t\ttransferOwnership(sender);\\r\\n...\n      PUSH [tag] 239\t\t\t        ERC20\n      PUSH [tag] 145\t\t\t        ERC\n      JUMP \t\t\t        ERC20\n    tag 239\t\t\t        ERC20\n      JUMPDEST \t\t\t        ERC20\n      PUSH 0\t\t\t/\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tner can call\\r\\n    /// \n      AND \t\t\tner can call\\r\\n    /// \n      DUP2 \t\t\tner can \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tner can call\\r\\n    /// \n      AND \t\t\tner can call\\r\\n    /// \n      SUB \t\t\tner can call\\r\\n    /// \n      PUSH [tag] 241\t\t\te owner can call\\r\\n    /// @p...\n      JUMPI \t\t\te owner can call\\r\\n    /// @p...\n      PUSH 0\t\t\t \n      PUSH 40\t\t\tf the minted tokens\\r\\n    ///...\n      MLOAD \t\t\tf the minted tokens\\r\\n    ///...\n      PUSH 1E4FBDF700000000000000000000000000000000000000000000000000000000\t\t\tf the minted tokens\\r\\n    ///...\n      DUP2 \t\t\tf the minted tokens\\r\\n    ///...\n      MSTORE \t\t\tf the minted tokens\\r\\n    ///...\n      PUSH 4\t\t\tf the minted tokens\\r\\n    ///...\n      ADD \t\t\tf the minted tokens\\r\\n    ///...\n      PUSH [tag] 242\t\t\tf the minted tokens\\r\\n    ///...\n      SWAP2 \t\t\tf the minted tokens\\r\\n    ///...\n      SWAP1 \t\t\tf the minted tokens\\r\\n    ///...\n      PUSH [tag] 87\t\t\tf the minted tokens\\r\\n    ///...\n      JUMP \t\t\tf the minted tokens\\r\\n    ///...\n    tag 242\t\t\tf the minted tokens\\r\\n    ///...\n      JUMPDEST \t\t\tf the minted tokens\\r\\n    ///...\n      PUSH 40\t\t\tf the minted tokens\\r\\n    ///...\n      MLOAD \t\t\tf the minted tokens\\r\\n    ///...\n      DUP1 \t\t\tf the minted tokens\\r\\n    ///...\n      SWAP2 \t\t\tf the minted tokens\\r\\n    ///...\n      SUB \t\t\tf the minted tokens\\r\\n    ///...\n      SWAP1 \t\t\tf the minted tokens\\r\\n    ///...\n      REVERT \t\t\tf the minted tokens\\r\\n    ///...\n    tag 241\t\t\te owner can call\\r\\n    /// @p...\n      JUMPDEST \t\t\te owner can call\\r\\n    /// @p...\n      PUSH [tag] 243\t\t\tto mint (in wei)\\r\\n    functi\n      DUP2 \t\t\t   funct\n      PUSH [tag] 171\t\t\tto mint (in wei)\\r\\n\n      JUMP \t\t\tto mint (in wei)\\r\\n    functi\n    tag 243\t\t\tto mint (in wei)\\r\\n    functi\n      JUMPDEST \t\t\tto mint (in wei)\\r\\n    functi\n      POP \t\t\ttransferOwnership(sender);\\r\\n...\n      JUMP \t\t\ttransferOwnership(sender);\\r\\n...\n    tag 129\t\t\tcyGuard\\r\\n{\\r\\n    /// @notic...\n      JUMPDEST \t\t\tcyGuard\\r\\n{\\r\\n    /// @notic...\n      PUSH 0\t\t\t337,700\n      CALLER \t\t\t\\n    uint2\n      SWAP1 \t\t\timals)\\r\\n    uint2\n      POP \t\t\timals)\\r\\n    uint2\n      SWAP1 \t\t\tcyGuard\\r\\n{\\r\\n    /// @notic...\n      JUMP \t\t\tcyGuard\\r\\n{\\r\\n    /// @notic...\n    tag 131\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 246\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 247\t\t\t\n      JUMP \t\t\t\n    tag 246\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 136\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 249\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 105\t\t\t\n      JUMP \t\t\t\n    tag 249\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 251\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FB8F41B200000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 252\t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 253\t\t\t\n      JUMP \t\t\t\n    tag 252\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 251\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 254\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 247\t\t\t\n      JUMP \t\t\t\n    tag 254\t\t\t\n      JUMPDEST \t\t\t\n    tag 250\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 138\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 256\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 96C6FD1E00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 257\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 257\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 256\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 258\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F0500000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 259\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 259\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 258\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 260\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMP \t\t\t\n    tag 260\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 142\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSHIMMUTABLE 2296\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      ADDRESS \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 263\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSHIMMUTABLE 2294\t\t\t\n      CHAINID \t\t\t\n      EQ \t\t\t\n    tag 263\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 264\t\t\t\n      JUMPI \t\t\t\n      PUSHIMMUTABLE 2292\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 262\t\t\t\n      JUMP \t\t\t\n    tag 264\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 266\t\t\t\n      PUSH [tag] 267\t\t\t\n      JUMP \t\t\t\n    tag 266\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 145\t\t\twner;\\r\\n    }\\r\\n\\r\\n    /// ...\n      JUMPDEST \t\t\twner;\\r\\n    }\\r\\n\\r\\n    /// ...\n      PUSH [tag] 269\t\t\tccount (`new\n      PUSH [tag] 129\t\t\tccount (`n\n      JUMP \t\t\tccount (`new\n    tag 269\t\t\tccount (`new\n      JUMPDEST \t\t\tccount (`new\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t to a new account (`new\n      AND \t\t\t to a new account (`new\n      PUSH [tag] 270\t\t\t to a n\n      PUSH [tag] 85\t\t\t to a\n      JUMP \t\t\t to a n\n    tag 270\t\t\t to a n\n      JUMPDEST \t\t\t to a n\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t to a new account (`new\n      AND \t\t\t to a new account (`new\n      EQ \t\t\t to a new account (`new\n      PUSH [tag] 271\t\t\tsfer to a new account (`newOwn...\n      JUMPI \t\t\tsfer to a new account (`newOwn...\n      PUSH [tag] 272\t\t\t/ @param new\n      PUSH [tag] 129\t\t\t/ @param n\n      JUMP \t\t\t/ @param new\n    tag 272\t\t\t/ @param new\n      JUMPDEST \t\t\t/ @param new\n      PUSH 40\t\t\ttil this is called)\\r\\n    ///...\n      MLOAD \t\t\ttil this is called)\\r\\n    ///...\n      PUSH 118CDAA700000000000000000000000000000000000000000000000000000000\t\t\ttil this is called)\\r\\n    ///...\n      DUP2 \t\t\ttil this is called)\\r\\n    ///...\n      MSTORE \t\t\ttil this is called)\\r\\n    ///...\n      PUSH 4\t\t\ttil this is called)\\r\\n    ///...\n      ADD \t\t\ttil this is called)\\r\\n    ///...\n      PUSH [tag] 273\t\t\ttil this is called)\\r\\n    ///...\n      SWAP2 \t\t\ttil this is called)\\r\\n    ///...\n      SWAP1 \t\t\ttil this is called)\\r\\n    ///...\n      PUSH [tag] 87\t\t\ttil this is called)\\r\\n    ///...\n      JUMP \t\t\ttil this is called)\\r\\n    ///...\n    tag 273\t\t\ttil this is called)\\r\\n    ///...\n      JUMPDEST \t\t\ttil this is called)\\r\\n    ///...\n      PUSH 40\t\t\ttil this is called)\\r\\n    ///...\n      MLOAD \t\t\ttil this is called)\\r\\n    ///...\n      DUP1 \t\t\ttil this is called)\\r\\n    ///...\n      SWAP2 \t\t\ttil this is called)\\r\\n    ///...\n      SUB \t\t\ttil this is called)\\r\\n    ///...\n      SWAP1 \t\t\ttil this is called)\\r\\n    ///...\n      REVERT \t\t\ttil this is called)\\r\\n    ///...\n    tag 271\t\t\tsfer to a new account (`newOwn...\n      JUMPDEST \t\t\tsfer to a new account (`newOwn...\n      JUMP \t\t\twner;\\r\\n    }\\r\\n\\r\\n    /// ...\n    tag 148\t\t\tn acceptOwnership() external {...\n      JUMPDEST \t\t\tn acceptOwnership() external {...\n      PUSH 2\t\t\t(\n      PUSH 9\t\t\tis not \n      SLOAD \t\t\tis not \n      SUB \t\t\tis not the pending \n      PUSH [tag] 275\t\t\t caller is not the pending own...\n      JUMPI \t\t\t caller is not the pending own...\n      PUSH 40\t\t\t caller is not the pending own...\n      MLOAD \t\t\t caller is not the pending own...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t caller is not the pending own...\n      DUP2 \t\t\t caller is not the pending own...\n      MSTORE \t\t\t caller is not the pending own...\n      PUSH 4\t\t\t caller is not the pending own...\n      ADD \t\t\t caller is not the pending own...\n      PUSH [tag] 276\t\t\t caller is not the pending own...\n      SWAP1 \t\t\t caller is not the pending own...\n      PUSH [tag] 277\t\t\t caller is not the pending own...\n      JUMP \t\t\t caller is not the pending own...\n    tag 276\t\t\t caller is not the pending own...\n      JUMPDEST \t\t\t caller is not the pending own...\n      PUSH 40\t\t\t caller is not the pending own...\n      MLOAD \t\t\t caller is not the pending own...\n      DUP1 \t\t\t caller is not the pending own...\n      SWAP2 \t\t\t caller is not the pending own...\n      SUB \t\t\t caller is not the pending own...\n      SWAP1 \t\t\t caller is not the pending own...\n      REVERT \t\t\t caller is not the pending own...\n    tag 275\t\t\t caller is not the pending own...\n      JUMPDEST \t\t\t caller is not the pending own...\n      PUSH 2\t\t\t(\n      PUSH 9\t\t\tnt up t\n      DUP2 \t\t\tnt up to the cap; \n      SWAP1 \t\t\tnt up to the cap; \n      SSTORE \t\t\tnt up to the cap; \n      POP \t\t\tnt up to the cap; \n      JUMP \t\t\tn acceptOwnership() external {...\n    tag 157\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F0500000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 280\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 280\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 279\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 281\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMP \t\t\t\n    tag 281\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 160\t\t\tr can call\\r\\n    /// @param t...\n      JUMPDEST \t\t\tr can call\\r\\n    /// @param t...\n      PUSH 1\t\t\tu\n      PUSH 9\t\t\tReentra\n      DUP2 \t\t\tReentrant {\\r\\n        r\n      SWAP1 \t\t\tReentrant {\\r\\n        r\n      SSTORE \t\t\tReentrant {\\r\\n        r\n      POP \t\t\tReentrant {\\r\\n        r\n      JUMP \t\t\tr can call\\r\\n    /// @param t...\n    tag 163\t\t\tC20Permit,\\r\\n    Ownable,\\r\\n...\n      JUMPDEST \t\t\tC20Permit,\\r\\n    Ownable,\\r\\n...\n      PUSH [tag] 284\t\t\t/// @notice Maximum total \n      PUSH [tag] 285\t\t\totice Maximu\n      PUSH [tag] 129\t\t\totice Maxi\n      JUMP \t\t\totice Maximu\n    tag 285\t\t\totice Maximu\n      JUMPDEST \t\t\totice Maximu\n      DUP3 \t\t\ttotal\n      PUSH [tag] 286\t\t\t/// @\n      JUMP \t\t\t/// @notice Maximum total \n    tag 284\t\t\t/// @notice Maximum total \n      JUMPDEST \t\t\t/// @notice Maximum total \n      POP \t\t\tC20Permit,\\r\\n    Ownable,\\r\\n...\n      JUMP \t\t\tC20Permit,\\r\\n    Ownable,\\r\\n...\n    tag 171\t\t\tto, amount);\\r\\n        emit T...\n      JUMPDEST \t\t\tto, amount);\\r\\n        emit T...\n      PUSH 0\t\t\totice Burn your \n      PUSH 8\t\t\t token\n      PUSH 0\t\t\t token\n      SWAP1 \t\t\t token\n      SLOAD \t\t\t token\n      SWAP1 \t\t\t token\n      PUSH 100\t\t\t token\n      EXP \t\t\t token\n      SWAP1 \t\t\t token\n      DIV \t\t\t token\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t token\n      AND \t\t\t token\n      SWAP1 \t\t\totice Burn your own token\n      POP \t\t\totice Burn your own token\n      DUP2 \t\t\tvent\\r\\n  \n      PUSH 8\t\t\t custo\n      PUSH 0\t\t\t custo\n      PUSH 100\t\t\t custom event\\r\\n  \n      EXP \t\t\t custom event\\r\\n  \n      DUP2 \t\t\t custom event\\r\\n  \n      SLOAD \t\t\t custom event\\r\\n  \n      DUP2 \t\t\t custom event\\r\\n  \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t custom event\\r\\n  \n      MUL \t\t\t custom event\\r\\n  \n      NOT \t\t\t custom event\\r\\n  \n      AND \t\t\t custom event\\r\\n  \n      SWAP1 \t\t\t custom event\\r\\n  \n      DUP4 \t\t\t custom event\\r\\n  \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t custom event\\r\\n  \n      AND \t\t\t custom event\\r\\n  \n      MUL \t\t\t custom event\\r\\n  \n      OR \t\t\t custom event\\r\\n  \n      SWAP1 \t\t\t custom event\\r\\n  \n      SSTORE \t\t\t custom event\\r\\n  \n      POP \t\t\t custom event\\r\\n  \n      DUP2 \t\t\te {\\r\\n   \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t(uint256 amount) public overri...\n      AND \t\t\t(uint256 amount) public overri...\n      DUP2 \t\t\tic overr\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t(uint256 amount) public overri...\n      AND \t\t\t(uint256 amount) public overri...\n      PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t(uint256 amount) public overri...\n      PUSH 40\t\t\t(uint256 amount) public overri...\n      MLOAD \t\t\t(uint256 amount) public overri...\n      PUSH 40\t\t\t(uint256 amount) public overri...\n      MLOAD \t\t\t(uint256 amount) public overri...\n      DUP1 \t\t\t(uint256 amount) public overri...\n      SWAP2 \t\t\t(uint256 amount) public overri...\n      SUB \t\t\t(uint256 amount) public overri...\n      SWAP1 \t\t\t(uint256 amount) public overri...\n      LOG3 \t\t\t(uint256 amount) public overri...\n      POP \t\t\t    /// @notice Burn your own ...\n      POP \t\t\tto, amount);\\r\\n        emit T...\n      JUMP \t\t\tto, amount);\\r\\n        emit T...\n    tag 180\t\t\t /// @dev Emitted when tokens ...\n      JUMPDEST \t\t\t /// @dev Emitted when tokens ...\n      PUSH [tag] 289\t\t\tnsRecovered(\\r\\n        addres...\n      DUP3 \t\t\t      a\n      PUSH [tag] 290\t\t\tress indexed\n      PUSH [tag] 129\t\t\tress index\n      JUMP \t\t\tress indexed\n    tag 290\t\t\tress indexed\n      JUMPDEST \t\t\tress indexed\n      DUP4 \t\t\token,\n      PUSH [tag] 136\t\t\tnsRecovered(\\r\\n \n      JUMP \t\t\tnsRecovered(\\r\\n        addres...\n    tag 289\t\t\tnsRecovered(\\r\\n        addres...\n      JUMPDEST \t\t\tnsRecovered(\\r\\n        addres...\n      PUSH [tag] 291\t\t\tddress indexed to,\\r\\n \n      DUP3 \t\t\t indexe\n      DUP3 \t\t\tto,\\r\\n\n      PUSH [tag] 286\t\t\tddres\n      JUMP \t\t\tddress indexed to,\\r\\n \n    tag 291\t\t\tddress indexed to,\\r\\n \n      JUMPDEST \t\t\tddress indexed to,\\r\\n \n      POP \t\t\t /// @dev Emitted when tokens ...\n      POP \t\t\t /// @dev Emitted when tokens ...\n      JUMP \t\t\t /// @dev Emitted when tokens ...\n    tag 184\t\t\td EIP‑2612 permit\\r\\ncontract ...\n      JUMPDEST \t\t\td EIP‑2612 permit\\r\\ncontract ...\n      PUSH 0\t\t\tC20Burn\n      PUSH 7\t\t\tmit,\\r\\n \n      PUSH 0\t\t\tmit,\\r\\n    Owna\n      DUP4 \t\t\t  Own\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmit,\\r\\n    Owna\n      AND \t\t\tmit,\\r\\n    Owna\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmit,\\r\\n    Owna\n      AND \t\t\tmit,\\r\\n    Owna\n      DUP2 \t\t\tmit,\\r\\n    Owna\n      MSTORE \t\t\tmit,\\r\\n    Owna\n      PUSH 20\t\t\tmit,\\r\\n    Owna\n      ADD \t\t\tmit,\\r\\n    Owna\n      SWAP1 \t\t\tmit,\\r\\n    Owna\n      DUP2 \t\t\tmit,\\r\\n    Owna\n      MSTORE \t\t\tmit,\\r\\n    Owna\n      PUSH 20\t\t\tmit,\\r\\n    Owna\n      ADD \t\t\tmit,\\r\\n    Owna\n      PUSH 0\t\t\tmit,\\r\\n    Owna\n      KECCAK256 \t\t\tmit,\\r\\n    Owna\n      SLOAD \t\t\tmit,\\r\\n    Owna\n      SWAP1 \t\t\tRC20Permit,\\r\\n    Owna\n      POP \t\t\tRC20Permit,\\r\\n    Owna\n      SWAP2 \t\t\td EIP‑2612 permit\\r\\ncontract ...\n      SWAP1 \t\t\td EIP‑2612 permit\\r\\ncontract ...\n      POP \t\t\td EIP‑2612 permit\\r\\ncontract ...\n      JUMP \t\t\td EIP‑2612 permit\\r\\ncontract ...\n    tag 187\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 294\t\t\t\n      PUSH 5\t\t\t\n      PUSHIMMUTABLE 2303\t\t\t\n      PUSH [tag] 295\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      AND \t\t\t\n      JUMP \t\t\t\n    tag 294\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 189\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 297\t\t\t\n      PUSH 6\t\t\t\n      PUSHIMMUTABLE 2306\t\t\t\n      PUSH [tag] 295\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      AND \t\t\t\n      JUMP \t\t\t\n    tag 297\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 215\t\t\ttant CAP = 66_337_700 * 10 ** ...\n      JUMPDEST \t\t\ttant CAP = 66_337_700 * 10 ** ...\n      PUSH 0\t\t\ten new \n      PUSH 7\t\t\tress in\n      PUSH 0\t\t\tress indexed t\n      DUP4 \t\t\texed \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tress indexed t\n      AND \t\t\tress indexed t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tress indexed t\n      AND \t\t\tress indexed t\n      DUP2 \t\t\tress indexed t\n      MSTORE \t\t\tress indexed t\n      PUSH 20\t\t\tress indexed t\n      ADD \t\t\tress indexed t\n      SWAP1 \t\t\tress indexed t\n      DUP2 \t\t\tress indexed t\n      MSTORE \t\t\tress indexed t\n      PUSH 20\t\t\tress indexed t\n      ADD \t\t\tress indexed t\n      PUSH 0\t\t\tress indexed t\n      KECCAK256 \t\t\tress indexed t\n      PUSH 0\t\t\tress indexed t\n      DUP2 \t\t\tress indexed tok\n      SLOAD \t\t\tress indexed tok\n      DUP1 \t\t\tress indexed tok\n      SWAP3 \t\t\tress indexed tok\n      SWAP2 \t\t\tress indexed tok\n      SWAP1 \t\t\tress indexed tok\n      PUSH 1\t\t\tress indexed tok\n      ADD \t\t\tress indexed tok\n      SWAP2 \t\t\tress indexed tok\n      SWAP1 \t\t\tress indexed tok\n      POP \t\t\tress indexed tok\n      SSTORE \t\t\tress indexed tok\n      SWAP1 \t\t\t    address indexed tok\n      POP \t\t\t    address indexed tok\n      SWAP2 \t\t\ttant CAP = 66_337_700 * 10 ** ...\n      SWAP1 \t\t\ttant CAP = 66_337_700 * 10 ** ...\n      POP \t\t\ttant CAP = 66_337_700 * 10 ** ...\n      JUMP \t\t\ttant CAP = 66_337_700 * 10 ** ...\n    tag 219\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 300\t\t\t\n      PUSH [tag] 301\t\t\t\n      PUSH [tag] 142\t\t\t\n      JUMP \t\t\t\n    tag 301\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 302\t\t\t\n      JUMP \t\t\t\n    tag 300\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 221\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 304\t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 305\t\t\t\n      JUMP \t\t\t\n    tag 304\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 306\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 307\t\t\t\n      JUMP \t\t\t\n    tag 306\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 247\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 309\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E602DF0500000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 310\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 310\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 309\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 311\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 94280D6200000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 312\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 312\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 311\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 0\t\t\t\n      DUP7 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925\t\t\t\n      DUP5 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 314\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 43\t\t\t\n      JUMP \t\t\t\n    tag 314\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n    tag 313\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 317\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 152\t\t\t\n      JUMP \t\t\t\n    tag 317\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 318\t\t\t\n      JUMP \t\t\t\n    tag 316\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 319\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E450D38C00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 320\t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 253\t\t\t\n      JUMP \t\t\t\n    tag 320\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 319\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP7 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 318\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 321\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      SUB \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 322\t\t\t\n      JUMP \t\t\t\n    tag 321\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n    tag 322\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 323\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 43\t\t\t\n      JUMP \t\t\t\n    tag 323\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 267\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F\t\t\tnewOwner != address(0), \"Wrapp...\n      PUSHIMMUTABLE 2298\t\t\t\n      PUSHIMMUTABLE 2300\t\t\t\n      CHAINID \t\t\t\n      ADDRESS \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 325\t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 326\t\t\t\n      JUMP \t\t\t\n    tag 325\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 286\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 328\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 96C6FD1E00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 329\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 329\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 328\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 330\t\t\t\n      DUP3 \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMP \t\t\t\n    tag 330\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 295\t\t\t      emit TokensBurned(accoun...\n      JUMPDEST \t\t\t      emit TokensBurned(accoun...\n      PUSH 60\t\t\tnt here by mi\n      PUSH FF\t\t\t// @dev The address pending ow...\n      PUSH 0\t\t\tct to pull tokens\n      SHL \t\t\tct to pull tokens\n      DUP4 \t\t\tC20 c\n      EQ \t\t\tparam token  The ERC20 contrac...\n      PUSH [tag] 332\t\t\t// @param token  The ERC20 con...\n      JUMPI \t\t\t// @param token  The ERC20 con...\n      PUSH [tag] 333\t\t\to     Recipient\n      DUP4 \t\t\tipien\n      PUSH [tag] 334\t\t\to     Re\n      JUMP \t\t\to     Recipient\n    tag 333\t\t\to     Recipient\n      JUMPDEST \t\t\to     Recipient\n      SWAP1 \t\t\tparam to     Recipient\n      POP \t\t\tparam to     Recipient\n      PUSH [tag] 331\t\t\tparam to     Recipient\n      JUMP \t\t\tparam to     Recipient\n    tag 332\t\t\t// @param token  The ERC20 con...\n      JUMPDEST \t\t\t// @param token  The ERC20 con...\n      DUP2 \t\t\t amou\n      DUP1 \t\t\t @param amou\n      SLOAD \t\t\t @param amou\n      PUSH [tag] 336\t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n      PUSH [tag] 122\t\t\t @param amou\n      JUMP \t\t\t @param amou\n    tag 336\t\t\t @param amou\n      JUMPDEST \t\t\t @param amou\n      DUP1 \t\t\t @param amou\n      PUSH 1F\t\t\t @param amou\n      ADD \t\t\t @param amou\n      PUSH 20\t\t\t @param amou\n      DUP1 \t\t\t @param amou\n      SWAP2 \t\t\t @param amou\n      DIV \t\t\t @param amou\n      MUL \t\t\t @param amou\n      PUSH 20\t\t\t @param amou\n      ADD \t\t\t @param amou\n      PUSH 40\t\t\t @param amou\n      MLOAD \t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n      DUP2 \t\t\t @param amou\n      ADD \t\t\t @param amou\n      PUSH 40\t\t\t @param amou\n      MSTORE \t\t\t @param amou\n      DUP1 \t\t\t @param amou\n      SWAP3 \t\t\t @param amou\n      SWAP2 \t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n      DUP2 \t\t\t @param amou\n      DUP2 \t\t\t @param amou\n      MSTORE \t\t\t @param amou\n      PUSH 20\t\t\t @param amou\n      ADD \t\t\t @param amou\n      DUP3 \t\t\t @param amou\n      DUP1 \t\t\t @param amou\n      SLOAD \t\t\t @param amou\n      PUSH [tag] 337\t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n      PUSH [tag] 122\t\t\t @param amou\n      JUMP \t\t\t @param amou\n    tag 337\t\t\t @param amou\n      JUMPDEST \t\t\t @param amou\n      DUP1 \t\t\t @param amou\n      ISZERO \t\t\t @param amou\n      PUSH [tag] 338\t\t\t @param amou\n      JUMPI \t\t\t @param amou\n      DUP1 \t\t\t @param amou\n      PUSH 1F\t\t\t @param amou\n      LT \t\t\t @param amou\n      PUSH [tag] 339\t\t\t @param amou\n      JUMPI \t\t\t @param amou\n      PUSH 100\t\t\t @param amou\n      DUP1 \t\t\t @param amou\n      DUP4 \t\t\t @param amou\n      SLOAD \t\t\t @param amou\n      DIV \t\t\t @param amou\n      MUL \t\t\t @param amou\n      DUP4 \t\t\t @param amou\n      MSTORE \t\t\t @param amou\n      SWAP2 \t\t\t @param amou\n      PUSH 20\t\t\t @param amou\n      ADD \t\t\t @param amou\n      SWAP2 \t\t\t @param amou\n      PUSH [tag] 338\t\t\t @param amou\n      JUMP \t\t\t @param amou\n    tag 339\t\t\t @param amou\n      JUMPDEST \t\t\t @param amou\n      DUP3 \t\t\t @param amou\n      ADD \t\t\t @param amou\n      SWAP2 \t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n      PUSH 0\t\t\t @param amou\n      MSTORE \t\t\t @param amou\n      PUSH 20\t\t\t @param amou\n      PUSH 0\t\t\t @param amou\n      KECCAK256 \t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n    tag 340\t\t\t @param amou\n      JUMPDEST \t\t\t @param amou\n      DUP2 \t\t\t @param amou\n      SLOAD \t\t\t @param amou\n      DUP2 \t\t\t @param amou\n      MSTORE \t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n      PUSH 1\t\t\t @param amou\n      ADD \t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n      PUSH 20\t\t\t @param amou\n      ADD \t\t\t @param amou\n      DUP1 \t\t\t @param amou\n      DUP4 \t\t\t @param amou\n      GT \t\t\t @param amou\n      PUSH [tag] 340\t\t\t @param amou\n      JUMPI \t\t\t @param amou\n      DUP3 \t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n      SUB \t\t\t @param amou\n      PUSH 1F\t\t\t @param amou\n      AND \t\t\t @param amou\n      DUP3 \t\t\t @param amou\n      ADD \t\t\t @param amou\n      SWAP2 \t\t\t @param amou\n    tag 338\t\t\t @param amou\n      JUMPDEST \t\t\t @param amou\n      POP \t\t\t @param amou\n      POP \t\t\t @param amou\n      POP \t\t\t @param amou\n      POP \t\t\t @param amou\n      POP \t\t\t @param amou\n      SWAP1 \t\t\t @param amou\n      POP \t\t\t @param amou\n    tag 331\t\t\t      emit TokensBurned(accoun...\n      JUMPDEST \t\t\t      emit TokensBurned(accoun...\n      SWAP3 \t\t\t      emit TokensBurned(accoun...\n      SWAP2 \t\t\t      emit TokensBurned(accoun...\n      POP \t\t\t      emit TokensBurned(accoun...\n      POP \t\t\t      emit TokensBurned(accoun...\n      JUMP \t\t\t      emit TokensBurned(accoun...\n    tag 302\t\t\t\\r\\n}\\r\\n\n      JUMPDEST \t\t\t\\r\\n}\\r\\n\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1901000000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      DUP4 \t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP3 \t\t\t\n      PUSH 22\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 42\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\\r\\n}\\r\\n\n      SWAP2 \t\t\t\\r\\n}\\r\\n\n      POP \t\t\t\\r\\n}\\r\\n\n      POP \t\t\t\\r\\n}\\r\\n\n      JUMP \t\t\t\\r\\n}\\r\\n\n    tag 305\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\t\t\t\n      DUP5 \t\t\t\n      PUSH 0\t\t\t\n      SHR \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 343\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 3\t\t\t\n      DUP6 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 342\t\t\t\n      JUMP \t\t\t\n    tag 343\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 344\t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 345\t\t\t\n      JUMP \t\t\t\n    tag 344\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP6 \t\t\t\n      GAS \t\t\t\n      STATICCALL \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 347\t\t\t\n      JUMPI \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      RETURNDATACOPY \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 347\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SUB \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 348\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      SHL \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH [tag] 342\t\t\t\n      JUMP \t\t\t\n    tag 348\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      SHL \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 342\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 307\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 350\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 351\t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 351\t\t\t\n      JUMPDEST \t\t\t\n    tag 350\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 353\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 354\t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 354\t\t\t\n      JUMPDEST \t\t\t\n    tag 353\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 349\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 357\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 358\t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 358\t\t\t\n      JUMPDEST \t\t\t\n    tag 357\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 359\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 360\t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 360\t\t\t\n      JUMPDEST \t\t\t\n    tag 359\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 361\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH F645EEDF00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 361\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 363\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 364\t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 364\t\t\t\n      JUMPDEST \t\t\t\n    tag 363\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 365\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 366\t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 366\t\t\t\n      JUMPDEST \t\t\t\n    tag 365\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 367\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      SHR \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FCE698F700000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 368\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 43\t\t\t\n      JUMP \t\t\t\n    tag 368\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 367\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 3\t\t\t\n      DUP1 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 370\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 371\t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 371\t\t\t\n      JUMPDEST \t\t\t\n    tag 370\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 372\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 373\t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 373\t\t\t\n      JUMPDEST \t\t\t\n    tag 372\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 374\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH D78BCE0C00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 375\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 56\t\t\t\n      JUMP \t\t\t\n    tag 375\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 374\t\t\t\n      JUMPDEST \t\t\t\n    tag 349\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 334\t\t\t(newOwner != address(0), \"Wrap...\n      JUMPDEST \t\t\t(newOwner != address(0), \"Wrap...\n      PUSH 60\t\t\tess\");\\r\\n     \n      PUSH 0\t\t\twner = newO\n      PUSH [tag] 377\t\t\tr;\\r\\n        emit\n      DUP4 \t\t\t emi\n      PUSH [tag] 378\t\t\tr;\\r\\n      \n      JUMP \t\t\tr;\\r\\n        emit\n    tag 377\t\t\tr;\\r\\n        emit\n      JUMPDEST \t\t\tr;\\r\\n        emit\n      SWAP1 \t\t\twner = newOwner;\\r\\n        em...\n      POP \t\t\twner = newOwner;\\r\\n        em...\n      PUSH 0\t\t\t transfer (must b\n      PUSH 20\t\t\tnd\n      PUSH FFFFFFFFFFFFFFFF\t\t\talled by pendi\n      DUP2 \t\t\talled by pendi\n      GT \t\t\talled by pendi\n      ISZERO \t\t\talled by pendi\n      PUSH [tag] 379\t\t\talled by pendi\n      JUMPI \t\t\talled by pendi\n      PUSH [tag] 380\t\t\talled by pendi\n      PUSH [tag] 192\t\t\talled by pendi\n      JUMP \t\t\talled by pendi\n    tag 380\t\t\talled by pendi\n      JUMPDEST \t\t\talled by pendi\n    tag 379\t\t\talled by pendi\n      JUMPDEST \t\t\talled by pendi\n      PUSH 40\t\t\talled by pendi\n      MLOAD \t\t\talled by pendi\n      SWAP1 \t\t\talled by pendi\n      DUP1 \t\t\talled by pendi\n      DUP3 \t\t\talled by pendi\n      MSTORE \t\t\talled by pendi\n      DUP1 \t\t\talled by pendi\n      PUSH 1F\t\t\talled by pendi\n      ADD \t\t\talled by pendi\n      PUSH 1F\t\t\talled by pendi\n      NOT \t\t\talled by pendi\n      AND \t\t\talled by pendi\n      PUSH 20\t\t\talled by pendi\n      ADD \t\t\talled by pendi\n      DUP3 \t\t\talled by pendi\n      ADD \t\t\talled by pendi\n      PUSH 40\t\t\talled by pendi\n      MSTORE \t\t\talled by pendi\n      DUP1 \t\t\talled by pendi\n      ISZERO \t\t\talled by pendi\n      PUSH [tag] 381\t\t\talled by pendi\n      JUMPI \t\t\talled by pendi\n      DUP2 \t\t\talled by pendi\n      PUSH 20\t\t\talled by pendi\n      ADD \t\t\talled by pendi\n      PUSH 1\t\t\talled by pendi\n      DUP3 \t\t\talled by pendi\n      MUL \t\t\talled by pendi\n      DUP1 \t\t\talled by pendi\n      CALLDATASIZE \t\t\talled by pendi\n      DUP4 \t\t\talled by pendi\n      CALLDATACOPY \t\t\talled by pendi\n      DUP1 \t\t\talled by pendi\n      DUP3 \t\t\talled by pendi\n      ADD \t\t\talled by pendi\n      SWAP2 \t\t\talled by pendi\n      POP \t\t\talled by pendi\n      POP \t\t\talled by pendi\n      SWAP1 \t\t\talled by pendi\n      POP \t\t\talled by pendi\n    tag 381\t\t\talled by pendi\n      JUMPDEST \t\t\talled by pendi\n      POP \t\t\talled by pendi\n      SWAP1 \t\t\t transfer (must be called by p...\n      POP \t\t\t transfer (must be called by p...\n      DUP2 \t\t\t ad\n      DUP2 \t\t\t   \n      MSTORE \t\t\tl {\\r\\n        add\n      DUP4 \t\t\t req\n      PUSH 20\t\t\t    \n      DUP3 \t\t\t();\n      ADD \t\t\tnder();\\r\\n     \n      MSTORE \t\t\t _msgSender();\\r\\n        requ\n      DUP1 \t\t\tr, \n      SWAP3 \t\t\tingOwner, \n      POP \t\t\tingOwner, \n      POP \t\t\tingOwner, \n      POP \t\t\tingOwner, \n      SWAP2 \t\t\t(newOwner != address(0), \"Wrap...\n      SWAP1 \t\t\t(newOwner != address(0), \"Wrap...\n      POP \t\t\t(newOwner != address(0), \"Wrap...\n      JUMP \t\t\t(newOwner != address(0), \"Wrap...\n    tag 378\t\t\t(0);\\r\\n        _transferOwner...\n      JUMPDEST \t\t\t(0);\\r\\n        _transferOwner...\n      PUSH 0\t\t\tnotice \n      DUP1 \t\t\the cap; only t\n      PUSH FF\t\t\tReci\n      DUP4 \t\t\tram \n      PUSH 0\t\t\towner can call\\r\\n    /// @par...\n      SHR \t\t\towner can call\\r\\n    /// @par...\n      AND \t\t\towner can call\\r\\n    /// @par...\n      SWAP1 \t\t\the cap; only the owner can cal...\n      POP \t\t\the cap; only the owner can cal...\n      PUSH 1F\t\t\ten\n      DUP2 \t\t\tinted \n      GT \t\t\tinted token\n      ISZERO \t\t\the minted tokens\\r\\n    /// @p...\n      PUSH [tag] 383\t\t\the minted tokens\\r\\n    /// @p...\n      JUMPI \t\t\the minted tokens\\r\\n    /// @p...\n      PUSH 40\t\t\tt  Amount to mint (i\n      MLOAD \t\t\tt  Amount to mint (i\n      PUSH B3512B0C00000000000000000000000000000000000000000000000000000000\t\t\tt  Amount to mint (i\n      DUP2 \t\t\tt  Amount to mint (i\n      MSTORE \t\t\tt  Amount to mint (i\n      PUSH 4\t\t\tt  Amount to mint (i\n      ADD \t\t\tt  Amount to mint (i\n      PUSH 40\t\t\tt  Amount to mint (i\n      MLOAD \t\t\tt  Amount to mint (i\n      DUP1 \t\t\tt  Amount to mint (i\n      SWAP2 \t\t\tt  Amount to mint (i\n      SUB \t\t\tt  Amount to mint (i\n      SWAP1 \t\t\tt  Amount to mint (i\n      REVERT \t\t\tt  Amount to mint (i\n    tag 383\t\t\the minted tokens\\r\\n    /// @p...\n      JUMPDEST \t\t\the minted tokens\\r\\n    /// @p...\n      DUP1 \t\t\tddress\n      SWAP2 \t\t\t mint(address\n      POP \t\t\t mint(address\n      POP \t\t\t mint(address\n      SWAP2 \t\t\t(0);\\r\\n        _transferOwner...\n      SWAP1 \t\t\t(0);\\r\\n        _transferOwner...\n      POP \t\t\t(0);\\r\\n        _transferOwner...\n      JUMP \t\t\t(0);\\r\\n        _transferOwner...\n    tag 384\t\t\t-License-Identifier: MIT\\r\\npr...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\r\\npr...\n      PUSH 0\t\t\t.9;\\r\\n\\r\n      DUP2 \t\t\tacts/\n      MLOAD \t\t\t/contracts/t\n      SWAP1 \t\t\tenzeppelin/contracts/t\n      POP \t\t\tenzeppelin/contracts/t\n      SWAP2 \t\t\t-License-Identifier: MIT\\r\\npr...\n      SWAP1 \t\t\t-License-Identifier: MIT\\r\\npr...\n      POP \t\t\t-License-Identifier: MIT\\r\\npr...\n      JUMP \t\t\t-License-Identifier: MIT\\r\\npr...\n    tag 385\t\t\tRC20.sol\";\\r\\nimport \"@openzep...\n      JUMPDEST \t\t\tRC20.sol\";\\r\\nimport \"@openzep...\n      PUSH 0\t\t\tppelin/cont\n      DUP3 \t\t\tsions/\n      DUP3 \t\t\text\n      MSTORE \t\t\t/ERC20/extensions/E\n      PUSH 20\t\t\tzepp\n      DUP3 \t\t\t@op\n      ADD \t\t\trt \"@openzeppe\n      SWAP1 \t\t\tble.sol\";\\r\\nimport \"@openzepp...\n      POP \t\t\tble.sol\";\\r\\nimport \"@openzepp...\n      SWAP3 \t\t\tRC20.sol\";\\r\\nimport \"@openzep...\n      SWAP2 \t\t\tRC20.sol\";\\r\\nimport \"@openzep...\n      POP \t\t\tRC20.sol\";\\r\\nimport \"@openzep...\n      POP \t\t\tRC20.sol\";\\r\\nimport \"@openzep...\n      JUMP \t\t\tRC20.sol\";\\r\\nimport \"@openzep...\n    tag 386\t\t\ts/token/ERC20/extensions/ERC20...\n      JUMPDEST \t\t\ts/token/ERC20/extensions/ERC20...\n      DUP3 \t\t\te.sol\"\n      DUP2 \t\t\twna\n      DUP4 \t\t\tess\n      MCOPY \t\t\tts/access/Ownable.sol\";\n      PUSH 0\t\t\ts\n      DUP4 \t\t\tontrac\n      DUP4 \t\t\tlin\n      ADD \t\t\teppelin/contract\n      MSTORE \t\t\t\"@openzeppelin/contracts/se\n      POP \t\t\ts/token/ERC20/extensions/ERC20...\n      POP \t\t\ts/token/ERC20/extensions/ERC20...\n      POP \t\t\ts/token/ERC20/extensions/ERC20...\n      JUMP \t\t\ts/token/ERC20/extensions/ERC20...\n    tag 387\t\t\tancyGuard.sol\";\\r\\n\\r\\n/// @ti...\n      JUMPDEST \t\t\tancyGuard.sol\";\\r\\n\\r\\n/// @ti...\n      PUSH 0\t\t\t\\n/// @\n      PUSH 1F\t\t\t c\n      NOT \t\t\tixed ca\n      PUSH 1F\t\t\th \n      DUP4 \t\t\toin w\n      ADD \t\t\tR5 coin with a\n      AND \t\t\tfor R5 coin with a fixed cap\n      SWAP1 \t\t\t0 wrapper for R5 coin with a f...\n      POP \t\t\t0 wrapper for R5 coin with a f...\n      SWAP2 \t\t\tancyGuard.sol\";\\r\\n\\r\\n/// @ti...\n      SWAP1 \t\t\tancyGuard.sol\";\\r\\n\\r\\n/// @ti...\n      POP \t\t\tancyGuard.sol\";\\r\\n\\r\\n/// @ti...\n      JUMP \t\t\tancyGuard.sol\";\\r\\n\\r\\n/// @ti...\n    tag 388\t\t\tEIP‑2612 permit\\r\\ncontract Wr...\n      JUMPDEST \t\t\tEIP‑2612 permit\\r\\ncontract Wr...\n      PUSH 0\t\t\t\\r\\n \n      PUSH [tag] 441\t\t\tcyGuard\\r\\n{\\r\\n    /// @notic...\n      DUP3 \t\t\tum to\n      PUSH [tag] 384\t\t\tcyGuard\\r\\n{\\r\\n    /// @notic...\n      JUMP \t\t\tcyGuard\\r\\n{\\r\\n    /// @notic...\n    tag 441\t\t\tcyGuard\\r\\n{\\r\\n    /// @notic...\n      JUMPDEST \t\t\tcyGuard\\r\\n{\\r\\n    /// @notic...\n      PUSH [tag] 442\t\t\t7,700 WR5 (18 decimals)\\r\\n   ...\n      DUP2 \t\t\t7_700 \n      DUP6 \t\t\t66_\n      PUSH [tag] 385\t\t\t7,700 WR5 (18 decimals)\\r\\n   ...\n      JUMP \t\t\t7,700 WR5 (18 decimals)\\r\\n   ...\n    tag 442\t\t\t7,700 WR5 (18 decimals)\\r\\n   ...\n      JUMPDEST \t\t\t7,700 WR5 (18 decimals)\\r\\n   ...\n      SWAP4 \t\t\t: 66,337,700 WR5 (18 decimals)...\n      POP \t\t\t: 66,337,700 WR5 (18 decimals)...\n      PUSH [tag] 443\t\t\t;\\r\\n\\r\\n    /// @dev Emitted ...\n      DUP2 \t\t\tevent \n      DUP6 \t\t\t\\n  \n      PUSH 20\t\t\tmint\n      DUP7 \t\t\tns ar\n      ADD \t\t\ttokens are minte\n      PUSH [tag] 386\t\t\t;\\r\\n\\r\\n    /// @dev Emitted ...\n      JUMP \t\t\t;\\r\\n\\r\\n    /// @dev Emitted ...\n    tag 443\t\t\t;\\r\\n\\r\\n    /// @dev Emitted ...\n      JUMPDEST \t\t\t;\\r\\n\\r\\n    /// @dev Emitted ...\n      PUSH [tag] 444\t\t\ted to, uint256 amount);\\r\\n\\r\\...\n      DUP2 \t\t\t;\\r\\n\\r\\n \n      PUSH [tag] 387\t\t\ted to, uint256 amount);\\r\\n\\r\\...\n      JUMP \t\t\ted to, uint256 amount);\\r\\n\\r\\...\n    tag 444\t\t\ted to, uint256 amount);\\r\\n\\r\\...\n      JUMPDEST \t\t\ted to, uint256 amount);\\r\\n\\r\\...\n      DUP5 \t\t\tind\n      ADD \t\t\tess indexed to, uint256 amount...\n      SWAP2 \t\t\ted(address indexed to, uint256...\n      POP \t\t\ted(address indexed to, uint256...\n      POP \t\t\t  Ownable,\\r\\n    ReentrancyGu...\n      SWAP3 \t\t\tEIP‑2612 permit\\r\\ncontract Wr...\n      SWAP2 \t\t\tEIP‑2612 permit\\r\\ncontract Wr...\n      POP \t\t\tEIP‑2612 permit\\r\\ncontract Wr...\n      POP \t\t\tEIP‑2612 permit\\r\\ncontract Wr...\n      JUMP \t\t\tEIP‑2612 permit\\r\\ncontract Wr...\n    tag 33\t\t\titted when tokens are burned\\r...\n      JUMPDEST \t\t\titted when tokens are burned\\r...\n      PUSH 0\t\t\ted w\n      PUSH 20\t\t\tnt\n      DUP3 \t\t\tfrom the \n      ADD \t\t\tued from the contr\n      SWAP1 \t\t\tare rescued from the contr\n      POP \t\t\tare rescued from the contr\n      DUP2 \t\t\tss indexe\n      DUP2 \t\t\t add\n      SUB \t\t\t     address indexed\n      PUSH 0\t\t\t\\n\n      DUP4 \t\t\tRecovered\n      ADD \t\t\tkensRecovered(\\r\\n \n      MSTORE \t\t\tvent TokensRecovered(\\r\\n     ...\n      PUSH [tag] 446\t\t\tddress indexed to,\\r\\n        ...\n      DUP2 \t\t\td wh\n      DUP5 \t\t\tev Emi\n      PUSH [tag] 388\t\t\tddress indexed to,\\r\\n        ...\n      JUMP \t\t\tddress indexed to,\\r\\n        ...\n    tag 446\t\t\tddress indexed to,\\r\\n        ...\n      JUMPDEST \t\t\tddress indexed to,\\r\\n        ...\n      SWAP1 \t\t\t       address indexed to,\\r\\n...\n      POP \t\t\t       address indexed to,\\r\\n...\n      SWAP3 \t\t\titted when tokens are burned\\r...\n      SWAP2 \t\t\titted when tokens are burned\\r...\n      POP \t\t\titted when tokens are burned\\r...\n      POP \t\t\titted when tokens are burned\\r...\n      JUMP \t\t\titted when tokens are burned\\r...\n    tag 390\t\t\td previousOwner,\\r\\n        ad...\n      JUMPDEST \t\t\td previousOwner,\\r\\n        ad...\n      PUSH 0\t\t\ts\n      DUP1 \t\t\tr\n      REVERT \t\t\trship transf\n    tag 392\t\t\t     Ownable(msg.sender)\\r\\n  ...\n      JUMPDEST \t\t\t     Ownable(msg.sender)\\r\\n  ...\n      PUSH 0\t\t\t    // \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t  }\\r\\n\\r\\n    /// @notice Vie...\n      DUP3 \t\t\tyer\\r\\n\n      AND \t\t\teployer\\r\\n    }\\r\\n\\r\\n    //...\n      SWAP1 \t\t\talized to deployer\\r\\n    }\\r\\...\n      POP \t\t\talized to deployer\\r\\n    }\\r\\...\n      SWAP2 \t\t\t     Ownable(msg.sender)\\r\\n  ...\n      SWAP1 \t\t\t     Ownable(msg.sender)\\r\\n  ...\n      POP \t\t\t     Ownable(msg.sender)\\r\\n  ...\n      JUMP \t\t\t     Ownable(msg.sender)\\r\\n  ...\n    tag 393\t\t\tme owner\\r\\n    function pendi...\n      JUMPDEST \t\t\tme owner\\r\\n    function pendi...\n      PUSH 0\t\t\t public\n      PUSH [tag] 452\t\t\t) {\\r\\n        return _pen\n      DUP3 \t\t\tn _pe\n      PUSH [tag] 392\t\t\t) {\\r\\n        return _pen\n      JUMP \t\t\t) {\\r\\n        return _pen\n    tag 452\t\t\t) {\\r\\n        return _pen\n      JUMPDEST \t\t\t) {\\r\\n        return _pen\n      SWAP1 \t\t\tns (address) {\\r\\n        retu...\n      POP \t\t\tns (address) {\\r\\n        retu...\n      SWAP2 \t\t\tme owner\\r\\n    function pendi...\n      SWAP1 \t\t\tme owner\\r\\n    function pendi...\n      POP \t\t\tme owner\\r\\n    function pendi...\n      JUMP \t\t\tme owner\\r\\n    function pendi...\n    tag 394\t\t\t    }\\r\\n\\r\\n    /// @notice I...\n      JUMPDEST \t\t\t    }\\r\\n\\r\\n    /// @notice I...\n      PUSH [tag] 454\t\t\tewOwner` cannot accept u\n      DUP2 \t\t\tcept \n      PUSH [tag] 393\t\t\tewOwner` cannot accept u\n      JUMP \t\t\tewOwner` cannot accept u\n    tag 454\t\t\tewOwner` cannot accept u\n      JUMPDEST \t\t\tewOwner` cannot accept u\n      DUP2 \t\t\tunt (\n      EQ \t\t\tccount (`newOwner` cannot acce...\n      PUSH [tag] 455\t\t\tto a new account (`newOwner` c...\n      JUMPI \t\t\tto a new account (`newOwner` c...\n      PUSH 0\t\t\tl\n      DUP1 \t\t\t \n      REVERT \t\t\tthis is call\n    tag 455\t\t\tto a new account (`newOwner` c...\n      JUMPDEST \t\t\tto a new account (`newOwner` c...\n      POP \t\t\t    }\\r\\n\\r\\n    /// @notice I...\n      JUMP \t\t\t    }\\r\\n\\r\\n    /// @notice I...\n    tag 395\t\t\tparam newOwner The address to ...\n      JUMPDEST \t\t\tparam newOwner The address to ...\n      PUSH 0\t\t\tip to\n      DUP2 \t\t\transfe\n      CALLDATALOAD \t\t\tateOwnershipTransfer\n      SWAP1 \t\t\tion initiateOwnershipTransfer\n      POP \t\t\tion initiateOwnershipTransfer\n      PUSH [tag] 457\t\t\tnewOwner) external onlyOwner {...\n      DUP2 \t\t\tr {\\r\\n\n      PUSH [tag] 394\t\t\tnewOwner) external onlyOwner {...\n      JUMP \t\t\tnewOwner) external onlyOwner {...\n    tag 457\t\t\tnewOwner) external onlyOwner {...\n      JUMPDEST \t\t\tnewOwner) external onlyOwner {...\n      SWAP3 \t\t\tparam newOwner The address to ...\n      SWAP2 \t\t\tparam newOwner The address to ...\n      POP \t\t\tparam newOwner The address to ...\n      POP \t\t\tparam newOwner The address to ...\n      JUMP \t\t\tparam newOwner The address to ...\n    tag 396\t\t\tre(newOwner != address(0), \"Wr...\n      JUMPDEST \t\t\tre(newOwner != address(0), \"Wr...\n      PUSH 0\t\t\t: new o\n      DUP2 \t\t\t;\\r\\n  \n      SWAP1 \t\t\to address\");\\r\\n  \n      POP \t\t\to address\");\\r\\n  \n      SWAP2 \t\t\tre(newOwner != address(0), \"Wr...\n      SWAP1 \t\t\tre(newOwner != address(0), \"Wr...\n      POP \t\t\tre(newOwner != address(0), \"Wr...\n      JUMP \t\t\tre(newOwner != address(0), \"Wr...\n    tag 397\t\t\tngOwner = newOwner;\\r\\n       ...\n      JUMPDEST \t\t\tngOwner = newOwner;\\r\\n       ...\n      PUSH [tag] 460\t\t\tner);\\r\\n    }\\r\\n\\r\\n    /// \n      DUP2 \t\t\t  ///\n      PUSH [tag] 396\t\t\tner);\\r\\n    }\\r\\n\\r\\n    /// \n      JUMP \t\t\tner);\\r\\n    }\\r\\n\\r\\n    /// \n    tag 460\t\t\tner);\\r\\n    }\\r\\n\\r\\n    /// \n      JUMPDEST \t\t\tner);\\r\\n    }\\r\\n\\r\\n    /// \n      DUP2 \t\t\t, new\n      EQ \t\t\tr(), newOwner);\\r\\n    }\\r\\n\\r...\n      PUSH [tag] 461\t\t\tarted(owner(), newOwner);\\r\\n ...\n      JUMPI \t\t\tarted(owner(), newOwner);\\r\\n ...\n      PUSH 0\t\t\to\n      DUP1 \t\t\tp\n      REVERT \t\t\tce Accept ow\n    tag 461\t\t\tarted(owner(), newOwner);\\r\\n ...\n      JUMPDEST \t\t\tarted(owner(), newOwner);\\r\\n ...\n      POP \t\t\tngOwner = newOwner;\\r\\n       ...\n      JUMP \t\t\tngOwner = newOwner;\\r\\n       ...\n    tag 398\t\t\ter (must be called by pending ...\n      JUMPDEST \t\t\ter (must be called by pending ...\n      PUSH 0\t\t\ttion \n      DUP2 \t\t\t     a\n      CALLDATALOAD \t\t\tternal {\\r\\n        ad\n      SWAP1 \t\t\tship() external {\\r\\n        a...\n      POP \t\t\tship() external {\\r\\n        a...\n      PUSH [tag] 463\t\t\tder = _msgSender();\\r\\n       ...\n      DUP2 \t\t\t  req\n      PUSH [tag] 397\t\t\tder = _msgSender();\\r\\n       ...\n      JUMP \t\t\tder = _msgSender();\\r\\n       ...\n    tag 463\t\t\tder = _msgSender();\\r\\n       ...\n      JUMPDEST \t\t\tder = _msgSender();\\r\\n       ...\n      SWAP3 \t\t\ter (must be called by pending ...\n      SWAP2 \t\t\ter (must be called by pending ...\n      POP \t\t\ter (must be called by pending ...\n      POP \t\t\ter (must be called by pending ...\n      JUMP \t\t\ter (must be called by pending ...\n    tag 36\t\t\t= _pendingOwner, \"WrappedR5: c...\n      JUMPDEST \t\t\t= _pendingOwner, \"WrappedR5: c...\n      PUSH 0\t\t\t     _\n      DUP1 \t\t\tndingO\n      PUSH 40\t\t\thi\n      DUP4 \t\t\tansferOwn\n      DUP6 \t\t\t      _\n      SUB \t\t\t\\r\\n        _transferOwne\n      SLT \t\t\t(0);\\r\\n        _transferOwner...\n      ISZERO \t\t\tess(0);\\r\\n        _transferOw...\n      PUSH [tag] 465\t\t\tess(0);\\r\\n        _transferOw...\n      JUMPI \t\t\tess(0);\\r\\n        _transferOw...\n      PUSH [tag] 466\t\t\tnder);\\r\\n    }\\r\\n\\r\\n    ///...\n      PUSH [tag] 390\t\t\tnder);\\r\\n    }\\r\\n\\r\\n    ///...\n      JUMP \t\t\tnder);\\r\\n    }\\r\\n\\r\\n    ///...\n    tag 466\t\t\tnder);\\r\\n    }\\r\\n\\r\\n    ///...\n      JUMPDEST \t\t\tnder);\\r\\n    }\\r\\n\\r\\n    ///...\n    tag 465\t\t\tess(0);\\r\\n        _transferOw...\n      JUMPDEST \t\t\tess(0);\\r\\n        _transferOw...\n      PUSH 0\t\t\td\n      PUSH [tag] 467\t\t\tamount  Amount to mint (in wei...\n      DUP6 \t\t\t mint(a\n      DUP3 \t\t\t funct\n      DUP7 \t\t\tn wei)\\r\\n \n      ADD \t\t\tt (in wei)\\r\\n    functi\n      PUSH [tag] 395\t\t\tamount  Amount to mint (in wei...\n      JUMP \t\t\tamount  Amount to mint (in wei...\n    tag 467\t\t\tamount  Amount to mint (in wei...\n      JUMPDEST \t\t\tamount  Amount to mint (in wei...\n      SWAP3 \t\t\t// @param amount  Amount to mi...\n      POP \t\t\t// @param amount  Amount to mi...\n      POP \t\t\tm to   Recipient of the minted...\n      PUSH 20\t\t\tee\n      PUSH [tag] 468\t\t\te(totalSupply() + amount <= CA...\n      DUP6 \t\t\tcap exc\n      DUP3 \t\t\tappedR\n      DUP7 \t\t\t<= CAP, \"\n      ADD \t\t\tunt <= CAP, \"WrappedR5\n      PUSH [tag] 398\t\t\te(totalSupply() + amount <= CA...\n      JUMP \t\t\te(totalSupply() + amount <= CA...\n    tag 468\t\t\te(totalSupply() + amount <= CA...\n      JUMPDEST \t\t\te(totalSupply() + amount <= CA...\n      SWAP2 \t\t\t    require(totalSupply() + am...\n      POP \t\t\t    require(totalSupply() + am...\n      POP \t\t\tount) external onlyOwner nonRe...\n      SWAP3 \t\t\t= _pendingOwner, \"WrappedR5: c...\n      POP \t\t\t= _pendingOwner, \"WrappedR5: c...\n      SWAP3 \t\t\t= _pendingOwner, \"WrappedR5: c...\n      SWAP1 \t\t\t= _pendingOwner, \"WrappedR5: c...\n      POP \t\t\t= _pendingOwner, \"WrappedR5: c...\n      JUMP \t\t\t= _pendingOwner, \"WrappedR5: c...\n    tag 399\t\t\tto, amount);\\r\\n        emit T...\n      JUMPDEST \t\t\tto, amount);\\r\\n        emit T...\n      PUSH 0\t\t\tinted(t\n      DUP2 \t\t\te Bur\n      ISZERO \t\t\t @notice Burn\n      ISZERO \t\t\t    /// @notice Burn \n      SWAP1 \t\t\t\\r\\n    }\\r\\n\\r\\n    /// @noti...\n      POP \t\t\t\\r\\n    }\\r\\n\\r\\n    /// @noti...\n      SWAP2 \t\t\tto, amount);\\r\\n        emit T...\n      SWAP1 \t\t\tto, amount);\\r\\n        emit T...\n      POP \t\t\tto, amount);\\r\\n        emit T...\n      JUMP \t\t\tto, amount);\\r\\n        emit T...\n    tag 400\t\t\tens; emits a custom event\\r\\n ...\n      JUMPDEST \t\t\tens; emits a custom event\\r\\n ...\n      PUSH [tag] 471\t\t\t       super.burn(amo\n      DUP2 \t\t\trn(am\n      PUSH [tag] 399\t\t\t       super.burn(amo\n      JUMP \t\t\t       super.burn(amo\n    tag 471\t\t\t       super.burn(amo\n      JUMPDEST \t\t\t       super.burn(amo\n      DUP3 \t\t\t {\\r\n      MSTORE \t\t\tverride {\\r\\n        super.bur...\n      POP \t\t\tens; emits a custom event\\r\\n ...\n      POP \t\t\tens; emits a custom event\\r\\n ...\n      JUMP \t\t\tens; emits a custom event\\r\\n ...\n    tag 39\t\t\t  emit TokensBurned(_msgSender...\n      JUMPDEST \t\t\t  emit TokensBurned(_msgSender...\n      PUSH 0\t\t\telse\n      PUSH 20\t\t\t\\r\\n\n      DUP3 \t\t\tustom eve\n      ADD \t\t\t a custom event\\r\\n \n      SWAP1 \t\t\te; emits a custom event\\r\\n \n      POP \t\t\te; emits a custom event\\r\\n \n      PUSH [tag] 473\t\t\tn burnFrom(address account, ui...\n      PUSH 0\t\t\t\\n\n      DUP4 \t\t\toverride \n      ADD \t\t\tlic override {\\r\\n \n      DUP5 \t\t\tount) \n      PUSH [tag] 400\t\t\tn burnFrom(address account, ui...\n      JUMP \t\t\tn burnFrom(address account, ui...\n    tag 473\t\t\tn burnFrom(address account, ui...\n      JUMPDEST \t\t\tn burnFrom(address account, ui...\n      SWAP3 \t\t\t  emit TokensBurned(_msgSender...\n      SWAP2 \t\t\t  emit TokensBurned(_msgSender...\n      POP \t\t\t  emit TokensBurned(_msgSender...\n      POP \t\t\t  emit TokensBurned(_msgSender...\n      JUMP \t\t\t  emit TokensBurned(_msgSender...\n    tag 401\t\t\turnFrom(account, amount);\\r\\n ...\n      JUMPDEST \t\t\turnFrom(account, amount);\\r\\n ...\n      PUSH [tag] 475\t\t\t/ @notice Rescue any ERC\n      DUP2 \t\t\tny ER\n      PUSH [tag] 396\t\t\t/ @notice Rescue any ERC\n      JUMP \t\t\t/ @notice Rescue any ERC\n    tag 475\t\t\t/ @notice Rescue any ERC\n      JUMPDEST \t\t\t/ @notice Rescue any ERC\n      DUP3 \t\t\t   \n      MSTORE \t\t\t }\\r\\n\\r\\n    /// @notice Resc...\n      POP \t\t\turnFrom(account, amount);\\r\\n ...\n      POP \t\t\turnFrom(account, amount);\\r\\n ...\n      JUMP \t\t\turnFrom(account, amount);\\r\\n ...\n    tag 43\t\t\tt here by mistake\\r\\n    /// @...\n      JUMPDEST \t\t\tt here by mistake\\r\\n    /// @...\n      PUSH 0\t\t\tam t\n      PUSH 20\t\t\ten\n      DUP3 \t\t\trescued t\n      ADD \t\t\tthe rescued tokens\n      SWAP1 \t\t\tient of the rescued tokens\n      POP \t\t\tient of the rescued tokens\n      PUSH [tag] 477\t\t\t@param amount Amount to recove...\n      PUSH 0\t\t\t\\r\n      DUP4 \t\t\tcoverERC2\n      ADD \t\t\tcyRecoverERC20(\\r\\n\n      DUP5 \t\t\tn emer\n      PUSH [tag] 401\t\t\t@param amount Amount to recove...\n      JUMP \t\t\t@param amount Amount to recove...\n    tag 477\t\t\t@param amount Amount to recove...\n      JUMPDEST \t\t\t@param amount Amount to recove...\n      SWAP3 \t\t\tt here by mistake\\r\\n    /// @...\n      SWAP2 \t\t\tt here by mistake\\r\\n    /// @...\n      POP \t\t\tt here by mistake\\r\\n    /// @...\n      POP \t\t\tt here by mistake\\r\\n    /// @...\n      JUMP \t\t\tt here by mistake\\r\\n    /// @...\n    tag 46\t\t\t token,\\r\\n        address to,...\n      JUMPDEST \t\t\t token,\\r\\n        address to,...\n      PUSH 0\t\t\tr {\\r\\n \n      DUP1 \t\t\t     t\n      PUSH 0\t\t\ten.tra\n      PUSH 60\t\t\tve\n      DUP5 \t\t\tt TokensR\n      DUP7 \t\t\t      e\n      SUB \t\t\t\\r\\n        emit TokensRe\n      SLT \t\t\tnt);\\r\\n        emit TokensRec...\n      ISZERO \t\t\tmount);\\r\\n        emit Tokens...\n      PUSH [tag] 479\t\t\tmount);\\r\\n        emit Tokens...\n      JUMPI \t\t\tmount);\\r\\n        emit Tokens...\n      PUSH [tag] 480\t\t\taddress(token), to, amount);\\r...\n      PUSH [tag] 390\t\t\taddress(token), to, amount);\\r...\n      JUMP \t\t\taddress(token), to, amount);\\r...\n    tag 480\t\t\taddress(token), to, amount);\\r...\n      JUMPDEST \t\t\taddress(token), to, amount);\\r...\n    tag 479\t\t\tmount);\\r\\n        emit Tokens...\n      JUMPDEST \t\t\tmount);\\r\\n        emit Tokens...\n      PUSH 0\t\t\t\n      PUSH [tag] 481\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 395\t\t\t\n      JUMP \t\t\t\n    tag 481\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 482\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 395\t\t\t\n      JUMP \t\t\t\n    tag 482\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      PUSH [tag] 483\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 398\t\t\t\n      JUMP \t\t\t\n    tag 483\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t token,\\r\\n        address to,...\n      POP \t\t\t token,\\r\\n        address to,...\n      SWAP3 \t\t\t token,\\r\\n        address to,...\n      POP \t\t\t token,\\r\\n        address to,...\n      SWAP3 \t\t\t token,\\r\\n        address to,...\n      JUMP \t\t\t token,\\r\\n        address to,...\n    tag 402\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 403\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 486\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 402\t\t\t\n      JUMP \t\t\t\n    tag 486\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 52\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 488\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 403\t\t\t\n      JUMP \t\t\t\n    tag 488\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 404\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 405\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 491\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 404\t\t\t\n      JUMP \t\t\t\n    tag 491\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 56\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 493\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 493\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 62\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 495\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 496\t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMP \t\t\t\n    tag 496\t\t\t\n      JUMPDEST \t\t\t\n    tag 495\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 497\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 398\t\t\t\n      JUMP \t\t\t\n    tag 497\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 66\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 499\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 500\t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMP \t\t\t\n    tag 500\t\t\t\n      JUMPDEST \t\t\t\n    tag 499\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 501\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 395\t\t\t\n      JUMP \t\t\t\n    tag 501\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 406\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FF00000000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 407\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 504\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 406\t\t\t\n      JUMP \t\t\t\n    tag 504\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 408\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 506\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 393\t\t\t\n      JUMP \t\t\t\n    tag 506\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 409\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 410\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 411\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 412\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 511\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 396\t\t\t\n      JUMP \t\t\t\n    tag 511\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 413\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 513\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 412\t\t\t\n      JUMP \t\t\t\n    tag 513\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 414\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 415\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 516\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMP \t\t\t\n    tag 516\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 517\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 410\t\t\t\n      JUMP \t\t\t\n    tag 517\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 518\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 411\t\t\t\n      JUMP \t\t\t\n    tag 518\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n    tag 519\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 521\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 522\t\t\t\n      DUP9 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 413\t\t\t\n      JUMP \t\t\t\n    tag 522\t\t\t\n      JUMPDEST \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 523\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 414\t\t\t\n      JUMP \t\t\t\n    tag 523\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 519\t\t\t\n      JUMP \t\t\t\n    tag 521\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      DUP6 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 83\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH E0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 525\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 407\t\t\t\n      JUMP \t\t\t\n    tag 525\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 526\t\t\t\n      DUP2 \t\t\t\n      DUP10 \t\t\t\n      PUSH [tag] 388\t\t\t\n      JUMP \t\t\t\n    tag 526\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 527\t\t\t\n      DUP2 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 388\t\t\t\n      JUMP \t\t\t\n    tag 527\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 528\t\t\t\n      PUSH 60\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 401\t\t\t\n      JUMP \t\t\t\n    tag 528\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 529\t\t\t\n      PUSH 80\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMP \t\t\t\n    tag 529\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 530\t\t\t\n      PUSH A0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 530\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH C0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 531\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 415\t\t\t\n      JUMP \t\t\t\n    tag 531\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP9 \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 87\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 533\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMP \t\t\t\n    tag 533\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 416\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 535\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 402\t\t\t\n      JUMP \t\t\t\n    tag 535\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 536\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 536\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 417\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 538\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 416\t\t\t\n      JUMP \t\t\t\n    tag 538\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 418\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 540\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 404\t\t\t\n      JUMP \t\t\t\n    tag 540\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 541\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 541\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 419\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 543\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 418\t\t\t\n      JUMP \t\t\t\n    tag 543\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 100\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH E0\t\t\t\n      DUP9 \t\t\t\n      DUP11 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 545\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 546\t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMP \t\t\t\n    tag 546\t\t\t\n      JUMPDEST \t\t\t\n    tag 545\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 547\t\t\t\n      DUP11 \t\t\t\n      DUP3 \t\t\t\n      DUP12 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 395\t\t\t\n      JUMP \t\t\t\n    tag 547\t\t\t\n      JUMPDEST \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 548\t\t\t\n      DUP11 \t\t\t\n      DUP3 \t\t\t\n      DUP12 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 395\t\t\t\n      JUMP \t\t\t\n    tag 548\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      PUSH [tag] 549\t\t\t\n      DUP11 \t\t\t\n      DUP3 \t\t\t\n      DUP12 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 398\t\t\t\n      JUMP \t\t\t\n    tag 549\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 550\t\t\t\n      DUP11 \t\t\t\n      DUP3 \t\t\t\n      DUP12 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 398\t\t\t\n      JUMP \t\t\t\n    tag 550\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 80\t\t\t\n      PUSH [tag] 551\t\t\t\n      DUP11 \t\t\t\n      DUP3 \t\t\t\n      DUP12 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 417\t\t\t\n      JUMP \t\t\t\n    tag 551\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH A0\t\t\t\n      PUSH [tag] 552\t\t\t\n      DUP11 \t\t\t\n      DUP3 \t\t\t\n      DUP12 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 419\t\t\t\n      JUMP \t\t\t\n    tag 552\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH C0\t\t\t\n      PUSH [tag] 553\t\t\t\n      DUP11 \t\t\t\n      DUP3 \t\t\t\n      DUP12 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 419\t\t\t\n      JUMP \t\t\t\n    tag 553\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      SWAP9 \t\t\t\n      SWAP2 \t\t\t\n      SWAP5 \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 104\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 555\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 556\t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMP \t\t\t\n    tag 556\t\t\t\n      JUMPDEST \t\t\t\n    tag 555\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 557\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 395\t\t\t\n      JUMP \t\t\t\n    tag 557\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 558\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 395\t\t\t\n      JUMP \t\t\t\n    tag 558\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 420\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 560\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 393\t\t\t\n      JUMP \t\t\t\n    tag 560\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 421\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 562\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 420\t\t\t\n      JUMP \t\t\t\n    tag 562\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 563\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 563\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 422\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 565\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 421\t\t\t\n      JUMP \t\t\t\n    tag 565\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 112\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 567\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 568\t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMP \t\t\t\n    tag 568\t\t\t\n      JUMPDEST \t\t\t\n    tag 567\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 569\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 422\t\t\t\n      JUMP \t\t\t\n    tag 569\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 570\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 395\t\t\t\n      JUMP \t\t\t\n    tag 570\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      PUSH [tag] 571\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 398\t\t\t\n      JUMP \t\t\t\n    tag 571\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      JUMP \t\t\t\n    tag 423\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 122\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 574\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 574\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 575\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 576\t\t\t\n      PUSH [tag] 423\t\t\t\n      JUMP \t\t\t\n    tag 576\t\t\t\n      JUMPDEST \t\t\t\n    tag 575\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 424\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 152\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 579\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 396\t\t\t\n      JUMP \t\t\t\n    tag 579\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 580\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 396\t\t\t\n      JUMP \t\t\t\n    tag 580\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 581\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 582\t\t\t\n      PUSH [tag] 424\t\t\t\n      JUMP \t\t\t\n    tag 582\t\t\t\n      JUMPDEST \t\t\t\n    tag 581\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 425\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5772617070656452353A20636170206578636565646564000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 426\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 585\t\t\t\n      PUSH 17\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 385\t\t\t\n      JUMP \t\t\t\n    tag 585\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 586\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 425\t\t\t\n      JUMP \t\t\t\n    tag 586\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 155\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 588\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 426\t\t\t\n      JUMP \t\t\t\n    tag 588\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 427\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5772617070656452353A2063616C6C6572206973206E6F74207468652070656E\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 64696E67206F776E657200000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 428\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 591\t\t\t\n      PUSH 2A\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 385\t\t\t\n      JUMP \t\t\t\n    tag 591\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 592\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 427\t\t\t\n      JUMP \t\t\t\n    tag 592\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 176\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 594\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 428\t\t\t\n      JUMP \t\t\t\n    tag 594\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 41\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 429\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5772617070656452353A206E6577206F776E6572206973207A65726F20616464\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 7265737300000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 430\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 598\t\t\t\n      PUSH 24\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 385\t\t\t\n      JUMP \t\t\t\n    tag 598\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 599\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 429\t\t\t\n      JUMP \t\t\t\n    tag 599\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 209\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 601\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 430\t\t\t\n      JUMP \t\t\t\n    tag 601\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH C0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 603\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP10 \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 603\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 604\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMP \t\t\t\n    tag 604\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 605\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMP \t\t\t\n    tag 605\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 606\t\t\t\n      PUSH 60\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 401\t\t\t\n      JUMP \t\t\t\n    tag 606\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 607\t\t\t\n      PUSH 80\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 401\t\t\t\n      JUMP \t\t\t\n    tag 607\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 608\t\t\t\n      PUSH A0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 401\t\t\t\n      JUMP \t\t\t\n    tag 608\t\t\t\n      JUMPDEST \t\t\t\n      SWAP8 \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 224\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 610\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMP \t\t\t\n    tag 610\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 611\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMP \t\t\t\n    tag 611\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 232\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 613\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMP \t\t\t\n    tag 613\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 614\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 401\t\t\t\n      JUMP \t\t\t\n    tag 614\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 431\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 616\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 399\t\t\t\n      JUMP \t\t\t\n    tag 616\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 617\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 617\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 432\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 619\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 431\t\t\t\n      JUMP \t\t\t\n    tag 619\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 236\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 621\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 622\t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMP \t\t\t\n    tag 622\t\t\t\n      JUMPDEST \t\t\t\n    tag 621\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 623\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 432\t\t\t\n      JUMP \t\t\t\n    tag 623\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 253\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 625\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMP \t\t\t\n    tag 625\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 626\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 401\t\t\t\n      JUMP \t\t\t\n    tag 626\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 627\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 401\t\t\t\n      JUMP \t\t\t\n    tag 627\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 433\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5265656E7472616E637947756172643A207265656E7472616E742063616C6C00\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 434\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 630\t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 385\t\t\t\n      JUMP \t\t\t\n    tag 630\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 631\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 433\t\t\t\n      JUMP \t\t\t\n    tag 631\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 277\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 633\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 434\t\t\t\n      JUMP \t\t\t\n    tag 633\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 326\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH A0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 635\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 635\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 636\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 636\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 637\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 637\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 638\t\t\t\n      PUSH 60\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 401\t\t\t\n      JUMP \t\t\t\n    tag 638\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 639\t\t\t\n      PUSH 80\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMP \t\t\t\n    tag 639\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 345\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 80\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 641\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 641\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 642\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 403\t\t\t\n      JUMP \t\t\t\n    tag 642\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 643\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 643\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 644\t\t\t\n      PUSH 60\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 644\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 352\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 21\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    .data\n"
}